
Temprature_Sensor_with_auto_trigerring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080007e  0080007e  00000dbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a53  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c47  00000000  00000000  00002a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155b  00000000  00000000  000036aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae4  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d0d  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000788d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_7>
  20:	0c 94 cb 04 	jmp	0x996	; 0x996 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "lcd.h"
#include "Temp_sensor.h"

 int main()
 {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	    /*Initialize Variables for temp. sensor*/
		uint32_t  u32_TEMP_VALUE=0;
  9c:	1a 82       	std	Y+2, r1	; 0x02
  9e:	19 82       	std	Y+1, r1	; 0x01
		uint32_t  u32_TEMP_VALUE_Buffer=0;/*This for making decision to print the current read value or not*/
		/**Inialize Temprature sensor**/
		TEMP_SENSOR_INIT();
  a0:	0e 94 42 01 	call	0x284	; 0x284 <TEMP_SENSOR_INIT>
		/**Inialize LCD**/
		LCD_init();
  a4:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_init>
		/**Display string "Temp=" LCD**/		
		LCD_displayString("TEMP=");
  a8:	87 e7       	ldi	r24, 0x77	; 119
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_displayString>

 int main()
 {
	    /*Initialize Variables for temp. sensor*/
		uint32_t  u32_TEMP_VALUE=0;
		uint32_t  u32_TEMP_VALUE_Buffer=0;/*This for making decision to print the current read value or not*/
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0
		LCD_displayString("TEMP=");

		while(1)
		{
			/**Read the value and put it in u32_TEMP_VALUE register**/
		    TEMP_SENSOR_READ(&u32_TEMP_VALUE);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 55 01 	call	0x2aa	; 0x2aa <TEMP_SENSOR_READ>
			/**Make decison if i am going to display the string of integer on screen or not**/
		    if(u32_TEMP_VALUE!=u32_TEMP_VALUE_Buffer)
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	80 17       	cp	r24, r16
  c2:	91 07       	cpc	r25, r17
  c4:	b9 f3       	breq	.-18     	; 0xb4 <main+0x22>
			{
			   /**Display the string of integer on the screen in postion row->>1 and column->>5 **/
	           LCD_integerToString(u32_TEMP_VALUE,1,5);
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_integerToString>
			   /**Put the value of the approved sample in buffer of the sample**/
			   u32_TEMP_VALUE_Buffer=u32_TEMP_VALUE;
  ce:	09 81       	ldd	r16, Y+1	; 0x01
  d0:	1a 81       	ldd	r17, Y+2	; 0x02
  d2:	f0 cf       	rjmp	.-32     	; 0xb4 <main+0x22>

000000d4 <LCD_sendCommand>:
 * Clear Screen.
 */

void LCD_clearScreen()
{
	LCD_sendCommand(0x01);
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	d9 98       	cbi	0x1b, 1	; 27
  da:	da 98       	cbi	0x1b, 2	; 27
  dc:	db 9a       	sbi	0x1b, 3	; 27
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	9c 2f       	mov	r25, r28
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	89 2b       	or	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	db 98       	cbi	0x1b, 3	; 27
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 108:	db 9a       	sbi	0x1b, 3	; 27
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	28 2f       	mov	r18, r24
 11c:	2f 70       	andi	r18, 0x0F	; 15
 11e:	30 e1       	ldi	r19, 0x10	; 16
 120:	c3 9f       	mul	r28, r19
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	82 2b       	or	r24, r18
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	db 98       	cbi	0x1b, 3	; 27
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LCD_init>:
 13e:	8f e6       	ldi	r24, 0x6F	; 111
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 9a 03 	call	0x734	; 0x734 <Timer_Init>
 146:	8a b3       	in	r24, 0x1a	; 26
 148:	80 6f       	ori	r24, 0xF0	; 240
 14a:	8a bb       	out	0x1a, r24	; 26
 14c:	d1 9a       	sbi	0x1a, 1	; 26
 14e:	d2 9a       	sbi	0x1a, 2	; 26
 150:	d3 9a       	sbi	0x1a, 3	; 26
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 16a:	08 95       	ret

0000016c <LCD_displayCharacter>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	d9 9a       	sbi	0x1b, 1	; 27
 172:	da 98       	cbi	0x1b, 2	; 27
 174:	db 9a       	sbi	0x1b, 3	; 27
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	9c 2f       	mov	r25, r28
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	89 2b       	or	r24, r25
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	db 98       	cbi	0x1b, 3	; 27
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 1a0:	db 9a       	sbi	0x1b, 3	; 27
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	28 2f       	mov	r18, r24
 1b4:	2f 70       	andi	r18, 0x0F	; 15
 1b6:	30 e1       	ldi	r19, 0x10	; 16
 1b8:	c3 9f       	mul	r28, r19
 1ba:	c0 01       	movw	r24, r0
 1bc:	11 24       	eor	r1, r1
 1be:	82 2b       	or	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	db 98       	cbi	0x1b, 3	; 27
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <LCD_displayString>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	59 f0       	breq	.+22     	; 0x1fa <LCD_displayString+0x24>
 1e4:	8f 01       	movw	r16, r30
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_displayCharacter>
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
 1ee:	f8 01       	movw	r30, r16
 1f0:	ec 0f       	add	r30, r28
 1f2:	f1 1d       	adc	r31, r1
 1f4:	80 81       	ld	r24, Z
 1f6:	81 11       	cpse	r24, r1
 1f8:	f7 cf       	rjmp	.-18     	; 0x1e8 <LCD_displayString+0x12>
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <LCD_goToRowColumn>:
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	19 f0       	breq	.+6      	; 0x20c <LCD_goToRowColumn+0xa>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	21 f0       	breq	.+8      	; 0x212 <LCD_goToRowColumn+0x10>
 20a:	05 c0       	rjmp	.+10     	; 0x216 <LCD_goToRowColumn+0x14>
 20c:	90 e8       	ldi	r25, 0x80	; 128
 20e:	96 0f       	add	r25, r22
 210:	02 c0       	rjmp	.+4      	; 0x216 <LCD_goToRowColumn+0x14>
 212:	90 ec       	ldi	r25, 0xC0	; 192
 214:	96 0f       	add	r25, r22
 216:	89 2f       	mov	r24, r25
 218:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 21c:	08 95       	ret

0000021e <LCD_stringRowCol>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
 224:	86 2f       	mov	r24, r22
 226:	64 2f       	mov	r22, r20
 228:	0e 94 01 01 	call	0x202	; 0x202 <LCD_goToRowColumn>
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_displayString>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCD_integerToString>:
}
/*
 * integerToString.
 */
void LCD_integerToString(uint32_t value, uint8_t row, uint8_t col)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	a8 97       	sbiw	r28, 0x28	; 40
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	16 2f       	mov	r17, r22
 252:	04 2f       	mov	r16, r20
	uint32_t buffer[20];
	itoa(value, buffer , 10);
 254:	4a e0       	ldi	r20, 0x0A	; 10
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	0e 94 43 06 	call	0xc86	; 0xc86 <itoa>
	LCD_stringRowCol(buffer, row,col);
 262:	40 2f       	mov	r20, r16
 264:	61 2f       	mov	r22, r17
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_stringRowCol>

}
 26e:	a8 96       	adiw	r28, 0x28	; 40
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <TEMP_SENSOR_INIT>:
	
}
void TEMP_SENSOR_INIT(void)
{
	uint8_t u8_ADC_value_buffer=0;
	ADC_INIT(&gstr_Temp_sensorConfig);
 284:	81 e6       	ldi	r24, 0x61	; 97
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 71 01 	call	0x2e2	; 0x2e2 <ADC_INIT>
	ADC_Interrupt_Enable();
 28c:	33 98       	cbi	0x06, 3	; 6
 28e:	33 9a       	sbi	0x06, 3	; 6
	ADC_Start_Conversion();
 290:	36 9a       	sbi	0x06, 6	; 6
	Timer_Init(&TEMP_TIMER_Init_Config);
 292:	83 e7       	ldi	r24, 0x73	; 115
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 9a 03 	call	0x734	; 0x734 <Timer_Init>
	Timer_Start(TIMER1,7812U,NullPointer);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	64 e8       	ldi	r22, 0x84	; 132
 2a0:	7e e1       	ldi	r23, 0x1E	; 30
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Timer_Start>
 2a8:	08 95       	ret

000002aa <TEMP_SENSOR_READ>:
}

void TEMP_SENSOR_READ(uint32_t*Copy_pu32_Temp_Buffer)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	ADC_READ(Copy_pu32_Temp_Buffer,NullPointer,NullPointer);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_READ>
    *Copy_pu32_Temp_Buffer=*Copy_pu32_Temp_Buffer*0.488;
 2bc:	68 81       	ld	r22, Y
 2be:	79 81       	ldd	r23, Y+1	; 0x01
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 48 05 	call	0xa90	; 0xa90 <__floatunsisf>
 2c8:	23 e2       	ldi	r18, 0x23	; 35
 2ca:	3b ed       	ldi	r19, 0xDB	; 219
 2cc:	49 ef       	ldi	r20, 0xF9	; 249
 2ce:	5e e3       	ldi	r21, 0x3E	; 62
 2d0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__mulsf3>
 2d4:	0e 94 19 05 	call	0xa32	; 0xa32 <__fixunssfsi>
 2d8:	79 83       	std	Y+1, r23	; 0x01
 2da:	68 83       	st	Y, r22
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <ADC_INIT>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS PROTOTYPES ----------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/
ADC_Error_t ADC_INIT(gstrADC_Config_t*CopyPntrStr_ADC_Init_Config)
 { 
 2e2:	fc 01       	movw	r30, r24
      if(NullPointer!=CopyPntrStr_ADC_Init_Config)
 2e4:	89 2b       	or	r24, r25
 2e6:	09 f4       	brne	.+2      	; 0x2ea <ADC_INIT+0x8>
 2e8:	83 c0       	rjmp	.+262    	; 0x3f0 <ADC_INIT+0x10e>
	  {
		    /***Enable ADC unit***/
			ADC_Unit_Enable();
 2ea:	37 98       	cbi	0x06, 7	; 6
 2ec:	37 9a       	sbi	0x06, 7	; 6

			/**** Configure the input channel for ADC****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)<ADC_Channel_0                ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)>ADC_Channel_7         ) ) 
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	88 30       	cpi	r24, 0x08	; 8
 2f4:	91 05       	cpc	r25, r1
 2f6:	20 f0       	brcs	.+8      	; 0x300 <ADC_INIT+0x1e>
			{
			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_CHANNEL_CHOOSE ;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <ADC_INIT+0x2e>
			}
			else
			{

				ADC_Channel_Set(CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose);	 
 300:	96 b1       	in	r25, 0x06	; 6
 302:	80 95       	com	r24
 304:	89 23       	and	r24, r25
 306:	86 b9       	out	0x06, r24	; 6
 308:	97 b1       	in	r25, 0x07	; 7
 30a:	80 81       	ld	r24, Z
 30c:	89 2b       	or	r24, r25
 30e:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC Refrence voltage****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)<ADC_Voltage_Refrence_AREF) || ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)>ADC_Voltage_Internal ) )
 310:	82 81       	ldd	r24, Z+2	; 0x02
 312:	93 81       	ldd	r25, Z+3	; 0x03
 314:	81 3c       	cpi	r24, 0xC1	; 193
 316:	91 05       	cpc	r25, r1
 318:	20 f0       	brcs	.+8      	; 0x322 <ADC_INIT+0x40>
			{

				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_VOLTAGE_REFRENCE_CHOOSE ;
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 320:	08 c0       	rjmp	.+16     	; 0x332 <ADC_INIT+0x50>
			}
			else
			{
				ADC_Voltage_Refrence_Set(CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage); 	 
 322:	96 b1       	in	r25, 0x06	; 6
 324:	80 95       	com	r24
 326:	89 23       	and	r24, r25
 328:	86 b9       	out	0x06, r24	; 6
 32a:	97 b1       	in	r25, 0x07	; 7
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	89 2b       	or	r24, r25
 330:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC sampling frequency ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)<ADC_Freq_4MHZ                     ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)        >ADC_Freq_125KHZ       ) ) 
 332:	84 81       	ldd	r24, Z+4	; 0x04
 334:	95 81       	ldd	r25, Z+5	; 0x05
 336:	07 97       	sbiw	r24, 0x07	; 7
 338:	20 f0       	brcs	.+8      	; 0x342 <ADC_INIT+0x60>
			{
			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_FREQUENCY_CHOOSE ;
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 340:	07 c0       	rjmp	.+14     	; 0x350 <ADC_INIT+0x6e>
			}
			else
			{
				ADC_Choose_Frequency(CopyPntrStr_ADC_Init_Config->ADC_Frequency);
 342:	86 b1       	in	r24, 0x06	; 6
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	86 b9       	out	0x06, r24	; 6
 348:	96 b1       	in	r25, 0x06	; 6
 34a:	84 81       	ldd	r24, Z+4	; 0x04
 34c:	89 2b       	or	r24, r25
 34e:	86 b9       	out	0x06, r24	; 6
			}
			/**** Configure Auto Trigger if it is requested by the user ****/
			if( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Enable ) 
 350:	86 81       	ldd	r24, Z+6	; 0x06
 352:	97 81       	ldd	r25, Z+7	; 0x07
 354:	85 31       	cpi	r24, 0x15	; 21
 356:	91 05       	cpc	r25, r1
 358:	19 f4       	brne	.+6      	; 0x360 <ADC_INIT+0x7e>
			{
		
				ADC_Auto_Trigger_Set();
 35a:	35 98       	cbi	0x06, 5	; 6
 35c:	35 9a       	sbi	0x06, 5	; 6
 35e:	05 c0       	rjmp	.+10     	; 0x36a <ADC_INIT+0x88>
			}
			else if ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Disable ) 
 360:	46 97       	sbiw	r24, 0x16	; 22
 362:	19 f0       	breq	.+6      	; 0x36a <ADC_INIT+0x88>
			{
				/*Do Nothing*/
			}
			else
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_TRIGGER_ENABLE_NOR_DISABLE;
 364:	85 e0       	ldi	r24, 0x05	; 5
 366:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
		 
			}
			/**** Configure Source of auto triggering  ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)<ADC_Auto_Trig_Source_Free_Running_mode_Bits      ) ||  (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)>ADC_No_Need_To_Trigger  )
 36a:	80 85       	ldd	r24, Z+8	; 0x08
 36c:	91 85       	ldd	r25, Z+9	; 0x09
 36e:	82 3e       	cpi	r24, 0xE2	; 226
 370:	91 05       	cpc	r25, r1
 372:	20 f0       	brcs	.+8      	; 0x37c <ADC_INIT+0x9a>
			{
				
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_TRIGGER ;		 
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 37a:	0b c0       	rjmp	.+22     	; 0x392 <ADC_INIT+0xb0>
			} 
			else if((CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)!=ADC_No_Need_To_Trigger  )
 37c:	81 3e       	cpi	r24, 0xE1	; 225
 37e:	91 05       	cpc	r25, r1
 380:	41 f0       	breq	.+16     	; 0x392 <ADC_INIT+0xb0>
			{
		 	    ADC_Auto_Trigger_Source_Set(CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source);
 382:	90 b7       	in	r25, 0x30	; 48
 384:	80 95       	com	r24
 386:	89 23       	and	r24, r25
 388:	80 bf       	out	0x30, r24	; 48
 38a:	90 b7       	in	r25, 0x30	; 48
 38c:	80 85       	ldd	r24, Z+8	; 0x08
 38e:	89 2b       	or	r24, r25
 390:	80 bf       	out	0x30, r24	; 48
			else
			{
				/*Do Nothing*/
			}
			/**** Configure Left or Right Data Register ****/
			if(  (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Left_Adjustment    )  
 392:	82 85       	ldd	r24, Z+10	; 0x0a
 394:	93 85       	ldd	r25, Z+11	; 0x0b
 396:	80 32       	cpi	r24, 0x20	; 32
 398:	91 05       	cpc	r25, r1
 39a:	31 f4       	brne	.+12     	; 0x3a8 <ADC_INIT+0xc6>
			{
			
				ADC_Data_Left_Adjustment_Set(); 
 39c:	3d 98       	cbi	0x07, 5	; 7
 39e:	3d 9a       	sbi	0x07, 5	; 7
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Left_Adjustment;
 3a0:	80 e2       	ldi	r24, 0x20	; 32
 3a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <ADC_INIT+0xd8>
			}
			else if( (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Right_Adjustment )
 3a8:	81 97       	sbiw	r24, 0x21	; 33
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <ADC_INIT+0xd2>
			{
		 
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Right_Adjustment;
 3ac:	81 e2       	ldi	r24, 0x21	; 33
 3ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <ADC_INIT+0xd8>
			}	
			else
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_LEFT_NOR_RIGHT;			 
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
		
			}
			/**Configure Execution Way**/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)<ADC_Executed_By_Interrupt      ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)>ADC_Executed_By_Event_Driven  ) )
 3ba:	84 85       	ldd	r24, Z+12	; 0x0c
 3bc:	95 85       	ldd	r25, Z+13	; 0x0d
 3be:	9c 01       	movw	r18, r24
 3c0:	22 52       	subi	r18, 0x22	; 34
 3c2:	31 09       	sbc	r19, r1
 3c4:	24 30       	cpi	r18, 0x04	; 4
 3c6:	31 05       	cpc	r19, r1
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <ADC_INIT+0xf0>
			{
				
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_EXECUTION_METHOD ;
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <ADC_INIT+0x114>
			}
			else if(  CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Interrupt || CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Event_Driven)
 3d2:	82 32       	cpi	r24, 0x22	; 34
 3d4:	91 05       	cpc	r25, r1
 3d6:	19 f0       	breq	.+6      	; 0x3de <ADC_INIT+0xfc>
 3d8:	85 32       	cpi	r24, 0x25	; 37
 3da:	91 05       	cpc	r25, r1
 3dc:	31 f4       	brne	.+12     	; 0x3ea <ADC_INIT+0x108>
			{
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
 3de:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sgu8_ADC_Execution_Way>
				EnableGeneralInterrupt();
 3e2:	8f b7       	in	r24, 0x3f	; 63
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	8f bf       	out	0x3f, r24	; 63
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <ADC_INIT+0x114>

			}
			else 
			{
				
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
 3ea:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sgu8_ADC_Execution_Way>
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <ADC_INIT+0x114>
			}
	}
	else
	{
		sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_Config_Pointer_Point_To_NULL;
 3f0:	89 e0       	ldi	r24, 0x09	; 9
 3f2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
	}
		 return  sgADC_Error_ADC_INIT_API;     
 }
 3f6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <sgADC_Error_ADC_INIT_API>
 3fa:	08 95       	ret

000003fc <ADC_READ>:
 
ADC_Error_t ADC_READ(uint32_t* Copyu32_ADC_Value,PntrToFunc_t Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR,uint8_t* Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG)
 {
 3fc:	fc 01       	movw	r30, r24
     int Ain,AinLow;
     static uint8_t Event_Driven_1st_time=1;
	 static uint8_t sgu8_ADC_READ_STATE=0;

     /*Check that there is no error occur while initialization*/	 
	 if(sgADC_Error_ADC_INIT_API==ADC_INIT_API_NO_ERROR)
 3fe:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sgADC_Error_ADC_INIT_API>
 402:	91 11       	cpse	r25, r1
 404:	72 c0       	rjmp	.+228    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	 { 		
/*
		DIO_Init_Pin(30,1);
		DIO_toggle_Pin(30);		 */ 	 
         /**Check If the execution way is done by polling **/ 	
		 if(sgu8_ADC_Execution_Way==ADC_Executed_By_Polling)
 406:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sgu8_ADC_Execution_Way>
 40a:	83 32       	cpi	r24, 0x23	; 35
 40c:	e9 f4       	brne	.+58     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		 {

			 ADC_Start_Conversion();
 40e:	36 9a       	sbi	0x06, 6	; 6

			 while(ADC_Read_Interrupt_Flag_State()==0);
 410:	34 9b       	sbis	0x06, 4	; 6
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

             /**Check If the data is left adjusted or right**/ 			 
			 if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 414:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 418:	80 32       	cpi	r24, 0x20	; 32
 41a:	79 f4       	brne	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			 {				
				  *Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	24 b1       	in	r18, 0x04	; 4
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	22 95       	swap	r18
 42c:	26 95       	lsr	r18
 42e:	26 95       	lsr	r18
 430:	23 70       	andi	r18, 0x03	; 3
 432:	82 2b       	or	r24, r18
 434:	91 83       	std	Z+1, r25	; 0x01
 436:	80 83       	st	Z, r24
 438:	5b c0       	rjmp	.+182    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			 }
			 else
			 {
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 43a:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 43c:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	92 2b       	or	r25, r18
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	80 83       	st	Z, r24
 446:	54 c0       	rjmp	.+168    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		 }
         /**Check If the execution way is done by interrupt or event or time driven **/ 		 
		 else
		 {
			 
			 if(sgu8_ADC_Execution_Way!=ADC_Executed_By_Time_Driven)
 448:	84 32       	cpi	r24, 0x24	; 36
 44a:	29 f1       	breq	.+74     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			 {
				
			    /*while(ADC_Read_Interrupt_Flag_State()==0);*/
				/**Check If PntrToFunction does'nt point to NullPointer**/
				if(NullPointer!=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR)
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	29 f0       	breq	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				{
				 
					sgPntrToFun_ADC_ISR=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR;
 452:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 456:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <sgPntrToFun_ADC_ISR>
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				}
				else
				{
					sgADC_Error_ADC_READ_API=ADC_READ_CALL_BACK_POITNER_IS_NULL;
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				}
				/**Check If the data is left adjusted or right**/
				if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 462:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 466:	80 32       	cpi	r24, 0x20	; 32
 468:	79 f4       	brne	.+30     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
				{
						             
					*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 46a:	85 b1       	in	r24, 0x05	; 5
 46c:	24 b1       	in	r18, 0x04	; 4
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	22 95       	swap	r18
 47a:	26 95       	lsr	r18
 47c:	26 95       	lsr	r18
 47e:	23 70       	andi	r18, 0x03	; 3
 480:	82 2b       	or	r24, r18
 482:	91 83       	std	Z+1, r25	; 0x01
 484:	80 83       	st	Z, r24
 486:	34 c0       	rjmp	.+104    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				}
				else
				{
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 488:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 48a:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	92 2b       	or	r25, r18
 490:	91 83       	std	Z+1, r25	; 0x01
 492:	80 83       	st	Z, r24
 494:	2d c0       	rjmp	.+90     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				}
			 }
			 else
			 {
				switch(sgu8_ADC_READ_STATE)
 496:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 49a:	88 23       	and	r24, r24
 49c:	19 f0       	breq	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	31 f0       	breq	.+12     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a2:	26 c0       	rjmp	.+76     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				{
					case 0:
					{
				        ADC_Start_Conversion();
 4a4:	36 9a       	sbi	0x06, 6	; 6
						sgu8_ADC_READ_STATE=1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
					}

					break;
 4ac:	21 c0       	rjmp	.+66     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					case 1:
					{

/*							SET_BIT(ADC_CNTRL_STATUS_REG,ADC_Interrupt_flag_Bit);*/
                      		/**Check If the data is left adjusted or right**/
                      		if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 4ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 4b2:	80 32       	cpi	r24, 0x20	; 32
 4b4:	79 f4       	brne	.+30     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
                      		{
	                      					
	                      		*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 4b6:	85 b1       	in	r24, 0x05	; 5
 4b8:	24 b1       	in	r18, 0x04	; 4
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	22 95       	swap	r18
 4c6:	26 95       	lsr	r18
 4c8:	26 95       	lsr	r18
 4ca:	23 70       	andi	r18, 0x03	; 3
 4cc:	82 2b       	or	r24, r18
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
                      		}
                      		else
                      		{
								AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 4d4:	84 b1       	in	r24, 0x04	; 4
								Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 4d6:	25 b1       	in	r18, 0x05	; 5
							   *Copyu32_ADC_Value=Ain|AinLow ;	
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	92 2b       	or	r25, r18
 4dc:	91 83       	std	Z+1, r25	; 0x01
 4de:	80 83       	st	Z, r24
                      		}			
							sgu8_ADC_READ_STATE=0;
 4e0:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
							*Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG=0;
 4e4:	fa 01       	movw	r30, r20
 4e6:	10 82       	st	Z, r1
						}									

					break;
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	 		 
		 }
	 }
	 else
	 {
		 sgADC_Error_ADC_READ_API=ADC_READ_ERROR_Due_To_ADC_INIT_ERROR;
 4ea:	8f e1       	ldi	r24, 0x1F	; 31
 4ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
 4f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4f4:	08 95       	ret

000004f6 <__vector_16>:
 
ADC_ISR_CODE()
{
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	DIO_Init_Pin(26,1);
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	8a e1       	ldi	r24, 0x1A	; 26
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_Init_Pin>
	DIO_toggle_Pin(26);
 524:	8a e1       	ldi	r24, 0x1A	; 26
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 4a 03 	call	0x694	; 0x694 <DIO_toggle_Pin>
	
	TIMER_CLR_INT_FLAG(TIMER1_B_COMP_FLAG);
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	88 bf       	out	0x38, r24	; 56
	
	if(NullPointer!=sgPntrToFun_ADC_ISR)
 530:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <sgPntrToFun_ADC_ISR>
 534:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 538:	89 2b       	or	r24, r25
 53a:	29 f0       	breq	.+10     	; 0x546 <__vector_16+0x50>
	{
			sgPntrToFun_ADC_ISR();
 53c:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <sgPntrToFun_ADC_ISR>
 540:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 544:	09 95       	icall
	{
		/*Do Nothing*/
	}

	
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <DIO_Init_Pin>:
		default :
		return DIO_ERROR_NOK;
		break;
		}
return DIO_ERROR_OK;
}
 568:	80 32       	cpi	r24, 0x20	; 32
 56a:	08 f0       	brcs	.+2      	; 0x56e <DIO_Init_Pin+0x6>
 56c:	8f c0       	rjmp	.+286    	; 0x68c <DIO_Init_Pin+0x124>
 56e:	98 2f       	mov	r25, r24
 570:	97 70       	andi	r25, 0x07	; 7
 572:	86 95       	lsr	r24
 574:	86 95       	lsr	r24
 576:	86 95       	lsr	r24
 578:	8f 5b       	subi	r24, 0xBF	; 191
 57a:	82 34       	cpi	r24, 0x42	; 66
 57c:	51 f1       	breq	.+84     	; 0x5d2 <DIO_Init_Pin+0x6a>
 57e:	18 f4       	brcc	.+6      	; 0x586 <DIO_Init_Pin+0x1e>
 580:	81 34       	cpi	r24, 0x41	; 65
 582:	41 f0       	breq	.+16     	; 0x594 <DIO_Init_Pin+0x2c>
 584:	85 c0       	rjmp	.+266    	; 0x690 <DIO_Init_Pin+0x128>
 586:	83 34       	cpi	r24, 0x43	; 67
 588:	09 f4       	brne	.+2      	; 0x58c <DIO_Init_Pin+0x24>
 58a:	42 c0       	rjmp	.+132    	; 0x610 <DIO_Init_Pin+0xa8>
 58c:	84 34       	cpi	r24, 0x44	; 68
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_Init_Pin+0x2a>
 590:	5e c0       	rjmp	.+188    	; 0x64e <DIO_Init_Pin+0xe6>
 592:	7e c0       	rjmp	.+252    	; 0x690 <DIO_Init_Pin+0x128>
 594:	61 11       	cpse	r22, r1
 596:	0f c0       	rjmp	.+30     	; 0x5b6 <DIO_Init_Pin+0x4e>
 598:	4a b3       	in	r20, 0x1a	; 26
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_Init_Pin+0x3e>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	9a 95       	dec	r25
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_Init_Pin+0x3a>
 5aa:	cb 01       	movw	r24, r22
 5ac:	80 95       	com	r24
 5ae:	84 23       	and	r24, r20
 5b0:	8a bb       	out	0x1a, r24	; 26
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
 5b6:	4a b3       	in	r20, 0x1a	; 26
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	b9 01       	movw	r22, r18
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_Init_Pin+0x5c>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	9a 95       	dec	r25
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_Init_Pin+0x58>
 5c8:	cb 01       	movw	r24, r22
 5ca:	84 2b       	or	r24, r20
 5cc:	8a bb       	out	0x1a, r24	; 26
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	08 95       	ret
 5d2:	61 11       	cpse	r22, r1
 5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <DIO_Init_Pin+0x8c>
 5d6:	47 b3       	in	r20, 0x17	; 23
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	b9 01       	movw	r22, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_Init_Pin+0x7c>
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	9a 95       	dec	r25
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_Init_Pin+0x78>
 5e8:	cb 01       	movw	r24, r22
 5ea:	80 95       	com	r24
 5ec:	84 23       	and	r24, r20
 5ee:	87 bb       	out	0x17, r24	; 23
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	08 95       	ret
 5f4:	47 b3       	in	r20, 0x17	; 23
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	b9 01       	movw	r22, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_Init_Pin+0x9a>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	9a 95       	dec	r25
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_Init_Pin+0x96>
 606:	cb 01       	movw	r24, r22
 608:	84 2b       	or	r24, r20
 60a:	87 bb       	out	0x17, r24	; 23
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
 610:	61 11       	cpse	r22, r1
 612:	0f c0       	rjmp	.+30     	; 0x632 <DIO_Init_Pin+0xca>
 614:	44 b3       	in	r20, 0x14	; 20
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	b9 01       	movw	r22, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_Init_Pin+0xba>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	9a 95       	dec	r25
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_Init_Pin+0xb6>
 626:	cb 01       	movw	r24, r22
 628:	80 95       	com	r24
 62a:	84 23       	and	r24, r20
 62c:	84 bb       	out	0x14, r24	; 20
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	08 95       	ret
 632:	44 b3       	in	r20, 0x14	; 20
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	b9 01       	movw	r22, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_Init_Pin+0xd8>
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	9a 95       	dec	r25
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_Init_Pin+0xd4>
 644:	cb 01       	movw	r24, r22
 646:	84 2b       	or	r24, r20
 648:	84 bb       	out	0x14, r24	; 20
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
 64e:	61 11       	cpse	r22, r1
 650:	0f c0       	rjmp	.+30     	; 0x670 <DIO_Init_Pin+0x108>
 652:	41 b3       	in	r20, 0x11	; 17
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	b9 01       	movw	r22, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_Init_Pin+0xf8>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	9a 95       	dec	r25
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_Init_Pin+0xf4>
 664:	cb 01       	movw	r24, r22
 666:	80 95       	com	r24
 668:	84 23       	and	r24, r20
 66a:	81 bb       	out	0x11, r24	; 17
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	08 95       	ret
 670:	41 b3       	in	r20, 0x11	; 17
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	b9 01       	movw	r22, r18
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_Init_Pin+0x116>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	9a 95       	dec	r25
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_Init_Pin+0x112>
 682:	cb 01       	movw	r24, r22
 684:	84 2b       	or	r24, r20
 686:	81 bb       	out	0x11, r24	; 17
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	08 95       	ret
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	08 95       	ret

00000694 <DIO_toggle_Pin>:
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 694:	80 32       	cpi	r24, 0x20	; 32
 696:	08 f0       	brcs	.+2      	; 0x69a <DIO_toggle_Pin+0x6>
 698:	49 c0       	rjmp	.+146    	; 0x72c <DIO_toggle_Pin+0x98>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
 69a:	98 2f       	mov	r25, r24
 69c:	97 70       	andi	r25, 0x07	; 7
	}
	
	switch(por)
 69e:	86 95       	lsr	r24
 6a0:	86 95       	lsr	r24
 6a2:	86 95       	lsr	r24
 6a4:	8f 5b       	subi	r24, 0xBF	; 191
 6a6:	82 34       	cpi	r24, 0x42	; 66
 6a8:	b9 f0       	breq	.+46     	; 0x6d8 <DIO_toggle_Pin+0x44>
 6aa:	18 f4       	brcc	.+6      	; 0x6b2 <DIO_toggle_Pin+0x1e>
 6ac:	81 34       	cpi	r24, 0x41	; 65
 6ae:	31 f0       	breq	.+12     	; 0x6bc <DIO_toggle_Pin+0x28>
 6b0:	3f c0       	rjmp	.+126    	; 0x730 <DIO_toggle_Pin+0x9c>
 6b2:	83 34       	cpi	r24, 0x43	; 67
 6b4:	f9 f0       	breq	.+62     	; 0x6f4 <DIO_toggle_Pin+0x60>
 6b6:	84 34       	cpi	r24, 0x44	; 68
 6b8:	59 f1       	breq	.+86     	; 0x710 <DIO_toggle_Pin+0x7c>
 6ba:	3a c0       	rjmp	.+116    	; 0x730 <DIO_toggle_Pin+0x9c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 6bc:	4b b3       	in	r20, 0x1b	; 27
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	b9 01       	movw	r22, r18
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_toggle_Pin+0x36>
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	9a 95       	dec	r25
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_toggle_Pin+0x32>
 6ce:	cb 01       	movw	r24, r22
 6d0:	84 27       	eor	r24, r20
 6d2:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 6d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
 6d6:	08 95       	ret
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 6d8:	48 b3       	in	r20, 0x18	; 24
 6da:	21 e0       	ldi	r18, 0x01	; 1
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	b9 01       	movw	r22, r18
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_toggle_Pin+0x52>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	9a 95       	dec	r25
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_toggle_Pin+0x4e>
 6ea:	cb 01       	movw	r24, r22
 6ec:	84 27       	eor	r24, r20
 6ee:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
 6f2:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 6f4:	45 b3       	in	r20, 0x15	; 21
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	b9 01       	movw	r22, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_toggle_Pin+0x6e>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	9a 95       	dec	r25
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_toggle_Pin+0x6a>
 706:	cb 01       	movw	r24, r22
 708:	84 27       	eor	r24, r20
 70a:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 70c:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
 70e:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 710:	42 b3       	in	r20, 0x12	; 18
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	b9 01       	movw	r22, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_toggle_Pin+0x8a>
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	9a 95       	dec	r25
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_toggle_Pin+0x86>
 722:	cb 01       	movw	r24, r22
 724:	84 27       	eor	r24, r20
 726:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 728:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
 72a:	08 95       	ret
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
			 break;
		case 'G':TOGGLE_BIT(PORTG,pin);
			 break;
#endif
		default :
		return DIO_ERROR_NOK;
 730:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	return DIO_ERROR_OK;
}
 732:	08 95       	ret

00000734 <Timer_Init>:
		}
		break;
	}
	
	return TIMER_ERROR_OK;
}
 734:	fc 01       	movw	r30, r24
 736:	89 2b       	or	r24, r25
 738:	09 f4       	brne	.+2      	; 0x73c <Timer_Init+0x8>
 73a:	47 c0       	rjmp	.+142    	; 0x7ca <Timer_Init+0x96>
 73c:	90 81       	ld	r25, Z
 73e:	29 2f       	mov	r18, r25
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	d9 01       	movw	r26, r18
 744:	a4 57       	subi	r26, 0x74	; 116
 746:	bf 4f       	sbci	r27, 0xFF	; 255
 748:	8c 91       	ld	r24, X
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	09 f4       	brne	.+2      	; 0x750 <Timer_Init+0x1c>
 74e:	48 c0       	rjmp	.+144    	; 0x7e0 <Timer_Init+0xac>
 750:	93 30       	cpi	r25, 0x03	; 3
 752:	e8 f5       	brcc	.+122    	; 0x7ce <Timer_Init+0x9a>
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	e0 f5       	brcc	.+120    	; 0x7d2 <Timer_Init+0x9e>
 75a:	43 81       	ldd	r20, Z+3	; 0x03
 75c:	42 30       	cpi	r20, 0x02	; 2
 75e:	d8 f5       	brcc	.+118    	; 0x7d6 <Timer_Init+0xa2>
 760:	51 81       	ldd	r21, Z+1	; 0x01
 762:	58 30       	cpi	r21, 0x08	; 8
 764:	d0 f5       	brcc	.+116    	; 0x7da <Timer_Init+0xa6>
 766:	d9 01       	movw	r26, r18
 768:	a4 57       	subi	r26, 0x74	; 116
 76a:	bf 4f       	sbci	r27, 0xFF	; 255
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	6c 93       	st	X, r22
 770:	d9 01       	movw	r26, r18
 772:	a1 57       	subi	r26, 0x71	; 113
 774:	bf 4f       	sbci	r27, 0xFF	; 255
 776:	8c 93       	st	X, r24
 778:	d9 01       	movw	r26, r18
 77a:	ae 56       	subi	r26, 0x6E	; 110
 77c:	bf 4f       	sbci	r27, 0xFF	; 255
 77e:	4c 93       	st	X, r20
 780:	81 30       	cpi	r24, 0x01	; 1
 782:	d9 f4       	brne	.+54     	; 0x7ba <Timer_Init+0x86>
 784:	91 30       	cpi	r25, 0x01	; 1
 786:	61 f0       	breq	.+24     	; 0x7a0 <Timer_Init+0x6c>
 788:	18 f0       	brcs	.+6      	; 0x790 <Timer_Init+0x5c>
 78a:	92 30       	cpi	r25, 0x02	; 2
 78c:	99 f0       	breq	.+38     	; 0x7b4 <Timer_Init+0x80>
 78e:	08 95       	ret
 790:	83 b7       	in	r24, 0x33	; 51
 792:	88 60       	ori	r24, 0x08	; 8
 794:	83 bf       	out	0x33, r24	; 51
 796:	93 b7       	in	r25, 0x33	; 51
 798:	81 81       	ldd	r24, Z+1	; 0x01
 79a:	89 2b       	or	r24, r25
 79c:	83 bf       	out	0x33, r24	; 51
 79e:	0d c0       	rjmp	.+26     	; 0x7ba <Timer_Init+0x86>
 7a0:	8f b5       	in	r24, 0x2f	; 47
 7a2:	8f bd       	out	0x2f, r24	; 47
 7a4:	8e b5       	in	r24, 0x2e	; 46
 7a6:	88 60       	ori	r24, 0x08	; 8
 7a8:	8e bd       	out	0x2e, r24	; 46
 7aa:	9e b5       	in	r25, 0x2e	; 46
 7ac:	81 81       	ldd	r24, Z+1	; 0x01
 7ae:	89 2b       	or	r24, r25
 7b0:	8e bd       	out	0x2e, r24	; 46
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <Timer_Init+0x86>
 7b4:	85 b5       	in	r24, 0x25	; 37
 7b6:	58 2b       	or	r21, r24
 7b8:	55 bd       	out	0x25, r21	; 37
 7ba:	83 81       	ldd	r24, Z+3	; 0x03
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	79 f4       	brne	.+30     	; 0x7de <Timer_Init+0xaa>
 7c0:	8f b7       	in	r24, 0x3f	; 63
 7c2:	80 68       	ori	r24, 0x80	; 128
 7c4:	8f bf       	out	0x3f, r24	; 63
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <Timer_Start>:
 7e2:	88 23       	and	r24, r24
 7e4:	21 f0       	breq	.+8      	; 0x7ee <Timer_Start+0xc>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	09 f4       	brne	.+2      	; 0x7ec <Timer_Start+0xa>
 7ea:	77 c0       	rjmp	.+238    	; 0x8da <__stack+0x7b>
 7ec:	7c c0       	rjmp	.+248    	; 0x8e6 <__stack+0x87>
 7ee:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sgau8_TIMERMode>
 7f2:	91 30       	cpi	r25, 0x01	; 1
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <Timer_Start+0x16>
 7f6:	58 c0       	rjmp	.+176    	; 0x8a8 <__stack+0x49>
 7f8:	91 11       	cpse	r25, r1
 7fa:	2a c0       	rjmp	.+84     	; 0x850 <Timer_Start+0x6e>
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	82 60       	ori	r24, 0x02	; 2
 800:	83 bf       	out	0x33, r24	; 51
 802:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 806:	81 11       	cpse	r24, r1
 808:	13 c0       	rjmp	.+38     	; 0x830 <Timer_Start+0x4e>
 80a:	61 15       	cp	r22, r1
 80c:	71 05       	cpc	r23, r1
 80e:	09 f4       	brne	.+2      	; 0x812 <Timer_Start+0x30>
 810:	73 c0       	rjmp	.+230    	; 0x8f8 <__stack+0x99>
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	42 e0       	ldi	r20, 0x02	; 2
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	48 bf       	out	0x38, r20	; 56
 81c:	9c bf       	out	0x3c, r25	; 60
 81e:	08 b6       	in	r0, 0x38	; 56
 820:	01 fe       	sbrs	r0, 1
 822:	fd cf       	rjmp	.-6      	; 0x81e <Timer_Start+0x3c>
 824:	2f 5f       	subi	r18, 0xFF	; 255
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	62 17       	cp	r22, r18
 82a:	73 07       	cpc	r23, r19
 82c:	b1 f7       	brne	.-20     	; 0x81a <Timer_Start+0x38>
 82e:	08 95       	ret
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	09 f0       	breq	.+2      	; 0x836 <Timer_Start+0x54>
 834:	5a c0       	rjmp	.+180    	; 0x8ea <__stack+0x8b>
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	88 bf       	out	0x38, r24	; 56
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	8c bf       	out	0x3c, r24	; 60
 83e:	89 b7       	in	r24, 0x39	; 57
 840:	82 60       	ori	r24, 0x02	; 2
 842:	89 bf       	out	0x39, r24	; 57
 844:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 848:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 84c:	89 2f       	mov	r24, r25
 84e:	08 95       	ret
 850:	92 30       	cpi	r25, 0x02	; 2
 852:	09 f0       	breq	.+2      	; 0x856 <Timer_Start+0x74>
 854:	4c c0       	rjmp	.+152    	; 0x8ee <__stack+0x8f>
 856:	83 b7       	in	r24, 0x33	; 51
 858:	83 60       	ori	r24, 0x03	; 3
 85a:	83 bf       	out	0x33, r24	; 51
 85c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 860:	81 11       	cpse	r24, r1
 862:	13 c0       	rjmp	.+38     	; 0x88a <__stack+0x2b>
 864:	61 15       	cp	r22, r1
 866:	71 05       	cpc	r23, r1
 868:	09 f4       	brne	.+2      	; 0x86c <__stack+0xd>
 86a:	46 c0       	rjmp	.+140    	; 0x8f8 <__stack+0x99>
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	42 e0       	ldi	r20, 0x02	; 2
 872:	9d e7       	ldi	r25, 0x7D	; 125
 874:	48 bf       	out	0x38, r20	; 56
 876:	9c bf       	out	0x3c, r25	; 60
 878:	08 b6       	in	r0, 0x38	; 56
 87a:	01 fe       	sbrs	r0, 1
 87c:	fd cf       	rjmp	.-6      	; 0x878 <__stack+0x19>
 87e:	2f 5f       	subi	r18, 0xFF	; 255
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	62 17       	cp	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	b1 f7       	brne	.-20     	; 0x874 <__stack+0x15>
 888:	08 95       	ret
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	91 f5       	brne	.+100    	; 0x8f2 <__stack+0x93>
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	88 bf       	out	0x38, r24	; 56
 892:	8d e7       	ldi	r24, 0x7D	; 125
 894:	8c bf       	out	0x3c, r24	; 60
 896:	89 b7       	in	r24, 0x39	; 57
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	89 bf       	out	0x39, r24	; 57
 89c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 8a0:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	08 95       	ret
 8a8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 8ac:	81 11       	cpse	r24, r1
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <__stack+0x5f>
 8b0:	92 e0       	ldi	r25, 0x02	; 2
 8b2:	98 bf       	out	0x38, r25	; 56
 8b4:	6c bf       	out	0x3c, r22	; 60
 8b6:	08 b6       	in	r0, 0x38	; 56
 8b8:	01 fe       	sbrs	r0, 1
 8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <__stack+0x57>
 8bc:	08 95       	ret
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	d1 f4       	brne	.+52     	; 0x8f6 <__stack+0x97>
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	88 bf       	out	0x38, r24	; 56
 8c6:	6c bf       	out	0x3c, r22	; 60
 8c8:	89 b7       	in	r24, 0x39	; 57
 8ca:	82 60       	ori	r24, 0x02	; 2
 8cc:	89 bf       	out	0x39, r24	; 57
 8ce:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 8d2:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	08 95       	ret
 8da:	7b bd       	out	0x2b, r23	; 43
 8dc:	6a bd       	out	0x2a, r22	; 42
 8de:	79 bd       	out	0x29, r23	; 41
 8e0:	68 bd       	out	0x28, r22	; 40
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	08 95       	ret
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret
 8ea:	89 2f       	mov	r24, r25
 8ec:	08 95       	ret
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	08 95       	ret
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	08 95       	ret
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__vector_10>:

Timer_ISR(TIMER0_COMP_VECTOR)
{
 8fa:	1f 92       	push	r1
 8fc:	0f 92       	push	r0
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	0f 92       	push	r0
 902:	11 24       	eor	r1, r1
 904:	2f 93       	push	r18
 906:	3f 93       	push	r19
 908:	4f 93       	push	r20
 90a:	5f 93       	push	r21
 90c:	6f 93       	push	r22
 90e:	7f 93       	push	r23
 910:	8f 93       	push	r24
 912:	9f 93       	push	r25
 914:	af 93       	push	r26
 916:	bf 93       	push	r27
 918:	ef 93       	push	r30
 91a:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
 91c:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 920:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 924:	09 95       	icall
}
 926:	ff 91       	pop	r31
 928:	ef 91       	pop	r30
 92a:	bf 91       	pop	r27
 92c:	af 91       	pop	r26
 92e:	9f 91       	pop	r25
 930:	8f 91       	pop	r24
 932:	7f 91       	pop	r23
 934:	6f 91       	pop	r22
 936:	5f 91       	pop	r21
 938:	4f 91       	pop	r20
 93a:	3f 91       	pop	r19
 93c:	2f 91       	pop	r18
 93e:	0f 90       	pop	r0
 940:	0f be       	out	0x3f, r0	; 63
 942:	0f 90       	pop	r0
 944:	1f 90       	pop	r1
 946:	18 95       	reti

00000948 <__vector_7>:

Timer_ISR(TIMER1_COMPA_VECTOR)
{
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	2f 93       	push	r18
 954:	3f 93       	push	r19
 956:	4f 93       	push	r20
 958:	5f 93       	push	r21
 95a:	6f 93       	push	r22
 95c:	7f 93       	push	r23
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
 962:	af 93       	push	r26
 964:	bf 93       	push	r27
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31

	sgpfun_TIMER1_CMPA_ISR_Function();
 96a:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <sgpfun_TIMER1_CMPA_ISR_Function>
 96e:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
 972:	09 95       	icall
}
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0f be       	out	0x3f, r0	; 63
 990:	0f 90       	pop	r0
 992:	1f 90       	pop	r1
 994:	18 95       	reti

00000996 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
 996:	1f 92       	push	r1
 998:	0f 92       	push	r0
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	0f 92       	push	r0
 99e:	11 24       	eor	r1, r1
 9a0:	2f 93       	push	r18
 9a2:	3f 93       	push	r19
 9a4:	4f 93       	push	r20
 9a6:	5f 93       	push	r21
 9a8:	6f 93       	push	r22
 9aa:	7f 93       	push	r23
 9ac:	8f 93       	push	r24
 9ae:	9f 93       	push	r25
 9b0:	af 93       	push	r26
 9b2:	bf 93       	push	r27
 9b4:	ef 93       	push	r30
 9b6:	ff 93       	push	r31
	sgpfun_TIMER1_CMPB_ISR_Function();
 9b8:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <sgpfun_TIMER1_CMPB_ISR_Function>
 9bc:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <sgpfun_TIMER1_CMPB_ISR_Function+0x1>
 9c0:	09 95       	icall
}
 9c2:	ff 91       	pop	r31
 9c4:	ef 91       	pop	r30
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	7f 91       	pop	r23
 9d0:	6f 91       	pop	r22
 9d2:	5f 91       	pop	r21
 9d4:	4f 91       	pop	r20
 9d6:	3f 91       	pop	r19
 9d8:	2f 91       	pop	r18
 9da:	0f 90       	pop	r0
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	0f 90       	pop	r0
 9e0:	1f 90       	pop	r1
 9e2:	18 95       	reti

000009e4 <__vector_4>:

Timer_ISR(TIMER2_COMP_VECTOR)
{
 9e4:	1f 92       	push	r1
 9e6:	0f 92       	push	r0
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	0f 92       	push	r0
 9ec:	11 24       	eor	r1, r1
 9ee:	2f 93       	push	r18
 9f0:	3f 93       	push	r19
 9f2:	4f 93       	push	r20
 9f4:	5f 93       	push	r21
 9f6:	6f 93       	push	r22
 9f8:	7f 93       	push	r23
 9fa:	8f 93       	push	r24
 9fc:	9f 93       	push	r25
 9fe:	af 93       	push	r26
 a00:	bf 93       	push	r27
 a02:	ef 93       	push	r30
 a04:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
 a06:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <sgpfun_TIMER2_CMP_ISR_Function>
 a0a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 a0e:	09 95       	icall
 a10:	ff 91       	pop	r31
 a12:	ef 91       	pop	r30
 a14:	bf 91       	pop	r27
 a16:	af 91       	pop	r26
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	7f 91       	pop	r23
 a1e:	6f 91       	pop	r22
 a20:	5f 91       	pop	r21
 a22:	4f 91       	pop	r20
 a24:	3f 91       	pop	r19
 a26:	2f 91       	pop	r18
 a28:	0f 90       	pop	r0
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	0f 90       	pop	r0
 a2e:	1f 90       	pop	r1
 a30:	18 95       	reti

00000a32 <__fixunssfsi>:
 a32:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_splitA>
 a36:	88 f0       	brcs	.+34     	; 0xa5a <__fixunssfsi+0x28>
 a38:	9f 57       	subi	r25, 0x7F	; 127
 a3a:	98 f0       	brcs	.+38     	; 0xa62 <__fixunssfsi+0x30>
 a3c:	b9 2f       	mov	r27, r25
 a3e:	99 27       	eor	r25, r25
 a40:	b7 51       	subi	r27, 0x17	; 23
 a42:	b0 f0       	brcs	.+44     	; 0xa70 <__fixunssfsi+0x3e>
 a44:	e1 f0       	breq	.+56     	; 0xa7e <__fixunssfsi+0x4c>
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a f0       	brmi	.+6      	; 0xa56 <__fixunssfsi+0x24>
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__fixunssfsi+0x14>
 a54:	14 c0       	rjmp	.+40     	; 0xa7e <__fixunssfsi+0x4c>
 a56:	b1 30       	cpi	r27, 0x01	; 1
 a58:	91 f0       	breq	.+36     	; 0xa7e <__fixunssfsi+0x4c>
 a5a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fp_zero>
 a5e:	b1 e0       	ldi	r27, 0x01	; 1
 a60:	08 95       	ret
 a62:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_zero>
 a66:	67 2f       	mov	r22, r23
 a68:	78 2f       	mov	r23, r24
 a6a:	88 27       	eor	r24, r24
 a6c:	b8 5f       	subi	r27, 0xF8	; 248
 a6e:	39 f0       	breq	.+14     	; 0xa7e <__fixunssfsi+0x4c>
 a70:	b9 3f       	cpi	r27, 0xF9	; 249
 a72:	cc f3       	brlt	.-14     	; 0xa66 <__fixunssfsi+0x34>
 a74:	86 95       	lsr	r24
 a76:	77 95       	ror	r23
 a78:	67 95       	ror	r22
 a7a:	b3 95       	inc	r27
 a7c:	d9 f7       	brne	.-10     	; 0xa74 <__fixunssfsi+0x42>
 a7e:	3e f4       	brtc	.+14     	; 0xa8e <__fixunssfsi+0x5c>
 a80:	90 95       	com	r25
 a82:	80 95       	com	r24
 a84:	70 95       	com	r23
 a86:	61 95       	neg	r22
 a88:	7f 4f       	sbci	r23, 0xFF	; 255
 a8a:	8f 4f       	sbci	r24, 0xFF	; 255
 a8c:	9f 4f       	sbci	r25, 0xFF	; 255
 a8e:	08 95       	ret

00000a90 <__floatunsisf>:
 a90:	e8 94       	clt
 a92:	09 c0       	rjmp	.+18     	; 0xaa6 <__floatsisf+0x12>

00000a94 <__floatsisf>:
 a94:	97 fb       	bst	r25, 7
 a96:	3e f4       	brtc	.+14     	; 0xaa6 <__floatsisf+0x12>
 a98:	90 95       	com	r25
 a9a:	80 95       	com	r24
 a9c:	70 95       	com	r23
 a9e:	61 95       	neg	r22
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	99 23       	and	r25, r25
 aa8:	a9 f0       	breq	.+42     	; 0xad4 <__floatsisf+0x40>
 aaa:	f9 2f       	mov	r31, r25
 aac:	96 e9       	ldi	r25, 0x96	; 150
 aae:	bb 27       	eor	r27, r27
 ab0:	93 95       	inc	r25
 ab2:	f6 95       	lsr	r31
 ab4:	87 95       	ror	r24
 ab6:	77 95       	ror	r23
 ab8:	67 95       	ror	r22
 aba:	b7 95       	ror	r27
 abc:	f1 11       	cpse	r31, r1
 abe:	f8 cf       	rjmp	.-16     	; 0xab0 <__floatsisf+0x1c>
 ac0:	fa f4       	brpl	.+62     	; 0xb00 <__floatsisf+0x6c>
 ac2:	bb 0f       	add	r27, r27
 ac4:	11 f4       	brne	.+4      	; 0xaca <__floatsisf+0x36>
 ac6:	60 ff       	sbrs	r22, 0
 ac8:	1b c0       	rjmp	.+54     	; 0xb00 <__floatsisf+0x6c>
 aca:	6f 5f       	subi	r22, 0xFF	; 255
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	16 c0       	rjmp	.+44     	; 0xb00 <__floatsisf+0x6c>
 ad4:	88 23       	and	r24, r24
 ad6:	11 f0       	breq	.+4      	; 0xadc <__floatsisf+0x48>
 ad8:	96 e9       	ldi	r25, 0x96	; 150
 ada:	11 c0       	rjmp	.+34     	; 0xafe <__floatsisf+0x6a>
 adc:	77 23       	and	r23, r23
 ade:	21 f0       	breq	.+8      	; 0xae8 <__floatsisf+0x54>
 ae0:	9e e8       	ldi	r25, 0x8E	; 142
 ae2:	87 2f       	mov	r24, r23
 ae4:	76 2f       	mov	r23, r22
 ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <__floatsisf+0x5e>
 ae8:	66 23       	and	r22, r22
 aea:	71 f0       	breq	.+28     	; 0xb08 <__floatsisf+0x74>
 aec:	96 e8       	ldi	r25, 0x86	; 134
 aee:	86 2f       	mov	r24, r22
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	2a f0       	brmi	.+10     	; 0xb00 <__floatsisf+0x6c>
 af6:	9a 95       	dec	r25
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	da f7       	brpl	.-10     	; 0xaf6 <__floatsisf+0x62>
 b00:	88 0f       	add	r24, r24
 b02:	96 95       	lsr	r25
 b04:	87 95       	ror	r24
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <__fp_split3>:
 b0a:	57 fd       	sbrc	r21, 7
 b0c:	90 58       	subi	r25, 0x80	; 128
 b0e:	44 0f       	add	r20, r20
 b10:	55 1f       	adc	r21, r21
 b12:	59 f0       	breq	.+22     	; 0xb2a <__fp_splitA+0x10>
 b14:	5f 3f       	cpi	r21, 0xFF	; 255
 b16:	71 f0       	breq	.+28     	; 0xb34 <__fp_splitA+0x1a>
 b18:	47 95       	ror	r20

00000b1a <__fp_splitA>:
 b1a:	88 0f       	add	r24, r24
 b1c:	97 fb       	bst	r25, 7
 b1e:	99 1f       	adc	r25, r25
 b20:	61 f0       	breq	.+24     	; 0xb3a <__fp_splitA+0x20>
 b22:	9f 3f       	cpi	r25, 0xFF	; 255
 b24:	79 f0       	breq	.+30     	; 0xb44 <__fp_splitA+0x2a>
 b26:	87 95       	ror	r24
 b28:	08 95       	ret
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	14 06       	cpc	r1, r20
 b30:	55 1f       	adc	r21, r21
 b32:	f2 cf       	rjmp	.-28     	; 0xb18 <__fp_split3+0xe>
 b34:	46 95       	lsr	r20
 b36:	f1 df       	rcall	.-30     	; 0xb1a <__fp_splitA>
 b38:	08 c0       	rjmp	.+16     	; 0xb4a <__fp_splitA+0x30>
 b3a:	16 16       	cp	r1, r22
 b3c:	17 06       	cpc	r1, r23
 b3e:	18 06       	cpc	r1, r24
 b40:	99 1f       	adc	r25, r25
 b42:	f1 cf       	rjmp	.-30     	; 0xb26 <__fp_splitA+0xc>
 b44:	86 95       	lsr	r24
 b46:	71 05       	cpc	r23, r1
 b48:	61 05       	cpc	r22, r1
 b4a:	08 94       	sec
 b4c:	08 95       	ret

00000b4e <__fp_zero>:
 b4e:	e8 94       	clt

00000b50 <__fp_szero>:
 b50:	bb 27       	eor	r27, r27
 b52:	66 27       	eor	r22, r22
 b54:	77 27       	eor	r23, r23
 b56:	cb 01       	movw	r24, r22
 b58:	97 f9       	bld	r25, 7
 b5a:	08 95       	ret

00000b5c <__mulsf3>:
 b5c:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3x>
 b60:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_round>
 b64:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscA>
 b68:	38 f0       	brcs	.+14     	; 0xb78 <__mulsf3+0x1c>
 b6a:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscB>
 b6e:	20 f0       	brcs	.+8      	; 0xb78 <__mulsf3+0x1c>
 b70:	95 23       	and	r25, r21
 b72:	11 f0       	breq	.+4      	; 0xb78 <__mulsf3+0x1c>
 b74:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 b78:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_nan>
 b7c:	11 24       	eor	r1, r1
 b7e:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_szero>

00000b82 <__mulsf3x>:
 b82:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_split3>
 b86:	70 f3       	brcs	.-36     	; 0xb64 <__mulsf3+0x8>

00000b88 <__mulsf3_pse>:
 b88:	95 9f       	mul	r25, r21
 b8a:	c1 f3       	breq	.-16     	; 0xb7c <__mulsf3+0x20>
 b8c:	95 0f       	add	r25, r21
 b8e:	50 e0       	ldi	r21, 0x00	; 0
 b90:	55 1f       	adc	r21, r21
 b92:	62 9f       	mul	r22, r18
 b94:	f0 01       	movw	r30, r0
 b96:	72 9f       	mul	r23, r18
 b98:	bb 27       	eor	r27, r27
 b9a:	f0 0d       	add	r31, r0
 b9c:	b1 1d       	adc	r27, r1
 b9e:	63 9f       	mul	r22, r19
 ba0:	aa 27       	eor	r26, r26
 ba2:	f0 0d       	add	r31, r0
 ba4:	b1 1d       	adc	r27, r1
 ba6:	aa 1f       	adc	r26, r26
 ba8:	64 9f       	mul	r22, r20
 baa:	66 27       	eor	r22, r22
 bac:	b0 0d       	add	r27, r0
 bae:	a1 1d       	adc	r26, r1
 bb0:	66 1f       	adc	r22, r22
 bb2:	82 9f       	mul	r24, r18
 bb4:	22 27       	eor	r18, r18
 bb6:	b0 0d       	add	r27, r0
 bb8:	a1 1d       	adc	r26, r1
 bba:	62 1f       	adc	r22, r18
 bbc:	73 9f       	mul	r23, r19
 bbe:	b0 0d       	add	r27, r0
 bc0:	a1 1d       	adc	r26, r1
 bc2:	62 1f       	adc	r22, r18
 bc4:	83 9f       	mul	r24, r19
 bc6:	a0 0d       	add	r26, r0
 bc8:	61 1d       	adc	r22, r1
 bca:	22 1f       	adc	r18, r18
 bcc:	74 9f       	mul	r23, r20
 bce:	33 27       	eor	r19, r19
 bd0:	a0 0d       	add	r26, r0
 bd2:	61 1d       	adc	r22, r1
 bd4:	23 1f       	adc	r18, r19
 bd6:	84 9f       	mul	r24, r20
 bd8:	60 0d       	add	r22, r0
 bda:	21 1d       	adc	r18, r1
 bdc:	82 2f       	mov	r24, r18
 bde:	76 2f       	mov	r23, r22
 be0:	6a 2f       	mov	r22, r26
 be2:	11 24       	eor	r1, r1
 be4:	9f 57       	subi	r25, 0x7F	; 127
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	9a f0       	brmi	.+38     	; 0xc10 <__mulsf3_pse+0x88>
 bea:	f1 f0       	breq	.+60     	; 0xc28 <__mulsf3_pse+0xa0>
 bec:	88 23       	and	r24, r24
 bee:	4a f0       	brmi	.+18     	; 0xc02 <__mulsf3_pse+0x7a>
 bf0:	ee 0f       	add	r30, r30
 bf2:	ff 1f       	adc	r31, r31
 bf4:	bb 1f       	adc	r27, r27
 bf6:	66 1f       	adc	r22, r22
 bf8:	77 1f       	adc	r23, r23
 bfa:	88 1f       	adc	r24, r24
 bfc:	91 50       	subi	r25, 0x01	; 1
 bfe:	50 40       	sbci	r21, 0x00	; 0
 c00:	a9 f7       	brne	.-22     	; 0xbec <__mulsf3_pse+0x64>
 c02:	9e 3f       	cpi	r25, 0xFE	; 254
 c04:	51 05       	cpc	r21, r1
 c06:	80 f0       	brcs	.+32     	; 0xc28 <__mulsf3_pse+0xa0>
 c08:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 c0c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_szero>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	e4 f3       	brlt	.-8      	; 0xc0c <__mulsf3_pse+0x84>
 c14:	98 3e       	cpi	r25, 0xE8	; 232
 c16:	d4 f3       	brlt	.-12     	; 0xc0c <__mulsf3_pse+0x84>
 c18:	86 95       	lsr	r24
 c1a:	77 95       	ror	r23
 c1c:	67 95       	ror	r22
 c1e:	b7 95       	ror	r27
 c20:	f7 95       	ror	r31
 c22:	e7 95       	ror	r30
 c24:	9f 5f       	subi	r25, 0xFF	; 255
 c26:	c1 f7       	brne	.-16     	; 0xc18 <__mulsf3_pse+0x90>
 c28:	fe 2b       	or	r31, r30
 c2a:	88 0f       	add	r24, r24
 c2c:	91 1d       	adc	r25, r1
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__fp_inf>:
 c36:	97 f9       	bld	r25, 7
 c38:	9f 67       	ori	r25, 0x7F	; 127
 c3a:	80 e8       	ldi	r24, 0x80	; 128
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	08 95       	ret

00000c42 <__fp_nan>:
 c42:	9f ef       	ldi	r25, 0xFF	; 255
 c44:	80 ec       	ldi	r24, 0xC0	; 192
 c46:	08 95       	ret

00000c48 <__fp_pscA>:
 c48:	00 24       	eor	r0, r0
 c4a:	0a 94       	dec	r0
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	09 06       	cpc	r0, r25
 c54:	08 95       	ret

00000c56 <__fp_pscB>:
 c56:	00 24       	eor	r0, r0
 c58:	0a 94       	dec	r0
 c5a:	12 16       	cp	r1, r18
 c5c:	13 06       	cpc	r1, r19
 c5e:	14 06       	cpc	r1, r20
 c60:	05 06       	cpc	r0, r21
 c62:	08 95       	ret

00000c64 <__fp_round>:
 c64:	09 2e       	mov	r0, r25
 c66:	03 94       	inc	r0
 c68:	00 0c       	add	r0, r0
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__fp_round+0xc>
 c6c:	88 23       	and	r24, r24
 c6e:	52 f0       	brmi	.+20     	; 0xc84 <__fp_round+0x20>
 c70:	bb 0f       	add	r27, r27
 c72:	40 f4       	brcc	.+16     	; 0xc84 <__fp_round+0x20>
 c74:	bf 2b       	or	r27, r31
 c76:	11 f4       	brne	.+4      	; 0xc7c <__fp_round+0x18>
 c78:	60 ff       	sbrs	r22, 0
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fp_round+0x20>
 c7c:	6f 5f       	subi	r22, 0xFF	; 255
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	08 95       	ret

00000c86 <itoa>:
 c86:	45 32       	cpi	r20, 0x25	; 37
 c88:	51 05       	cpc	r21, r1
 c8a:	20 f4       	brcc	.+8      	; 0xc94 <itoa+0xe>
 c8c:	42 30       	cpi	r20, 0x02	; 2
 c8e:	10 f0       	brcs	.+4      	; 0xc94 <itoa+0xe>
 c90:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__itoa_ncheck>
 c94:	fb 01       	movw	r30, r22
 c96:	10 82       	st	Z, r1
 c98:	cb 01       	movw	r24, r22
 c9a:	08 95       	ret

00000c9c <__itoa_ncheck>:
 c9c:	bb 27       	eor	r27, r27
 c9e:	4a 30       	cpi	r20, 0x0A	; 10
 ca0:	31 f4       	brne	.+12     	; 0xcae <__itoa_ncheck+0x12>
 ca2:	99 23       	and	r25, r25
 ca4:	22 f4       	brpl	.+8      	; 0xcae <__itoa_ncheck+0x12>
 ca6:	bd e2       	ldi	r27, 0x2D	; 45
 ca8:	90 95       	com	r25
 caa:	81 95       	neg	r24
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__utoa_common>

00000cb2 <__utoa_ncheck>:
 cb2:	bb 27       	eor	r27, r27

00000cb4 <__utoa_common>:
 cb4:	fb 01       	movw	r30, r22
 cb6:	55 27       	eor	r21, r21
 cb8:	aa 27       	eor	r26, r26
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	aa 1f       	adc	r26, r26
 cc0:	a4 17       	cp	r26, r20
 cc2:	10 f0       	brcs	.+4      	; 0xcc8 <__utoa_common+0x14>
 cc4:	a4 1b       	sub	r26, r20
 cc6:	83 95       	inc	r24
 cc8:	50 51       	subi	r21, 0x10	; 16
 cca:	b9 f7       	brne	.-18     	; 0xcba <__utoa_common+0x6>
 ccc:	a0 5d       	subi	r26, 0xD0	; 208
 cce:	aa 33       	cpi	r26, 0x3A	; 58
 cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__utoa_common+0x20>
 cd2:	a9 5d       	subi	r26, 0xD9	; 217
 cd4:	a1 93       	st	Z+, r26
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	79 f7       	brne	.-34     	; 0xcb8 <__utoa_common+0x4>
 cda:	b1 11       	cpse	r27, r1
 cdc:	b1 93       	st	Z+, r27
 cde:	11 92       	st	Z+, r1
 ce0:	cb 01       	movw	r24, r22
 ce2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <strrev>

00000ce6 <strrev>:
 ce6:	dc 01       	movw	r26, r24
 ce8:	fc 01       	movw	r30, r24
 cea:	67 2f       	mov	r22, r23
 cec:	71 91       	ld	r23, Z+
 cee:	77 23       	and	r23, r23
 cf0:	e1 f7       	brne	.-8      	; 0xcea <strrev+0x4>
 cf2:	32 97       	sbiw	r30, 0x02	; 2
 cf4:	04 c0       	rjmp	.+8      	; 0xcfe <strrev+0x18>
 cf6:	7c 91       	ld	r23, X
 cf8:	6d 93       	st	X+, r22
 cfa:	70 83       	st	Z, r23
 cfc:	62 91       	ld	r22, -Z
 cfe:	ae 17       	cp	r26, r30
 d00:	bf 07       	cpc	r27, r31
 d02:	c8 f3       	brcs	.-14     	; 0xcf6 <strrev+0x10>
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
