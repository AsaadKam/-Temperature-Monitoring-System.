
Temprature_Sensor_with_auto_trigerring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080007e  0080007e  00000dba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a50  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c47  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001545  00000000  00000000  000036a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae4  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ce9  00000000  00000000  00005b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000784d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_7>
  20:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	
}


 int main()
 {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
		uint32_t  u32_TEMP_VALUE=0;
  9c:	1a 82       	std	Y+2, r1	; 0x02
  9e:	19 82       	std	Y+1, r1	; 0x01
		uint32_t  u32_TEMP_VALUE_Buffer=0;
		
		TEMP_SENSOR_INIT();
  a0:	0e 94 3b 01 	call	0x276	; 0x276 <TEMP_SENSOR_INIT>
		
		LCD_init();
  a4:	0e 94 98 00 	call	0x130	; 0x130 <LCD_init>
		LCD_displayString("TEMP=");
  a8:	87 e7       	ldi	r24, 0x77	; 119
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_displayString>

		while(1)
		{
		    TEMP_SENSOR_READ(&u32_TEMP_VALUE);
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 4e 01 	call	0x29c	; 0x29c <TEMP_SENSOR_READ>
            LCD_integerToString(u32_TEMP_VALUE,1,5);
  b8:	45 e0       	ldi	r20, 0x05	; 5
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_integerToString>
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x1e>

000000c6 <LCD_sendCommand>:
 * Clear Screen.
 */

void LCD_clearScreen()
{
	LCD_sendCommand(0x01);
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	d9 98       	cbi	0x1b, 1	; 27
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	db 9a       	sbi	0x1b, 3	; 27
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	9c 2f       	mov	r25, r28
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	db 98       	cbi	0x1b, 3	; 27
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
  fa:	db 9a       	sbi	0x1b, 3	; 27
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	28 2f       	mov	r18, r24
 10e:	2f 70       	andi	r18, 0x0F	; 15
 110:	30 e1       	ldi	r19, 0x10	; 16
 112:	c3 9f       	mul	r28, r19
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	82 2b       	or	r24, r18
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	db 98       	cbi	0x1b, 3	; 27
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_init>:
 130:	8f e6       	ldi	r24, 0x6F	; 111
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 93 03 	call	0x726	; 0x726 <Timer_Init>
 138:	8a b3       	in	r24, 0x1a	; 26
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	8a bb       	out	0x1a, r24	; 26
 13e:	d1 9a       	sbi	0x1a, 1	; 26
 140:	d2 9a       	sbi	0x1a, 2	; 26
 142:	d3 9a       	sbi	0x1a, 3	; 26
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_sendCommand>
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_sendCommand>
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_sendCommand>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_sendCommand>
 15c:	08 95       	ret

0000015e <LCD_displayCharacter>:
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	d9 9a       	sbi	0x1b, 1	; 27
 164:	da 98       	cbi	0x1b, 2	; 27
 166:	db 9a       	sbi	0x1b, 3	; 27
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	9c 2f       	mov	r25, r28
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	8b bb       	out	0x1b, r24	; 27
 182:	db 98       	cbi	0x1b, 3	; 27
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 192:	db 9a       	sbi	0x1b, 3	; 27
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	28 2f       	mov	r18, r24
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	c3 9f       	mul	r28, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	82 2b       	or	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	db 98       	cbi	0x1b, 3	; 27
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_displayString>:
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	59 f0       	breq	.+22     	; 0x1ec <LCD_displayString+0x24>
 1d6:	8f 01       	movw	r16, r30
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_displayCharacter>
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	f8 01       	movw	r30, r16
 1e2:	ec 0f       	add	r30, r28
 1e4:	f1 1d       	adc	r31, r1
 1e6:	80 81       	ld	r24, Z
 1e8:	81 11       	cpse	r24, r1
 1ea:	f7 cf       	rjmp	.-18     	; 0x1da <LCD_displayString+0x12>
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <LCD_goToRowColumn>:
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	19 f0       	breq	.+6      	; 0x1fe <LCD_goToRowColumn+0xa>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	21 f0       	breq	.+8      	; 0x204 <LCD_goToRowColumn+0x10>
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <LCD_goToRowColumn+0x14>
 1fe:	90 e8       	ldi	r25, 0x80	; 128
 200:	96 0f       	add	r25, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <LCD_goToRowColumn+0x14>
 204:	90 ec       	ldi	r25, 0xC0	; 192
 206:	96 0f       	add	r25, r22
 208:	89 2f       	mov	r24, r25
 20a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_sendCommand>
 20e:	08 95       	ret

00000210 <LCD_stringRowCol>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	86 2f       	mov	r24, r22
 218:	64 2f       	mov	r22, r20
 21a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_goToRowColumn>
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_displayString>
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <LCD_integerToString>:
}
/*
 * integerToString.
 */
void LCD_integerToString(uint32_t value, uint8_t row, uint8_t col)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	a8 97       	sbiw	r28, 0x28	; 40
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	16 2f       	mov	r17, r22
 244:	04 2f       	mov	r16, r20
	uint32_t buffer[20];
	itoa(value, buffer , 10);
 246:	4a e0       	ldi	r20, 0x0A	; 10
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	be 01       	movw	r22, r28
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	0e 94 42 06 	call	0xc84	; 0xc84 <itoa>
	LCD_stringRowCol(buffer, row,col);
 254:	40 2f       	mov	r20, r16
 256:	61 2f       	mov	r22, r17
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0e 94 08 01 	call	0x210	; 0x210 <LCD_stringRowCol>

}
 260:	a8 96       	adiw	r28, 0x28	; 40
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <TEMP_SENSOR_INIT>:
	
}
void TEMP_SENSOR_INIT(void)
{
	uint8_t u8_ADC_value_buffer=0;
	ADC_INIT(&gstr_Temp_sensorConfig);
 276:	81 e6       	ldi	r24, 0x61	; 97
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ADC_INIT>
	ADC_Interrupt_Enable();
 27e:	33 98       	cbi	0x06, 3	; 6
 280:	33 9a       	sbi	0x06, 3	; 6
	ADC_Start_Conversion();
 282:	36 9a       	sbi	0x06, 6	; 6
	Timer_Init(&TEMP_TIMER_Init_Config);
 284:	83 e7       	ldi	r24, 0x73	; 115
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 93 03 	call	0x726	; 0x726 <Timer_Init>
	Timer_Start(TIMER1,7812U,NullPointer);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	64 e8       	ldi	r22, 0x84	; 132
 292:	7e e1       	ldi	r23, 0x1E	; 30
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer_Start>
 29a:	08 95       	ret

0000029c <TEMP_SENSOR_READ>:
}

void TEMP_SENSOR_READ(uint32_t*Copy_pu32_Temp_Buffer)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
	ADC_READ(Copy_pu32_Temp_Buffer,NullPointer,NullPointer);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ADC_READ>
    *Copy_pu32_Temp_Buffer=*Copy_pu32_Temp_Buffer*0.488;
 2ae:	68 81       	ld	r22, Y
 2b0:	79 81       	ldd	r23, Y+1	; 0x01
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 47 05 	call	0xa8e	; 0xa8e <__floatunsisf>
 2ba:	23 e2       	ldi	r18, 0x23	; 35
 2bc:	3b ed       	ldi	r19, 0xDB	; 219
 2be:	49 ef       	ldi	r20, 0xF9	; 249
 2c0:	5e e3       	ldi	r21, 0x3E	; 62
 2c2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3>
 2c6:	0e 94 18 05 	call	0xa30	; 0xa30 <__fixunssfsi>
 2ca:	79 83       	std	Y+1, r23	; 0x01
 2cc:	68 83       	st	Y, r22
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <ADC_INIT>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS PROTOTYPES ----------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/
ADC_Error_t ADC_INIT(gstrADC_Config_t*CopyPntrStr_ADC_Init_Config)
 { 
 2d4:	fc 01       	movw	r30, r24
      if(NullPointer!=CopyPntrStr_ADC_Init_Config)
 2d6:	89 2b       	or	r24, r25
 2d8:	09 f4       	brne	.+2      	; 0x2dc <ADC_INIT+0x8>
 2da:	83 c0       	rjmp	.+262    	; 0x3e2 <ADC_INIT+0x10e>
	  {
		    /***Enable ADC unit***/
			ADC_Unit_Enable();
 2dc:	37 98       	cbi	0x06, 7	; 6
 2de:	37 9a       	sbi	0x06, 7	; 6

			/**** Configure the input channel for ADC****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)<ADC_Channel_0                ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)>ADC_Channel_7         ) ) 
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	88 30       	cpi	r24, 0x08	; 8
 2e6:	91 05       	cpc	r25, r1
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <ADC_INIT+0x1e>
			{
			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_CHANNEL_CHOOSE ;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <ADC_INIT+0x2e>
			}
			else
			{

				ADC_Channel_Set(CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose);	 
 2f2:	96 b1       	in	r25, 0x06	; 6
 2f4:	80 95       	com	r24
 2f6:	89 23       	and	r24, r25
 2f8:	86 b9       	out	0x06, r24	; 6
 2fa:	97 b1       	in	r25, 0x07	; 7
 2fc:	80 81       	ld	r24, Z
 2fe:	89 2b       	or	r24, r25
 300:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC Refrence voltage****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)<ADC_Voltage_Refrence_AREF) || ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)>ADC_Voltage_Internal ) )
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	93 81       	ldd	r25, Z+3	; 0x03
 306:	81 3c       	cpi	r24, 0xC1	; 193
 308:	91 05       	cpc	r25, r1
 30a:	20 f0       	brcs	.+8      	; 0x314 <ADC_INIT+0x40>
			{

				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_VOLTAGE_REFRENCE_CHOOSE ;
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 312:	08 c0       	rjmp	.+16     	; 0x324 <ADC_INIT+0x50>
			}
			else
			{
				ADC_Voltage_Refrence_Set(CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage); 	 
 314:	96 b1       	in	r25, 0x06	; 6
 316:	80 95       	com	r24
 318:	89 23       	and	r24, r25
 31a:	86 b9       	out	0x06, r24	; 6
 31c:	97 b1       	in	r25, 0x07	; 7
 31e:	82 81       	ldd	r24, Z+2	; 0x02
 320:	89 2b       	or	r24, r25
 322:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC sampling frequency ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)<ADC_Freq_4MHZ                     ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)        >ADC_Freq_125KHZ       ) ) 
 324:	84 81       	ldd	r24, Z+4	; 0x04
 326:	95 81       	ldd	r25, Z+5	; 0x05
 328:	07 97       	sbiw	r24, 0x07	; 7
 32a:	20 f0       	brcs	.+8      	; 0x334 <ADC_INIT+0x60>
			{
			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_FREQUENCY_CHOOSE ;
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 332:	07 c0       	rjmp	.+14     	; 0x342 <ADC_INIT+0x6e>
			}
			else
			{
				ADC_Choose_Frequency(CopyPntrStr_ADC_Init_Config->ADC_Frequency);
 334:	86 b1       	in	r24, 0x06	; 6
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	86 b9       	out	0x06, r24	; 6
 33a:	96 b1       	in	r25, 0x06	; 6
 33c:	84 81       	ldd	r24, Z+4	; 0x04
 33e:	89 2b       	or	r24, r25
 340:	86 b9       	out	0x06, r24	; 6
			}
			/**** Configure Auto Trigger if it is requested by the user ****/
			if( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Enable ) 
 342:	86 81       	ldd	r24, Z+6	; 0x06
 344:	97 81       	ldd	r25, Z+7	; 0x07
 346:	85 31       	cpi	r24, 0x15	; 21
 348:	91 05       	cpc	r25, r1
 34a:	19 f4       	brne	.+6      	; 0x352 <ADC_INIT+0x7e>
			{
		
				ADC_Auto_Trigger_Set();
 34c:	35 98       	cbi	0x06, 5	; 6
 34e:	35 9a       	sbi	0x06, 5	; 6
 350:	05 c0       	rjmp	.+10     	; 0x35c <ADC_INIT+0x88>
			}
			else if ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Disable ) 
 352:	46 97       	sbiw	r24, 0x16	; 22
 354:	19 f0       	breq	.+6      	; 0x35c <ADC_INIT+0x88>
			{
				/*Do Nothing*/
			}
			else
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_TRIGGER_ENABLE_NOR_DISABLE;
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
		 
			}
			/**** Configure Source of auto triggering  ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)<ADC_Auto_Trig_Source_Free_Running_mode_Bits      ) ||  (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)>ADC_No_Need_To_Trigger  )
 35c:	80 85       	ldd	r24, Z+8	; 0x08
 35e:	91 85       	ldd	r25, Z+9	; 0x09
 360:	82 3e       	cpi	r24, 0xE2	; 226
 362:	91 05       	cpc	r25, r1
 364:	20 f0       	brcs	.+8      	; 0x36e <ADC_INIT+0x9a>
			{
				
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_TRIGGER ;		 
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 36c:	0b c0       	rjmp	.+22     	; 0x384 <ADC_INIT+0xb0>
			} 
			else if((CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)!=ADC_No_Need_To_Trigger  )
 36e:	81 3e       	cpi	r24, 0xE1	; 225
 370:	91 05       	cpc	r25, r1
 372:	41 f0       	breq	.+16     	; 0x384 <ADC_INIT+0xb0>
			{
		 	    ADC_Auto_Trigger_Source_Set(CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source);
 374:	90 b7       	in	r25, 0x30	; 48
 376:	80 95       	com	r24
 378:	89 23       	and	r24, r25
 37a:	80 bf       	out	0x30, r24	; 48
 37c:	90 b7       	in	r25, 0x30	; 48
 37e:	80 85       	ldd	r24, Z+8	; 0x08
 380:	89 2b       	or	r24, r25
 382:	80 bf       	out	0x30, r24	; 48
			else
			{
				/*Do Nothing*/
			}
			/**** Configure Left or Right Data Register ****/
			if(  (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Left_Adjustment    )  
 384:	82 85       	ldd	r24, Z+10	; 0x0a
 386:	93 85       	ldd	r25, Z+11	; 0x0b
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	91 05       	cpc	r25, r1
 38c:	31 f4       	brne	.+12     	; 0x39a <ADC_INIT+0xc6>
			{
			
				ADC_Data_Left_Adjustment_Set(); 
 38e:	3d 98       	cbi	0x07, 5	; 7
 390:	3d 9a       	sbi	0x07, 5	; 7
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Left_Adjustment;
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 398:	09 c0       	rjmp	.+18     	; 0x3ac <ADC_INIT+0xd8>
			}
			else if( (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Right_Adjustment )
 39a:	81 97       	sbiw	r24, 0x21	; 33
 39c:	21 f4       	brne	.+8      	; 0x3a6 <ADC_INIT+0xd2>
			{
		 
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Right_Adjustment;
 39e:	81 e2       	ldi	r24, 0x21	; 33
 3a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <ADC_INIT+0xd8>
			}	
			else
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_LEFT_NOR_RIGHT;			 
 3a6:	87 e0       	ldi	r24, 0x07	; 7
 3a8:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
		
			}
			/**Configure Execution Way**/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)<ADC_Executed_By_Interrupt      ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)>ADC_Executed_By_Event_Driven  ) )
 3ac:	84 85       	ldd	r24, Z+12	; 0x0c
 3ae:	95 85       	ldd	r25, Z+13	; 0x0d
 3b0:	9c 01       	movw	r18, r24
 3b2:	22 52       	subi	r18, 0x22	; 34
 3b4:	31 09       	sbc	r19, r1
 3b6:	24 30       	cpi	r18, 0x04	; 4
 3b8:	31 05       	cpc	r19, r1
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <ADC_INIT+0xf0>
			{
				
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_EXECUTION_METHOD ;
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <ADC_INIT+0x114>
			}
			else if(  CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Interrupt || CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Event_Driven)
 3c4:	82 32       	cpi	r24, 0x22	; 34
 3c6:	91 05       	cpc	r25, r1
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <ADC_INIT+0xfc>
 3ca:	85 32       	cpi	r24, 0x25	; 37
 3cc:	91 05       	cpc	r25, r1
 3ce:	31 f4       	brne	.+12     	; 0x3dc <ADC_INIT+0x108>
			{
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
 3d0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sgu8_ADC_Execution_Way>
				EnableGeneralInterrupt();
 3d4:	8f b7       	in	r24, 0x3f	; 63
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	8f bf       	out	0x3f, r24	; 63
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <ADC_INIT+0x114>

			}
			else 
			{
				
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
 3dc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sgu8_ADC_Execution_Way>
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <ADC_INIT+0x114>
			}
	}
	else
	{
		sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_Config_Pointer_Point_To_NULL;
 3e2:	89 e0       	ldi	r24, 0x09	; 9
 3e4:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgADC_Error_ADC_INIT_API>
	}
		 return  sgADC_Error_ADC_INIT_API;     
 }
 3e8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <sgADC_Error_ADC_INIT_API>
 3ec:	08 95       	ret

000003ee <ADC_READ>:
 
ADC_Error_t ADC_READ(uint32_t* Copyu32_ADC_Value,PntrToFunc_t Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR,uint8_t* Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG)
 {
 3ee:	fc 01       	movw	r30, r24
     int Ain,AinLow;
     static uint8_t Event_Driven_1st_time=1;
	 static uint8_t sgu8_ADC_READ_STATE=0;

     /*Check that there is no error occur while initialization*/	 
	 if(sgADC_Error_ADC_INIT_API==ADC_INIT_API_NO_ERROR)
 3f0:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sgADC_Error_ADC_INIT_API>
 3f4:	91 11       	cpse	r25, r1
 3f6:	72 c0       	rjmp	.+228    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	 { 		
/*
		DIO_Init_Pin(30,1);
		DIO_toggle_Pin(30);		 */ 	 
         /**Check If the execution way is done by polling **/ 	
		 if(sgu8_ADC_Execution_Way==ADC_Executed_By_Polling)
 3f8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sgu8_ADC_Execution_Way>
 3fc:	83 32       	cpi	r24, 0x23	; 35
 3fe:	e9 f4       	brne	.+58     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		 {

			 ADC_Start_Conversion();
 400:	36 9a       	sbi	0x06, 6	; 6

			 while(ADC_Read_Interrupt_Flag_State()==0);
 402:	34 9b       	sbis	0x06, 4	; 6
 404:	fe cf       	rjmp	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

             /**Check If the data is left adjusted or right**/ 			 
			 if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 406:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 40a:	80 32       	cpi	r24, 0x20	; 32
 40c:	79 f4       	brne	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			 {				
				  *Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 40e:	85 b1       	in	r24, 0x05	; 5
 410:	24 b1       	in	r18, 0x04	; 4
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	22 95       	swap	r18
 41e:	26 95       	lsr	r18
 420:	26 95       	lsr	r18
 422:	23 70       	andi	r18, 0x03	; 3
 424:	82 2b       	or	r24, r18
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
 42a:	5b c0       	rjmp	.+182    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			 }
			 else
			 {
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 42c:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 42e:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	92 2b       	or	r25, r18
 434:	91 83       	std	Z+1, r25	; 0x01
 436:	80 83       	st	Z, r24
 438:	54 c0       	rjmp	.+168    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		 }
         /**Check If the execution way is done by interrupt or event or time driven **/ 		 
		 else
		 {
			 
			 if(sgu8_ADC_Execution_Way!=ADC_Executed_By_Time_Driven)
 43a:	84 32       	cpi	r24, 0x24	; 36
 43c:	29 f1       	breq	.+74     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			 {
				
			    /*while(ADC_Read_Interrupt_Flag_State()==0);*/
				/**Check If PntrToFunction does'nt point to NullPointer**/
				if(NullPointer!=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR)
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	29 f0       	breq	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				{
				 
					sgPntrToFun_ADC_ISR=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR;
 444:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 448:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <sgPntrToFun_ADC_ISR>
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				}
				else
				{
					sgADC_Error_ADC_READ_API=ADC_READ_CALL_BACK_POITNER_IS_NULL;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				}
				/**Check If the data is left adjusted or right**/
				if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 454:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 458:	80 32       	cpi	r24, 0x20	; 32
 45a:	79 f4       	brne	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				{
						             
					*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	24 b1       	in	r18, 0x04	; 4
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	22 95       	swap	r18
 46c:	26 95       	lsr	r18
 46e:	26 95       	lsr	r18
 470:	23 70       	andi	r18, 0x03	; 3
 472:	82 2b       	or	r24, r18
 474:	91 83       	std	Z+1, r25	; 0x01
 476:	80 83       	st	Z, r24
 478:	34 c0       	rjmp	.+104    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				}
				else
				{
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 47a:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 47c:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	92 2b       	or	r25, r18
 482:	91 83       	std	Z+1, r25	; 0x01
 484:	80 83       	st	Z, r24
 486:	2d c0       	rjmp	.+90     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				}
			 }
			 else
			 {
				switch(sgu8_ADC_READ_STATE)
 488:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 48c:	88 23       	and	r24, r24
 48e:	19 f0       	breq	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	31 f0       	breq	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 494:	26 c0       	rjmp	.+76     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				{
					case 0:
					{
				        ADC_Start_Conversion();
 496:	36 9a       	sbi	0x06, 6	; 6
						sgu8_ADC_READ_STATE=1;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
					}

					break;
 49e:	21 c0       	rjmp	.+66     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
					case 1:
					{

/*							SET_BIT(ADC_CNTRL_STATUS_REG,ADC_Interrupt_flag_Bit);*/
                      		/**Check If the data is left adjusted or right**/
                      		if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
 4a0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sgu8_ADC_Left_Adjust_Enabled_Flag>
 4a4:	80 32       	cpi	r24, 0x20	; 32
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
                      		{
	                      					
	                      		*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
 4a8:	85 b1       	in	r24, 0x05	; 5
 4aa:	24 b1       	in	r18, 0x04	; 4
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	22 95       	swap	r18
 4b8:	26 95       	lsr	r18
 4ba:	26 95       	lsr	r18
 4bc:	23 70       	andi	r18, 0x03	; 3
 4be:	82 2b       	or	r24, r18
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	80 83       	st	Z, r24
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
                      		}
                      		else
                      		{
								AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
 4c6:	84 b1       	in	r24, 0x04	; 4
								Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
 4c8:	25 b1       	in	r18, 0x05	; 5
							   *Copyu32_ADC_Value=Ain|AinLow ;	
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	92 2b       	or	r25, r18
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
                      		}			
							sgu8_ADC_READ_STATE=0;
 4d2:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
							*Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG=0;
 4d6:	fa 01       	movw	r30, r20
 4d8:	10 82       	st	Z, r1
						}									

					break;
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	 		 
		 }
	 }
	 else
	 {
		 sgADC_Error_ADC_READ_API=ADC_READ_ERROR_Due_To_ADC_INIT_ERROR;
 4dc:	8f e1       	ldi	r24, 0x1F	; 31
 4de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
 4e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4e6:	08 95       	ret

000004e8 <__vector_16>:
 
ADC_ISR_CODE()
{
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	af 93       	push	r26
 504:	bf 93       	push	r27
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	DIO_Init_Pin(26,1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	8a e1       	ldi	r24, 0x1A	; 26
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_Init_Pin>
	DIO_toggle_Pin(26);
 516:	8a e1       	ldi	r24, 0x1A	; 26
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 43 03 	call	0x686	; 0x686 <DIO_toggle_Pin>
	TIMER_EVENT_FLAGS_REG=1<<3;
 51e:	88 e0       	ldi	r24, 0x08	; 8
 520:	88 bf       	out	0x38, r24	; 56
	
	if(NullPointer!=sgPntrToFun_ADC_ISR)
 522:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <sgPntrToFun_ADC_ISR>
 526:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 52a:	89 2b       	or	r24, r25
 52c:	29 f0       	breq	.+10     	; 0x538 <__vector_16+0x50>
	{
			sgPntrToFun_ADC_ISR();
 52e:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <sgPntrToFun_ADC_ISR>
 532:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <sgPntrToFun_ADC_ISR+0x1>
 536:	09 95       	icall
	{
		/*Do Nothing*/
	}

	
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <DIO_Init_Pin>:
		default :
		return DIO_ERROR_NOK;
		break;
		}
return DIO_ERROR_OK;
}
 55a:	80 32       	cpi	r24, 0x20	; 32
 55c:	08 f0       	brcs	.+2      	; 0x560 <DIO_Init_Pin+0x6>
 55e:	8f c0       	rjmp	.+286    	; 0x67e <DIO_Init_Pin+0x124>
 560:	98 2f       	mov	r25, r24
 562:	97 70       	andi	r25, 0x07	; 7
 564:	86 95       	lsr	r24
 566:	86 95       	lsr	r24
 568:	86 95       	lsr	r24
 56a:	8f 5b       	subi	r24, 0xBF	; 191
 56c:	82 34       	cpi	r24, 0x42	; 66
 56e:	51 f1       	breq	.+84     	; 0x5c4 <DIO_Init_Pin+0x6a>
 570:	18 f4       	brcc	.+6      	; 0x578 <DIO_Init_Pin+0x1e>
 572:	81 34       	cpi	r24, 0x41	; 65
 574:	41 f0       	breq	.+16     	; 0x586 <DIO_Init_Pin+0x2c>
 576:	85 c0       	rjmp	.+266    	; 0x682 <DIO_Init_Pin+0x128>
 578:	83 34       	cpi	r24, 0x43	; 67
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_Init_Pin+0x24>
 57c:	42 c0       	rjmp	.+132    	; 0x602 <DIO_Init_Pin+0xa8>
 57e:	84 34       	cpi	r24, 0x44	; 68
 580:	09 f4       	brne	.+2      	; 0x584 <DIO_Init_Pin+0x2a>
 582:	5e c0       	rjmp	.+188    	; 0x640 <DIO_Init_Pin+0xe6>
 584:	7e c0       	rjmp	.+252    	; 0x682 <DIO_Init_Pin+0x128>
 586:	61 11       	cpse	r22, r1
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <DIO_Init_Pin+0x4e>
 58a:	4a b3       	in	r20, 0x1a	; 26
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_Init_Pin+0x3e>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	9a 95       	dec	r25
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_Init_Pin+0x3a>
 59c:	cb 01       	movw	r24, r22
 59e:	80 95       	com	r24
 5a0:	84 23       	and	r24, r20
 5a2:	8a bb       	out	0x1a, r24	; 26
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	4a b3       	in	r20, 0x1a	; 26
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	b9 01       	movw	r22, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_Init_Pin+0x5c>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	9a 95       	dec	r25
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_Init_Pin+0x58>
 5ba:	cb 01       	movw	r24, r22
 5bc:	84 2b       	or	r24, r20
 5be:	8a bb       	out	0x1a, r24	; 26
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
 5c4:	61 11       	cpse	r22, r1
 5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <DIO_Init_Pin+0x8c>
 5c8:	47 b3       	in	r20, 0x17	; 23
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_Init_Pin+0x7c>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	9a 95       	dec	r25
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_Init_Pin+0x78>
 5da:	cb 01       	movw	r24, r22
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	87 bb       	out	0x17, r24	; 23
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	47 b3       	in	r20, 0x17	; 23
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_Init_Pin+0x9a>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	9a 95       	dec	r25
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_Init_Pin+0x96>
 5f8:	cb 01       	movw	r24, r22
 5fa:	84 2b       	or	r24, r20
 5fc:	87 bb       	out	0x17, r24	; 23
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret
 602:	61 11       	cpse	r22, r1
 604:	0f c0       	rjmp	.+30     	; 0x624 <DIO_Init_Pin+0xca>
 606:	44 b3       	in	r20, 0x14	; 20
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	b9 01       	movw	r22, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_Init_Pin+0xba>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	9a 95       	dec	r25
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_Init_Pin+0xb6>
 618:	cb 01       	movw	r24, r22
 61a:	80 95       	com	r24
 61c:	84 23       	and	r24, r20
 61e:	84 bb       	out	0x14, r24	; 20
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	08 95       	ret
 624:	44 b3       	in	r20, 0x14	; 20
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	b9 01       	movw	r22, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_Init_Pin+0xd8>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	9a 95       	dec	r25
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_Init_Pin+0xd4>
 636:	cb 01       	movw	r24, r22
 638:	84 2b       	or	r24, r20
 63a:	84 bb       	out	0x14, r24	; 20
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
 640:	61 11       	cpse	r22, r1
 642:	0f c0       	rjmp	.+30     	; 0x662 <DIO_Init_Pin+0x108>
 644:	41 b3       	in	r20, 0x11	; 17
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_Init_Pin+0xf8>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	9a 95       	dec	r25
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_Init_Pin+0xf4>
 656:	cb 01       	movw	r24, r22
 658:	80 95       	com	r24
 65a:	84 23       	and	r24, r20
 65c:	81 bb       	out	0x11, r24	; 17
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
 662:	41 b3       	in	r20, 0x11	; 17
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	b9 01       	movw	r22, r18
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_Init_Pin+0x116>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	9a 95       	dec	r25
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_Init_Pin+0x112>
 674:	cb 01       	movw	r24, r22
 676:	84 2b       	or	r24, r20
 678:	81 bb       	out	0x11, r24	; 17
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret

00000686 <DIO_toggle_Pin>:
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 686:	80 32       	cpi	r24, 0x20	; 32
 688:	08 f0       	brcs	.+2      	; 0x68c <DIO_toggle_Pin+0x6>
 68a:	49 c0       	rjmp	.+146    	; 0x71e <DIO_toggle_Pin+0x98>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
 68c:	98 2f       	mov	r25, r24
 68e:	97 70       	andi	r25, 0x07	; 7
	}
	
	switch(por)
 690:	86 95       	lsr	r24
 692:	86 95       	lsr	r24
 694:	86 95       	lsr	r24
 696:	8f 5b       	subi	r24, 0xBF	; 191
 698:	82 34       	cpi	r24, 0x42	; 66
 69a:	b9 f0       	breq	.+46     	; 0x6ca <DIO_toggle_Pin+0x44>
 69c:	18 f4       	brcc	.+6      	; 0x6a4 <DIO_toggle_Pin+0x1e>
 69e:	81 34       	cpi	r24, 0x41	; 65
 6a0:	31 f0       	breq	.+12     	; 0x6ae <DIO_toggle_Pin+0x28>
 6a2:	3f c0       	rjmp	.+126    	; 0x722 <DIO_toggle_Pin+0x9c>
 6a4:	83 34       	cpi	r24, 0x43	; 67
 6a6:	f9 f0       	breq	.+62     	; 0x6e6 <DIO_toggle_Pin+0x60>
 6a8:	84 34       	cpi	r24, 0x44	; 68
 6aa:	59 f1       	breq	.+86     	; 0x702 <DIO_toggle_Pin+0x7c>
 6ac:	3a c0       	rjmp	.+116    	; 0x722 <DIO_toggle_Pin+0x9c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 6ae:	4b b3       	in	r20, 0x1b	; 27
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	b9 01       	movw	r22, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_toggle_Pin+0x36>
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	9a 95       	dec	r25
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_toggle_Pin+0x32>
 6c0:	cb 01       	movw	r24, r22
 6c2:	84 27       	eor	r24, r20
 6c4:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 6c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
 6c8:	08 95       	ret
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 6ca:	48 b3       	in	r20, 0x18	; 24
 6cc:	21 e0       	ldi	r18, 0x01	; 1
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	b9 01       	movw	r22, r18
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_toggle_Pin+0x52>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	9a 95       	dec	r25
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_toggle_Pin+0x4e>
 6dc:	cb 01       	movw	r24, r22
 6de:	84 27       	eor	r24, r20
 6e0:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 6e2:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
 6e4:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 6e6:	45 b3       	in	r20, 0x15	; 21
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	b9 01       	movw	r22, r18
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_toggle_Pin+0x6e>
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	9a 95       	dec	r25
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_toggle_Pin+0x6a>
 6f8:	cb 01       	movw	r24, r22
 6fa:	84 27       	eor	r24, r20
 6fc:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
 700:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 702:	42 b3       	in	r20, 0x12	; 18
 704:	21 e0       	ldi	r18, 0x01	; 1
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	b9 01       	movw	r22, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_toggle_Pin+0x8a>
 70c:	66 0f       	add	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	9a 95       	dec	r25
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_toggle_Pin+0x86>
 714:	cb 01       	movw	r24, r22
 716:	84 27       	eor	r24, r20
 718:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 71a:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
 71c:	08 95       	ret
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	08 95       	ret
			 break;
		case 'G':TOGGLE_BIT(PORTG,pin);
			 break;
#endif
		default :
		return DIO_ERROR_NOK;
 722:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	return DIO_ERROR_OK;
}
 724:	08 95       	ret

00000726 <Timer_Init>:
		}
		break;
	}
	
	return TIMER_ERROR_OK;
}
 726:	fc 01       	movw	r30, r24
 728:	89 2b       	or	r24, r25
 72a:	09 f4       	brne	.+2      	; 0x72e <Timer_Init+0x8>
 72c:	47 c0       	rjmp	.+142    	; 0x7bc <Timer_Init+0x96>
 72e:	90 81       	ld	r25, Z
 730:	29 2f       	mov	r18, r25
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	d9 01       	movw	r26, r18
 736:	a4 57       	subi	r26, 0x74	; 116
 738:	bf 4f       	sbci	r27, 0xFF	; 255
 73a:	8c 91       	ld	r24, X
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	09 f4       	brne	.+2      	; 0x742 <Timer_Init+0x1c>
 740:	48 c0       	rjmp	.+144    	; 0x7d2 <Timer_Init+0xac>
 742:	93 30       	cpi	r25, 0x03	; 3
 744:	e8 f5       	brcc	.+122    	; 0x7c0 <Timer_Init+0x9a>
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	e0 f5       	brcc	.+120    	; 0x7c4 <Timer_Init+0x9e>
 74c:	43 81       	ldd	r20, Z+3	; 0x03
 74e:	42 30       	cpi	r20, 0x02	; 2
 750:	d8 f5       	brcc	.+118    	; 0x7c8 <Timer_Init+0xa2>
 752:	51 81       	ldd	r21, Z+1	; 0x01
 754:	58 30       	cpi	r21, 0x08	; 8
 756:	d0 f5       	brcc	.+116    	; 0x7cc <Timer_Init+0xa6>
 758:	d9 01       	movw	r26, r18
 75a:	a4 57       	subi	r26, 0x74	; 116
 75c:	bf 4f       	sbci	r27, 0xFF	; 255
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	6c 93       	st	X, r22
 762:	d9 01       	movw	r26, r18
 764:	a1 57       	subi	r26, 0x71	; 113
 766:	bf 4f       	sbci	r27, 0xFF	; 255
 768:	8c 93       	st	X, r24
 76a:	d9 01       	movw	r26, r18
 76c:	ae 56       	subi	r26, 0x6E	; 110
 76e:	bf 4f       	sbci	r27, 0xFF	; 255
 770:	4c 93       	st	X, r20
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	d9 f4       	brne	.+54     	; 0x7ac <Timer_Init+0x86>
 776:	91 30       	cpi	r25, 0x01	; 1
 778:	61 f0       	breq	.+24     	; 0x792 <Timer_Init+0x6c>
 77a:	18 f0       	brcs	.+6      	; 0x782 <Timer_Init+0x5c>
 77c:	92 30       	cpi	r25, 0x02	; 2
 77e:	99 f0       	breq	.+38     	; 0x7a6 <Timer_Init+0x80>
 780:	08 95       	ret
 782:	83 b7       	in	r24, 0x33	; 51
 784:	88 60       	ori	r24, 0x08	; 8
 786:	83 bf       	out	0x33, r24	; 51
 788:	93 b7       	in	r25, 0x33	; 51
 78a:	81 81       	ldd	r24, Z+1	; 0x01
 78c:	89 2b       	or	r24, r25
 78e:	83 bf       	out	0x33, r24	; 51
 790:	0d c0       	rjmp	.+26     	; 0x7ac <Timer_Init+0x86>
 792:	8f b5       	in	r24, 0x2f	; 47
 794:	8f bd       	out	0x2f, r24	; 47
 796:	8e b5       	in	r24, 0x2e	; 46
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	8e bd       	out	0x2e, r24	; 46
 79c:	9e b5       	in	r25, 0x2e	; 46
 79e:	81 81       	ldd	r24, Z+1	; 0x01
 7a0:	89 2b       	or	r24, r25
 7a2:	8e bd       	out	0x2e, r24	; 46
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <Timer_Init+0x86>
 7a6:	85 b5       	in	r24, 0x25	; 37
 7a8:	58 2b       	or	r21, r24
 7aa:	55 bd       	out	0x25, r21	; 37
 7ac:	83 81       	ldd	r24, Z+3	; 0x03
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	79 f4       	brne	.+30     	; 0x7d0 <Timer_Init+0xaa>
 7b2:	8f b7       	in	r24, 0x3f	; 63
 7b4:	80 68       	ori	r24, 0x80	; 128
 7b6:	8f bf       	out	0x3f, r24	; 63
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	08 95       	ret
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	08 95       	ret
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	08 95       	ret
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	08 95       	ret
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	08 95       	ret

000007d4 <Timer_Start>:
 7d4:	88 23       	and	r24, r24
 7d6:	21 f0       	breq	.+8      	; 0x7e0 <Timer_Start+0xc>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	09 f4       	brne	.+2      	; 0x7de <Timer_Start+0xa>
 7dc:	7d c0       	rjmp	.+250    	; 0x8d8 <__stack+0x79>
 7de:	82 c0       	rjmp	.+260    	; 0x8e4 <__stack+0x85>
 7e0:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sgau8_TIMERMode>
 7e4:	91 30       	cpi	r25, 0x01	; 1
 7e6:	09 f4       	brne	.+2      	; 0x7ea <Timer_Start+0x16>
 7e8:	5c c0       	rjmp	.+184    	; 0x8a2 <__stack+0x43>
 7ea:	91 11       	cpse	r25, r1
 7ec:	2c c0       	rjmp	.+88     	; 0x846 <Timer_Start+0x72>
 7ee:	83 b7       	in	r24, 0x33	; 51
 7f0:	82 60       	ori	r24, 0x02	; 2
 7f2:	83 bf       	out	0x33, r24	; 51
 7f4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 7f8:	81 11       	cpse	r24, r1
 7fa:	14 c0       	rjmp	.+40     	; 0x824 <Timer_Start+0x50>
 7fc:	61 15       	cp	r22, r1
 7fe:	71 05       	cpc	r23, r1
 800:	09 f4       	brne	.+2      	; 0x804 <Timer_Start+0x30>
 802:	79 c0       	rjmp	.+242    	; 0x8f6 <__stack+0x97>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	98 b7       	in	r25, 0x38	; 56
 80c:	92 60       	ori	r25, 0x02	; 2
 80e:	98 bf       	out	0x38, r25	; 56
 810:	4c bf       	out	0x3c, r20	; 60
 812:	08 b6       	in	r0, 0x38	; 56
 814:	01 fe       	sbrs	r0, 1
 816:	fd cf       	rjmp	.-6      	; 0x812 <Timer_Start+0x3e>
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	62 17       	cp	r22, r18
 81e:	73 07       	cpc	r23, r19
 820:	a1 f7       	brne	.-24     	; 0x80a <Timer_Start+0x36>
 822:	08 95       	ret
 824:	81 30       	cpi	r24, 0x01	; 1
 826:	09 f0       	breq	.+2      	; 0x82a <Timer_Start+0x56>
 828:	5f c0       	rjmp	.+190    	; 0x8e8 <__stack+0x89>
 82a:	88 b7       	in	r24, 0x38	; 56
 82c:	82 60       	ori	r24, 0x02	; 2
 82e:	88 bf       	out	0x38, r24	; 56
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	8c bf       	out	0x3c, r24	; 60
 834:	89 b7       	in	r24, 0x39	; 57
 836:	82 60       	ori	r24, 0x02	; 2
 838:	89 bf       	out	0x39, r24	; 57
 83a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 83e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 842:	89 2f       	mov	r24, r25
 844:	08 95       	ret
 846:	92 30       	cpi	r25, 0x02	; 2
 848:	09 f0       	breq	.+2      	; 0x84c <Timer_Start+0x78>
 84a:	50 c0       	rjmp	.+160    	; 0x8ec <__stack+0x8d>
 84c:	83 b7       	in	r24, 0x33	; 51
 84e:	83 60       	ori	r24, 0x03	; 3
 850:	83 bf       	out	0x33, r24	; 51
 852:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 856:	81 11       	cpse	r24, r1
 858:	14 c0       	rjmp	.+40     	; 0x882 <__stack+0x23>
 85a:	61 15       	cp	r22, r1
 85c:	71 05       	cpc	r23, r1
 85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
 860:	4a c0       	rjmp	.+148    	; 0x8f6 <__stack+0x97>
 862:	20 e0       	ldi	r18, 0x00	; 0
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	4d e7       	ldi	r20, 0x7D	; 125
 868:	98 b7       	in	r25, 0x38	; 56
 86a:	92 60       	ori	r25, 0x02	; 2
 86c:	98 bf       	out	0x38, r25	; 56
 86e:	4c bf       	out	0x3c, r20	; 60
 870:	08 b6       	in	r0, 0x38	; 56
 872:	01 fe       	sbrs	r0, 1
 874:	fd cf       	rjmp	.-6      	; 0x870 <__stack+0x11>
 876:	2f 5f       	subi	r18, 0xFF	; 255
 878:	3f 4f       	sbci	r19, 0xFF	; 255
 87a:	62 17       	cp	r22, r18
 87c:	73 07       	cpc	r23, r19
 87e:	a1 f7       	brne	.-24     	; 0x868 <__stack+0x9>
 880:	08 95       	ret
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	a9 f5       	brne	.+106    	; 0x8f0 <__stack+0x91>
 886:	88 b7       	in	r24, 0x38	; 56
 888:	82 60       	ori	r24, 0x02	; 2
 88a:	88 bf       	out	0x38, r24	; 56
 88c:	8d e7       	ldi	r24, 0x7D	; 125
 88e:	8c bf       	out	0x3c, r24	; 60
 890:	89 b7       	in	r24, 0x39	; 57
 892:	82 60       	ori	r24, 0x02	; 2
 894:	89 bf       	out	0x39, r24	; 57
 896:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 89a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	08 95       	ret
 8a2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgau8_Interrupt_Mode>
 8a6:	81 11       	cpse	r24, r1
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <__stack+0x5b>
 8aa:	98 b7       	in	r25, 0x38	; 56
 8ac:	92 60       	ori	r25, 0x02	; 2
 8ae:	98 bf       	out	0x38, r25	; 56
 8b0:	6c bf       	out	0x3c, r22	; 60
 8b2:	08 b6       	in	r0, 0x38	; 56
 8b4:	01 fe       	sbrs	r0, 1
 8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <__stack+0x53>
 8b8:	08 95       	ret
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	d9 f4       	brne	.+54     	; 0x8f4 <__stack+0x95>
 8be:	88 b7       	in	r24, 0x38	; 56
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	88 bf       	out	0x38, r24	; 56
 8c4:	6c bf       	out	0x3c, r22	; 60
 8c6:	89 b7       	in	r24, 0x39	; 57
 8c8:	82 60       	ori	r24, 0x02	; 2
 8ca:	89 bf       	out	0x39, r24	; 57
 8cc:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 8d0:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
 8d8:	7b bd       	out	0x2b, r23	; 43
 8da:	6a bd       	out	0x2a, r22	; 42
 8dc:	79 bd       	out	0x29, r23	; 41
 8de:	68 bd       	out	0x28, r22	; 40
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	08 95       	ret
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	89 2f       	mov	r24, r25
 8ea:	08 95       	ret
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	08 95       	ret
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	08 95       	ret
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	08 95       	ret

000008f8 <__vector_10>:

Timer_ISR(TIMER0_COMP_VECTOR)
{
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	2f 93       	push	r18
 904:	3f 93       	push	r19
 906:	4f 93       	push	r20
 908:	5f 93       	push	r21
 90a:	6f 93       	push	r22
 90c:	7f 93       	push	r23
 90e:	8f 93       	push	r24
 910:	9f 93       	push	r25
 912:	af 93       	push	r26
 914:	bf 93       	push	r27
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
 91a:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <sgpfun_TIMER0_CMP_ISR_Function>
 91e:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 922:	09 95       	icall
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_7>:

Timer_ISR(TIMER1_COMPA_VECTOR)
{
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31

	sgpfun_TIMER1_CMPA_ISR_Function();
 968:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <sgpfun_TIMER1_CMPA_ISR_Function>
 96c:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
 970:	09 95       	icall
}
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	0f 90       	pop	r0
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
 994:	1f 92       	push	r1
 996:	0f 92       	push	r0
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	0f 92       	push	r0
 99c:	11 24       	eor	r1, r1
 99e:	2f 93       	push	r18
 9a0:	3f 93       	push	r19
 9a2:	4f 93       	push	r20
 9a4:	5f 93       	push	r21
 9a6:	6f 93       	push	r22
 9a8:	7f 93       	push	r23
 9aa:	8f 93       	push	r24
 9ac:	9f 93       	push	r25
 9ae:	af 93       	push	r26
 9b0:	bf 93       	push	r27
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
	sgpfun_TIMER1_CMPB_ISR_Function();
 9b6:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <sgpfun_TIMER1_CMPB_ISR_Function>
 9ba:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <sgpfun_TIMER1_CMPB_ISR_Function+0x1>
 9be:	09 95       	icall
}
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	bf 91       	pop	r27
 9c6:	af 91       	pop	r26
 9c8:	9f 91       	pop	r25
 9ca:	8f 91       	pop	r24
 9cc:	7f 91       	pop	r23
 9ce:	6f 91       	pop	r22
 9d0:	5f 91       	pop	r21
 9d2:	4f 91       	pop	r20
 9d4:	3f 91       	pop	r19
 9d6:	2f 91       	pop	r18
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <__vector_4>:

Timer_ISR(TIMER2_COMP_VECTOR)
{
 9e2:	1f 92       	push	r1
 9e4:	0f 92       	push	r0
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	0f 92       	push	r0
 9ea:	11 24       	eor	r1, r1
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	ef 93       	push	r30
 a02:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
 a04:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <sgpfun_TIMER2_CMP_ISR_Function>
 a08:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 a0c:	09 95       	icall
 a0e:	ff 91       	pop	r31
 a10:	ef 91       	pop	r30
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <__fixunssfsi>:
 a30:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_splitA>
 a34:	88 f0       	brcs	.+34     	; 0xa58 <__fixunssfsi+0x28>
 a36:	9f 57       	subi	r25, 0x7F	; 127
 a38:	98 f0       	brcs	.+38     	; 0xa60 <__fixunssfsi+0x30>
 a3a:	b9 2f       	mov	r27, r25
 a3c:	99 27       	eor	r25, r25
 a3e:	b7 51       	subi	r27, 0x17	; 23
 a40:	b0 f0       	brcs	.+44     	; 0xa6e <__fixunssfsi+0x3e>
 a42:	e1 f0       	breq	.+56     	; 0xa7c <__fixunssfsi+0x4c>
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a f0       	brmi	.+6      	; 0xa54 <__fixunssfsi+0x24>
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__fixunssfsi+0x14>
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <__fixunssfsi+0x4c>
 a54:	b1 30       	cpi	r27, 0x01	; 1
 a56:	91 f0       	breq	.+36     	; 0xa7c <__fixunssfsi+0x4c>
 a58:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_zero>
 a64:	67 2f       	mov	r22, r23
 a66:	78 2f       	mov	r23, r24
 a68:	88 27       	eor	r24, r24
 a6a:	b8 5f       	subi	r27, 0xF8	; 248
 a6c:	39 f0       	breq	.+14     	; 0xa7c <__fixunssfsi+0x4c>
 a6e:	b9 3f       	cpi	r27, 0xF9	; 249
 a70:	cc f3       	brlt	.-14     	; 0xa64 <__fixunssfsi+0x34>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b3 95       	inc	r27
 a7a:	d9 f7       	brne	.-10     	; 0xa72 <__fixunssfsi+0x42>
 a7c:	3e f4       	brtc	.+14     	; 0xa8c <__fixunssfsi+0x5c>
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__floatunsisf>:
 a8e:	e8 94       	clt
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__floatsisf+0x12>

00000a92 <__floatsisf>:
 a92:	97 fb       	bst	r25, 7
 a94:	3e f4       	brtc	.+14     	; 0xaa4 <__floatsisf+0x12>
 a96:	90 95       	com	r25
 a98:	80 95       	com	r24
 a9a:	70 95       	com	r23
 a9c:	61 95       	neg	r22
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	99 23       	and	r25, r25
 aa6:	a9 f0       	breq	.+42     	; 0xad2 <__floatsisf+0x40>
 aa8:	f9 2f       	mov	r31, r25
 aaa:	96 e9       	ldi	r25, 0x96	; 150
 aac:	bb 27       	eor	r27, r27
 aae:	93 95       	inc	r25
 ab0:	f6 95       	lsr	r31
 ab2:	87 95       	ror	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f1 11       	cpse	r31, r1
 abc:	f8 cf       	rjmp	.-16     	; 0xaae <__floatsisf+0x1c>
 abe:	fa f4       	brpl	.+62     	; 0xafe <__floatsisf+0x6c>
 ac0:	bb 0f       	add	r27, r27
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__floatsisf+0x36>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	1b c0       	rjmp	.+54     	; 0xafe <__floatsisf+0x6c>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	16 c0       	rjmp	.+44     	; 0xafe <__floatsisf+0x6c>
 ad2:	88 23       	and	r24, r24
 ad4:	11 f0       	breq	.+4      	; 0xada <__floatsisf+0x48>
 ad6:	96 e9       	ldi	r25, 0x96	; 150
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <__floatsisf+0x6a>
 ada:	77 23       	and	r23, r23
 adc:	21 f0       	breq	.+8      	; 0xae6 <__floatsisf+0x54>
 ade:	9e e8       	ldi	r25, 0x8E	; 142
 ae0:	87 2f       	mov	r24, r23
 ae2:	76 2f       	mov	r23, r22
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__floatsisf+0x5e>
 ae6:	66 23       	and	r22, r22
 ae8:	71 f0       	breq	.+28     	; 0xb06 <__floatsisf+0x74>
 aea:	96 e8       	ldi	r25, 0x86	; 134
 aec:	86 2f       	mov	r24, r22
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	2a f0       	brmi	.+10     	; 0xafe <__floatsisf+0x6c>
 af4:	9a 95       	dec	r25
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	da f7       	brpl	.-10     	; 0xaf4 <__floatsisf+0x62>
 afe:	88 0f       	add	r24, r24
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__fp_split3>:
 b08:	57 fd       	sbrc	r21, 7
 b0a:	90 58       	subi	r25, 0x80	; 128
 b0c:	44 0f       	add	r20, r20
 b0e:	55 1f       	adc	r21, r21
 b10:	59 f0       	breq	.+22     	; 0xb28 <__fp_splitA+0x10>
 b12:	5f 3f       	cpi	r21, 0xFF	; 255
 b14:	71 f0       	breq	.+28     	; 0xb32 <__fp_splitA+0x1a>
 b16:	47 95       	ror	r20

00000b18 <__fp_splitA>:
 b18:	88 0f       	add	r24, r24
 b1a:	97 fb       	bst	r25, 7
 b1c:	99 1f       	adc	r25, r25
 b1e:	61 f0       	breq	.+24     	; 0xb38 <__fp_splitA+0x20>
 b20:	9f 3f       	cpi	r25, 0xFF	; 255
 b22:	79 f0       	breq	.+30     	; 0xb42 <__fp_splitA+0x2a>
 b24:	87 95       	ror	r24
 b26:	08 95       	ret
 b28:	12 16       	cp	r1, r18
 b2a:	13 06       	cpc	r1, r19
 b2c:	14 06       	cpc	r1, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	f2 cf       	rjmp	.-28     	; 0xb16 <__fp_split3+0xe>
 b32:	46 95       	lsr	r20
 b34:	f1 df       	rcall	.-30     	; 0xb18 <__fp_splitA>
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <__fp_splitA+0x30>
 b38:	16 16       	cp	r1, r22
 b3a:	17 06       	cpc	r1, r23
 b3c:	18 06       	cpc	r1, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	f1 cf       	rjmp	.-30     	; 0xb24 <__fp_splitA+0xc>
 b42:	86 95       	lsr	r24
 b44:	71 05       	cpc	r23, r1
 b46:	61 05       	cpc	r22, r1
 b48:	08 94       	sec
 b4a:	08 95       	ret

00000b4c <__fp_zero>:
 b4c:	e8 94       	clt

00000b4e <__fp_szero>:
 b4e:	bb 27       	eor	r27, r27
 b50:	66 27       	eor	r22, r22
 b52:	77 27       	eor	r23, r23
 b54:	cb 01       	movw	r24, r22
 b56:	97 f9       	bld	r25, 7
 b58:	08 95       	ret

00000b5a <__mulsf3>:
 b5a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__mulsf3x>
 b5e:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_round>
 b62:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscA>
 b66:	38 f0       	brcs	.+14     	; 0xb76 <__mulsf3+0x1c>
 b68:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_pscB>
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__mulsf3+0x1c>
 b6e:	95 23       	and	r25, r21
 b70:	11 f0       	breq	.+4      	; 0xb76 <__mulsf3+0x1c>
 b72:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
 b76:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_nan>
 b7a:	11 24       	eor	r1, r1
 b7c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>

00000b80 <__mulsf3x>:
 b80:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_split3>
 b84:	70 f3       	brcs	.-36     	; 0xb62 <__mulsf3+0x8>

00000b86 <__mulsf3_pse>:
 b86:	95 9f       	mul	r25, r21
 b88:	c1 f3       	breq	.-16     	; 0xb7a <__mulsf3+0x20>
 b8a:	95 0f       	add	r25, r21
 b8c:	50 e0       	ldi	r21, 0x00	; 0
 b8e:	55 1f       	adc	r21, r21
 b90:	62 9f       	mul	r22, r18
 b92:	f0 01       	movw	r30, r0
 b94:	72 9f       	mul	r23, r18
 b96:	bb 27       	eor	r27, r27
 b98:	f0 0d       	add	r31, r0
 b9a:	b1 1d       	adc	r27, r1
 b9c:	63 9f       	mul	r22, r19
 b9e:	aa 27       	eor	r26, r26
 ba0:	f0 0d       	add	r31, r0
 ba2:	b1 1d       	adc	r27, r1
 ba4:	aa 1f       	adc	r26, r26
 ba6:	64 9f       	mul	r22, r20
 ba8:	66 27       	eor	r22, r22
 baa:	b0 0d       	add	r27, r0
 bac:	a1 1d       	adc	r26, r1
 bae:	66 1f       	adc	r22, r22
 bb0:	82 9f       	mul	r24, r18
 bb2:	22 27       	eor	r18, r18
 bb4:	b0 0d       	add	r27, r0
 bb6:	a1 1d       	adc	r26, r1
 bb8:	62 1f       	adc	r22, r18
 bba:	73 9f       	mul	r23, r19
 bbc:	b0 0d       	add	r27, r0
 bbe:	a1 1d       	adc	r26, r1
 bc0:	62 1f       	adc	r22, r18
 bc2:	83 9f       	mul	r24, r19
 bc4:	a0 0d       	add	r26, r0
 bc6:	61 1d       	adc	r22, r1
 bc8:	22 1f       	adc	r18, r18
 bca:	74 9f       	mul	r23, r20
 bcc:	33 27       	eor	r19, r19
 bce:	a0 0d       	add	r26, r0
 bd0:	61 1d       	adc	r22, r1
 bd2:	23 1f       	adc	r18, r19
 bd4:	84 9f       	mul	r24, r20
 bd6:	60 0d       	add	r22, r0
 bd8:	21 1d       	adc	r18, r1
 bda:	82 2f       	mov	r24, r18
 bdc:	76 2f       	mov	r23, r22
 bde:	6a 2f       	mov	r22, r26
 be0:	11 24       	eor	r1, r1
 be2:	9f 57       	subi	r25, 0x7F	; 127
 be4:	50 40       	sbci	r21, 0x00	; 0
 be6:	9a f0       	brmi	.+38     	; 0xc0e <__mulsf3_pse+0x88>
 be8:	f1 f0       	breq	.+60     	; 0xc26 <__mulsf3_pse+0xa0>
 bea:	88 23       	and	r24, r24
 bec:	4a f0       	brmi	.+18     	; 0xc00 <__mulsf3_pse+0x7a>
 bee:	ee 0f       	add	r30, r30
 bf0:	ff 1f       	adc	r31, r31
 bf2:	bb 1f       	adc	r27, r27
 bf4:	66 1f       	adc	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	a9 f7       	brne	.-22     	; 0xbea <__mulsf3_pse+0x64>
 c00:	9e 3f       	cpi	r25, 0xFE	; 254
 c02:	51 05       	cpc	r21, r1
 c04:	80 f0       	brcs	.+32     	; 0xc26 <__mulsf3_pse+0xa0>
 c06:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
 c0a:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>
 c0e:	5f 3f       	cpi	r21, 0xFF	; 255
 c10:	e4 f3       	brlt	.-8      	; 0xc0a <__mulsf3_pse+0x84>
 c12:	98 3e       	cpi	r25, 0xE8	; 232
 c14:	d4 f3       	brlt	.-12     	; 0xc0a <__mulsf3_pse+0x84>
 c16:	86 95       	lsr	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f7 95       	ror	r31
 c20:	e7 95       	ror	r30
 c22:	9f 5f       	subi	r25, 0xFF	; 255
 c24:	c1 f7       	brne	.-16     	; 0xc16 <__mulsf3_pse+0x90>
 c26:	fe 2b       	or	r31, r30
 c28:	88 0f       	add	r24, r24
 c2a:	91 1d       	adc	r25, r1
 c2c:	96 95       	lsr	r25
 c2e:	87 95       	ror	r24
 c30:	97 f9       	bld	r25, 7
 c32:	08 95       	ret

00000c34 <__fp_inf>:
 c34:	97 f9       	bld	r25, 7
 c36:	9f 67       	ori	r25, 0x7F	; 127
 c38:	80 e8       	ldi	r24, 0x80	; 128
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	08 95       	ret

00000c40 <__fp_nan>:
 c40:	9f ef       	ldi	r25, 0xFF	; 255
 c42:	80 ec       	ldi	r24, 0xC0	; 192
 c44:	08 95       	ret

00000c46 <__fp_pscA>:
 c46:	00 24       	eor	r0, r0
 c48:	0a 94       	dec	r0
 c4a:	16 16       	cp	r1, r22
 c4c:	17 06       	cpc	r1, r23
 c4e:	18 06       	cpc	r1, r24
 c50:	09 06       	cpc	r0, r25
 c52:	08 95       	ret

00000c54 <__fp_pscB>:
 c54:	00 24       	eor	r0, r0
 c56:	0a 94       	dec	r0
 c58:	12 16       	cp	r1, r18
 c5a:	13 06       	cpc	r1, r19
 c5c:	14 06       	cpc	r1, r20
 c5e:	05 06       	cpc	r0, r21
 c60:	08 95       	ret

00000c62 <__fp_round>:
 c62:	09 2e       	mov	r0, r25
 c64:	03 94       	inc	r0
 c66:	00 0c       	add	r0, r0
 c68:	11 f4       	brne	.+4      	; 0xc6e <__fp_round+0xc>
 c6a:	88 23       	and	r24, r24
 c6c:	52 f0       	brmi	.+20     	; 0xc82 <__fp_round+0x20>
 c6e:	bb 0f       	add	r27, r27
 c70:	40 f4       	brcc	.+16     	; 0xc82 <__fp_round+0x20>
 c72:	bf 2b       	or	r27, r31
 c74:	11 f4       	brne	.+4      	; 0xc7a <__fp_round+0x18>
 c76:	60 ff       	sbrs	r22, 0
 c78:	04 c0       	rjmp	.+8      	; 0xc82 <__fp_round+0x20>
 c7a:	6f 5f       	subi	r22, 0xFF	; 255
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255
 c7e:	8f 4f       	sbci	r24, 0xFF	; 255
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	08 95       	ret

00000c84 <itoa>:
 c84:	45 32       	cpi	r20, 0x25	; 37
 c86:	51 05       	cpc	r21, r1
 c88:	20 f4       	brcc	.+8      	; 0xc92 <itoa+0xe>
 c8a:	42 30       	cpi	r20, 0x02	; 2
 c8c:	10 f0       	brcs	.+4      	; 0xc92 <itoa+0xe>
 c8e:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__itoa_ncheck>
 c92:	fb 01       	movw	r30, r22
 c94:	10 82       	st	Z, r1
 c96:	cb 01       	movw	r24, r22
 c98:	08 95       	ret

00000c9a <__itoa_ncheck>:
 c9a:	bb 27       	eor	r27, r27
 c9c:	4a 30       	cpi	r20, 0x0A	; 10
 c9e:	31 f4       	brne	.+12     	; 0xcac <__itoa_ncheck+0x12>
 ca0:	99 23       	and	r25, r25
 ca2:	22 f4       	brpl	.+8      	; 0xcac <__itoa_ncheck+0x12>
 ca4:	bd e2       	ldi	r27, 0x2D	; 45
 ca6:	90 95       	com	r25
 ca8:	81 95       	neg	r24
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__utoa_common>

00000cb0 <__utoa_ncheck>:
 cb0:	bb 27       	eor	r27, r27

00000cb2 <__utoa_common>:
 cb2:	fb 01       	movw	r30, r22
 cb4:	55 27       	eor	r21, r21
 cb6:	aa 27       	eor	r26, r26
 cb8:	88 0f       	add	r24, r24
 cba:	99 1f       	adc	r25, r25
 cbc:	aa 1f       	adc	r26, r26
 cbe:	a4 17       	cp	r26, r20
 cc0:	10 f0       	brcs	.+4      	; 0xcc6 <__utoa_common+0x14>
 cc2:	a4 1b       	sub	r26, r20
 cc4:	83 95       	inc	r24
 cc6:	50 51       	subi	r21, 0x10	; 16
 cc8:	b9 f7       	brne	.-18     	; 0xcb8 <__utoa_common+0x6>
 cca:	a0 5d       	subi	r26, 0xD0	; 208
 ccc:	aa 33       	cpi	r26, 0x3A	; 58
 cce:	08 f0       	brcs	.+2      	; 0xcd2 <__utoa_common+0x20>
 cd0:	a9 5d       	subi	r26, 0xD9	; 217
 cd2:	a1 93       	st	Z+, r26
 cd4:	00 97       	sbiw	r24, 0x00	; 0
 cd6:	79 f7       	brne	.-34     	; 0xcb6 <__utoa_common+0x4>
 cd8:	b1 11       	cpse	r27, r1
 cda:	b1 93       	st	Z+, r27
 cdc:	11 92       	st	Z+, r1
 cde:	cb 01       	movw	r24, r22
 ce0:	0c 94 72 06 	jmp	0xce4	; 0xce4 <strrev>

00000ce4 <strrev>:
 ce4:	dc 01       	movw	r26, r24
 ce6:	fc 01       	movw	r30, r24
 ce8:	67 2f       	mov	r22, r23
 cea:	71 91       	ld	r23, Z+
 cec:	77 23       	and	r23, r23
 cee:	e1 f7       	brne	.-8      	; 0xce8 <strrev+0x4>
 cf0:	32 97       	sbiw	r30, 0x02	; 2
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <strrev+0x18>
 cf4:	7c 91       	ld	r23, X
 cf6:	6d 93       	st	X+, r22
 cf8:	70 83       	st	Z, r23
 cfa:	62 91       	ld	r22, -Z
 cfc:	ae 17       	cp	r26, r30
 cfe:	bf 07       	cpc	r27, r31
 d00:	c8 f3       	brcs	.-14     	; 0xcf4 <strrev+0x10>
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
