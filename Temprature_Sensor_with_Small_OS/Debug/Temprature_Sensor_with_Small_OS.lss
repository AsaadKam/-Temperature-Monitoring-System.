
Temprature_Sensor_with_Small_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001382  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800084  00800084  0000143a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea8  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf2  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001841  00000000  00000000  0000423a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  00005a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f65  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002360  00000000  00000000  00006ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_7>
      20:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
      8a:	0c 94 bf 09 	jmp	0x137e	; 0x137e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task_System_Init_3_milisecond>:
	static uint8_t su8_INIT_FLAG=1;
	static uint8_t su8_LCD_SEND_STRING_FLAG=1;
    static uint8_t su8_Task_Init_Flag=1;
	static uint8_t su8_ADC_Init_Flag=1;

	if(su8_Task_Init_Flag==1)
      92:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <su8_Task_Init_Flag.1719>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	e1 f4       	brne	.+56     	; 0xd2 <Task_System_Init_3_milisecond+0x40>
	{
		if(su8_INIT_FLAG==1)
      9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <su8_INIT_FLAG.1717>
      9e:	81 30       	cpi	r24, 0x01	; 1
      a0:	79 f4       	brne	.+30     	; 0xc0 <Task_System_Init_3_milisecond+0x2e>
		{
			LCD_init(&su8_INIT_FLAG);
      a2:	82 e6       	ldi	r24, 0x62	; 98
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	0e 94 40 01 	call	0x280	; 0x280 <LCD_init>
			if(su8_ADC_Init_Flag==1)
      aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <su8_ADC_Init_Flag.1720>
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	81 f4       	brne	.+32     	; 0xd2 <Task_System_Init_3_milisecond+0x40>
			{
				ADC_INIT(&gstr_Temp_sensorConfig);
      b2:	8c e6       	ldi	r24, 0x6C	; 108
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ADC_INIT>
/*				ADC_Start_Conversion();*/
				su8_ADC_Init_Flag=0;
      ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <su8_ADC_Init_Flag.1720>
      be:	08 95       	ret
				/**Do Nothing**/
			}
		}
		else
		{
            su8_Task_Init_Flag=0;
      c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <su8_Task_Init_Flag.1719>
			su8_INIT_FLAG=0;
      c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <su8_INIT_FLAG.1717>
			gu8_Task_ADC_Flag=1;
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_Task_ADC_Flag>
			gu8_Task_LCD_Flag=0;
      ce:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <gu8_Task_LCD_Flag>
      d2:	08 95       	ret

000000d4 <Task_ADC_1_Second>:

void Task_ADC_1_Second(void )
{
	static uint8_t su8_Task_ADC_1S_Flag=1;

	if(gu8_Task_ADC_Flag==1)
      d4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gu8_Task_ADC_Flag>
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	79 f4       	brne	.+30     	; 0xfa <Task_ADC_1_Second+0x26>
	{
		DIO_Init_Pin(24,1);
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	88 e1       	ldi	r24, 0x18	; 24
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 99 03 	call	0x732	; 0x732 <DIO_Init_Pin>
		DIO_toggle_Pin(24);		
      e8:	88 e1       	ldi	r24, 0x18	; 24
      ea:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_toggle_Pin>
		ADC_Start_Conversion();
      ee:	36 9a       	sbi	0x06, 6	; 6

		gu8_Task_LCD_Flag=1;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu8_Task_LCD_Flag>
		gu8_Task_ADC_Flag=0;
      f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <gu8_Task_ADC_Flag>
      fa:	08 95       	ret

000000fc <Task_LCD_3_milisecond>:
	static uint8_t su8_LCD_WRITE_ADC_FLAG=1;
    static uint8_t su8_LCD_WRITE_ADC_STATE=0;
	static su8_ADC_DATA_BUFFER=0;


	if(gu8_Task_LCD_Flag==1)
      fc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gu8_Task_LCD_Flag>
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	09 f0       	breq	.+2      	; 0x106 <Task_LCD_3_milisecond+0xa>
     104:	69 c0       	rjmp	.+210    	; 0x1d8 <Task_LCD_3_milisecond+0xdc>
	{
		switch(su8_LCD_WRITE_ADC_STATE)
     106:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	c1 f0       	breq	.+48     	; 0x13e <Task_LCD_3_milisecond+0x42>
     10e:	30 f0       	brcs	.+12     	; 0x11c <Task_LCD_3_milisecond+0x20>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	09 f1       	breq	.+66     	; 0x156 <Task_LCD_3_milisecond+0x5a>
     114:	83 30       	cpi	r24, 0x03	; 3
     116:	09 f4       	brne	.+2      	; 0x11a <Task_LCD_3_milisecond+0x1e>
     118:	42 c0       	rjmp	.+132    	; 0x19e <Task_LCD_3_milisecond+0xa2>
     11a:	08 95       	ret
		{   
			case 0:
			{
			      	if(su8_LCD_WRITE_ADC_FLAG==1) 
     11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	39 f4       	brne	.+14     	; 0x132 <Task_LCD_3_milisecond+0x36>
					{
						
						LCD_displayString("TEMP=",&su8_LCD_WRITE_ADC_FLAG);
     124:	60 e6       	ldi	r22, 0x60	; 96
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	8a e7       	ldi	r24, 0x7A	; 122
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_displayString>
     130:	08 95       	ret
					}
			      	else
			      	{
                        su8_LCD_WRITE_ADC_FLAG=1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				      	su8_LCD_WRITE_ADC_STATE=1;
     138:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     13c:	08 95       	ret
			}
			break;
			
			case 1:
			{
				ADC_READ(&gu32_ADC_DATA,NullPointer,NullPointer);
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	70 e0       	ldi	r23, 0x00	; 0
     146:	87 e8       	ldi	r24, 0x87	; 135
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <ADC_READ>
				su8_LCD_WRITE_ADC_STATE=2;
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
	
											
			}
			break;	
     154:	08 95       	ret

			case 2:
			{
					if(su8_LCD_WRITE_ADC_FLAG==1)	LCD_integerToString((gu32_ADC_DATA/2.049),1,5,&su8_LCD_WRITE_ADC_FLAG);
     156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	c9 f4       	brne	.+50     	; 0x190 <Task_LCD_3_milisecond+0x94>
     15e:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <gu32_ADC_DATA>
     162:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <gu32_ADC_DATA+0x1>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 c7 08 	call	0x118e	; 0x118e <__floatunsisf>
     16e:	21 ed       	ldi	r18, 0xD1	; 209
     170:	32 e2       	ldi	r19, 0x22	; 34
     172:	43 e0       	ldi	r20, 0x03	; 3
     174:	50 e4       	ldi	r21, 0x40	; 64
     176:	0e 94 26 08 	call	0x104c	; 0x104c <__divsf3>
     17a:	0e 94 98 08 	call	0x1130	; 0x1130 <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	20 e6       	ldi	r18, 0x60	; 96
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	45 e0       	ldi	r20, 0x05	; 5
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_integerToString>
     18e:	08 95       	ret
					else
					{
					
						su8_LCD_WRITE_ADC_FLAG=1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
						su8_LCD_WRITE_ADC_STATE=3;
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     19c:	08 95       	ret
			}
			break;
				
			case 3:
			{
					if(su8_LCD_WRITE_ADC_FLAG==1)	LCD_displayString("C.",&su8_LCD_WRITE_ADC_FLAG);
     19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	39 f4       	brne	.+14     	; 0x1b4 <Task_LCD_3_milisecond+0xb8>
     1a6:	60 e6       	ldi	r22, 0x60	; 96
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	80 e8       	ldi	r24, 0x80	; 128
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_displayString>
     1b2:	08 95       	ret
					else
					{
						DIO_Init_Pin(25,1);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	89 e1       	ldi	r24, 0x19	; 25
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 99 03 	call	0x732	; 0x732 <DIO_Init_Pin>
						DIO_toggle_Pin(25);
     1c0:	89 e1       	ldi	r24, 0x19	; 25
     1c2:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_toggle_Pin>

						su8_LCD_WRITE_ADC_FLAG=1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				     	su8_LCD_WRITE_ADC_STATE=1;						
     1cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
						gu8_Task_ADC_Flag=1;						
     1d0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_Task_ADC_Flag>
						gu8_Task_LCD_Flag=0;
     1d4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <gu8_Task_LCD_Flag>
     1d8:	08 95       	ret

000001da <main>:


 int main()
 {
 	/**Small Os Init**/
  	SOS_Init();
     1da:	0e 94 16 06 	call	0xc2c	; 0xc2c <SOS_Init>
 	/**Create tasks**/

 	SOS_Create(&Task_System_Init_3_milisecond,3U,SOS_Function_PERIODIC,0);
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	63 e0       	ldi	r22, 0x03	; 3
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	89 e4       	ldi	r24, 0x49	; 73
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SOS_Create>
    SOS_Create(&Task_ADC_1_Second,1000U,SOS_Function_PERIODIC,1);
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	68 ee       	ldi	r22, 0xE8	; 232
     1fc:	73 e0       	ldi	r23, 0x03	; 3
     1fe:	8a e6       	ldi	r24, 0x6A	; 106
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SOS_Create>
 	SOS_Create(&Task_LCD_3_milisecond,3U,SOS_Function_PERIODIC,2);
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	63 e0       	ldi	r22, 0x03	; 3
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	8e e7       	ldi	r24, 0x7E	; 126
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SOS_Create>

 	/*Start Small OS dispatching**/
  	SOS_Dispatch();
     21a:	0e 94 33 07 	call	0xe66	; 0xe66 <SOS_Dispatch>
 }
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	08 95       	ret

00000224 <LCD_sendCommand>:
	static uint8_t u8_LCD_clearScreen_state=1;
	if(u8_LCD_clearScreen_state) LCD_sendCommand(0x01,&u8_LCD_clearScreen_state);
	else
	{
		u8_LCD_clearScreen_state=1;
		*Copy_Pntr_u8_LCD_clearScreen_Flag=0;
     224:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <u8_Command_State.1652>
     228:	91 30       	cpi	r25, 0x01	; 1
     22a:	69 f0       	breq	.+26     	; 0x246 <LCD_sendCommand+0x22>
     22c:	28 f0       	brcs	.+10     	; 0x238 <LCD_sendCommand+0x14>
     22e:	92 30       	cpi	r25, 0x02	; 2
     230:	a1 f0       	breq	.+40     	; 0x25a <LCD_sendCommand+0x36>
     232:	93 30       	cpi	r25, 0x03	; 3
     234:	b9 f0       	breq	.+46     	; 0x264 <LCD_sendCommand+0x40>
     236:	08 95       	ret
     238:	d9 98       	cbi	0x1b, 1	; 27
     23a:	da 98       	cbi	0x1b, 2	; 27
     23c:	db 9a       	sbi	0x1b, 3	; 27
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_Command_State.1652>
     244:	08 95       	ret
     246:	9b b3       	in	r25, 0x1b	; 27
     248:	9f 70       	andi	r25, 0x0F	; 15
     24a:	80 7f       	andi	r24, 0xF0	; 240
     24c:	89 2b       	or	r24, r25
     24e:	8b bb       	out	0x1b, r24	; 27
     250:	db 98       	cbi	0x1b, 3	; 27
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_Command_State.1652>
     258:	08 95       	ret
     25a:	db 9a       	sbi	0x1b, 3	; 27
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_Command_State.1652>
     262:	08 95       	ret
     264:	2b b3       	in	r18, 0x1b	; 27
     266:	2f 70       	andi	r18, 0x0F	; 15
     268:	30 e1       	ldi	r19, 0x10	; 16
     26a:	83 9f       	mul	r24, r19
     26c:	c0 01       	movw	r24, r0
     26e:	11 24       	eor	r1, r1
     270:	82 2b       	or	r24, r18
     272:	8b bb       	out	0x1b, r24	; 27
     274:	db 98       	cbi	0x1b, 3	; 27
     276:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <u8_Command_State.1652>
     27a:	fb 01       	movw	r30, r22
     27c:	10 82       	st	Z, r1
     27e:	08 95       	ret

00000280 <LCD_init>:
     280:	fc 01       	movw	r30, r24
     282:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <u8_LCD_init_state.1642>
     286:	91 30       	cpi	r25, 0x01	; 1
     288:	e1 f0       	breq	.+56     	; 0x2c2 <LCD_init+0x42>
     28a:	28 f0       	brcs	.+10     	; 0x296 <LCD_init+0x16>
     28c:	92 30       	cpi	r25, 0x02	; 2
     28e:	51 f1       	breq	.+84     	; 0x2e4 <LCD_init+0x64>
     290:	93 30       	cpi	r25, 0x03	; 3
     292:	c9 f1       	breq	.+114    	; 0x306 <LCD_init+0x86>
     294:	08 95       	ret
     296:	8a b3       	in	r24, 0x1a	; 26
     298:	80 6f       	ori	r24, 0xF0	; 240
     29a:	8a bb       	out	0x1a, r24	; 26
     29c:	d1 9a       	sbi	0x1a, 1	; 26
     29e:	d2 9a       	sbi	0x1a, 2	; 26
     2a0:	d3 9a       	sbi	0x1a, 3	; 26
     2a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u8_LCD_command_state.1641>
     2a6:	88 23       	and	r24, r24
     2a8:	31 f0       	breq	.+12     	; 0x2b6 <LCD_init+0x36>
     2aa:	69 e6       	ldi	r22, 0x69	; 105
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_sendCommand>
     2b4:	08 95       	ret
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u8_LCD_command_state.1641>
     2bc:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_LCD_init_state.1642>
     2c0:	08 95       	ret
     2c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u8_LCD_command_state.1641>
     2c6:	88 23       	and	r24, r24
     2c8:	31 f0       	breq	.+12     	; 0x2d6 <LCD_init+0x56>
     2ca:	69 e6       	ldi	r22, 0x69	; 105
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	88 e2       	ldi	r24, 0x28	; 40
     2d0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_sendCommand>
     2d4:	08 95       	ret
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u8_LCD_command_state.1641>
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_LCD_init_state.1642>
     2e2:	08 95       	ret
     2e4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u8_LCD_command_state.1641>
     2e8:	88 23       	and	r24, r24
     2ea:	31 f0       	breq	.+12     	; 0x2f8 <LCD_init+0x78>
     2ec:	69 e6       	ldi	r22, 0x69	; 105
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	0e 94 12 01 	call	0x224	; 0x224 <LCD_sendCommand>
     2f6:	08 95       	ret
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u8_LCD_command_state.1641>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_LCD_init_state.1642>
     304:	08 95       	ret
     306:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u8_LCD_command_state.1641>
     30a:	88 23       	and	r24, r24
     30c:	31 f0       	breq	.+12     	; 0x31a <LCD_init+0x9a>
     30e:	69 e6       	ldi	r22, 0x69	; 105
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 12 01 	call	0x224	; 0x224 <LCD_sendCommand>
     318:	08 95       	ret
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u8_LCD_command_state.1641>
     320:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <u8_LCD_init_state.1642>
     324:	10 82       	st	Z, r1
     326:	08 95       	ret

00000328 <LCD_displayCharacter>:
     328:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <u8_displayCharacter.1662>
     32c:	91 30       	cpi	r25, 0x01	; 1
     32e:	69 f0       	breq	.+26     	; 0x34a <LCD_displayCharacter+0x22>
     330:	28 f0       	brcs	.+10     	; 0x33c <LCD_displayCharacter+0x14>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	a1 f0       	breq	.+40     	; 0x35e <LCD_displayCharacter+0x36>
     336:	93 30       	cpi	r25, 0x03	; 3
     338:	b9 f0       	breq	.+46     	; 0x368 <LCD_displayCharacter+0x40>
     33a:	08 95       	ret
     33c:	d9 9a       	sbi	0x1b, 1	; 27
     33e:	da 98       	cbi	0x1b, 2	; 27
     340:	db 9a       	sbi	0x1b, 3	; 27
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_displayCharacter.1662>
     348:	08 95       	ret
     34a:	9b b3       	in	r25, 0x1b	; 27
     34c:	9f 70       	andi	r25, 0x0F	; 15
     34e:	80 7f       	andi	r24, 0xF0	; 240
     350:	89 2b       	or	r24, r25
     352:	8b bb       	out	0x1b, r24	; 27
     354:	db 98       	cbi	0x1b, 3	; 27
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_displayCharacter.1662>
     35c:	08 95       	ret
     35e:	db 9a       	sbi	0x1b, 3	; 27
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_displayCharacter.1662>
     366:	08 95       	ret
     368:	2b b3       	in	r18, 0x1b	; 27
     36a:	2f 70       	andi	r18, 0x0F	; 15
     36c:	30 e1       	ldi	r19, 0x10	; 16
     36e:	83 9f       	mul	r24, r19
     370:	c0 01       	movw	r24, r0
     372:	11 24       	eor	r1, r1
     374:	82 2b       	or	r24, r18
     376:	8b bb       	out	0x1b, r24	; 27
     378:	db 98       	cbi	0x1b, 3	; 27
     37a:	fb 01       	movw	r30, r22
     37c:	10 82       	st	Z, r1
     37e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <u8_displayCharacter.1662>
     382:	08 95       	ret

00000384 <LCD_displayString>:
     384:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <u8_index_string.1672>
     388:	82 0f       	add	r24, r18
     38a:	91 1d       	adc	r25, r1
     38c:	fc 01       	movw	r30, r24
     38e:	80 81       	ld	r24, Z
     390:	88 23       	and	r24, r24
     392:	81 f0       	breq	.+32     	; 0x3b4 <LCD_displayString+0x30>
     394:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <u8_LCD_displayString_FLag.1673>
     398:	91 30       	cpi	r25, 0x01	; 1
     39a:	29 f4       	brne	.+10     	; 0x3a6 <LCD_displayString+0x22>
     39c:	68 e6       	ldi	r22, 0x68	; 104
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 94 01 	call	0x328	; 0x328 <LCD_displayCharacter>
     3a4:	08 95       	ret
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <u8_LCD_displayString_FLag.1673>
     3ac:	2f 5f       	subi	r18, 0xFF	; 255
     3ae:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <u8_index_string.1672>
     3b2:	08 95       	ret
     3b4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <u8_index_string.1672>
     3b8:	fb 01       	movw	r30, r22
     3ba:	10 82       	st	Z, r1
     3bc:	08 95       	ret

000003be <LCD_goToRowColumn>:
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	19 f0       	breq	.+6      	; 0x3c8 <LCD_goToRowColumn+0xa>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	21 f0       	breq	.+8      	; 0x3ce <LCD_goToRowColumn+0x10>
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <LCD_goToRowColumn+0x14>
     3c8:	90 e8       	ldi	r25, 0x80	; 128
     3ca:	96 0f       	add	r25, r22
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <LCD_goToRowColumn+0x14>
     3ce:	90 ec       	ldi	r25, 0xC0	; 192
     3d0:	96 0f       	add	r25, r22
     3d2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <u8_LCD_goToRowColumn_Flag.1680>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <LCD_goToRowColumn+0x28>
     3da:	67 e6       	ldi	r22, 0x67	; 103
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	89 2f       	mov	r24, r25
     3e0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_sendCommand>
     3e4:	08 95       	ret
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <u8_LCD_goToRowColumn_Flag.1680>
     3ec:	fa 01       	movw	r30, r20
     3ee:	10 82       	st	Z, r1
     3f0:	08 95       	ret

000003f2 <LCD_stringRowCol>:
     3f2:	fc 01       	movw	r30, r24
     3f4:	76 2f       	mov	r23, r22
     3f6:	64 2f       	mov	r22, r20
     3f8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <u8_LCD_stringRowCol_State.1693>
     3fc:	99 23       	and	r25, r25
     3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	91 30       	cpi	r25, 0x01	; 1
     402:	89 f0       	breq	.+34     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     404:	08 95       	ret
     406:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <u8_LCD_goToRowColumn_FLAG.1692>
     40a:	88 23       	and	r24, r24
     40c:	31 f0       	breq	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	46 e6       	ldi	r20, 0x66	; 102
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	87 2f       	mov	r24, r23
     414:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_goToRowColumn>
     418:	08 95       	ret
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <u8_LCD_goToRowColumn_FLAG.1692>
     420:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <u8_LCD_stringRowCol_State.1693>
     424:	08 95       	ret
     426:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <u8_LCD_displayString_FLAG.1691>
     42a:	88 23       	and	r24, r24
     42c:	31 f0       	breq	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42e:	65 e6       	ldi	r22, 0x65	; 101
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	cf 01       	movw	r24, r30
     434:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_displayString>
     438:	08 95       	ret
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <u8_LCD_displayString_FLAG.1691>
     440:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <u8_LCD_stringRowCol_State.1693>
     444:	f9 01       	movw	r30, r18
     446:	10 82       	st	Z, r1
     448:	08 95       	ret

0000044a <LCD_integerToString>:
/*
 * integerToString.
 */

void LCD_integerToString(uint32_t value,uint8_t row,uint8_t col,uint8_t* Copy_Pntr_u8_LCD_integerToString_Flag)
{
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	a8 97       	sbiw	r28, 0x28	; 40
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	f6 2e       	mov	r15, r22
     468:	e4 2e       	mov	r14, r20
     46a:	89 01       	movw	r16, r18
	static uint8_t u8_LCD_integerToString_FLAG=1;
	uint32_t buffer[20];
	itoa(value, buffer , 10);
     46c:	4a e0       	ldi	r20, 0x0A	; 10
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 7f 09 	call	0x12fe	; 0x12fe <itoa>
	if(u8_LCD_integerToString_FLAG==1) LCD_stringRowCol(buffer,row,col,&u8_LCD_integerToString_FLAG);
     47a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_LCD_integerToString_FLAG.1708>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	49 f4       	brne	.+18     	; 0x494 <LCD_integerToString+0x4a>
     482:	24 e6       	ldi	r18, 0x64	; 100
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4e 2d       	mov	r20, r14
     488:	6f 2d       	mov	r22, r15
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_stringRowCol>
     492:	05 c0       	rjmp	.+10     	; 0x49e <LCD_integerToString+0x54>
	else
	{
		u8_LCD_integerToString_FLAG=1;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <u8_LCD_integerToString_FLAG.1708>
		*Copy_Pntr_u8_LCD_integerToString_Flag=0;
     49a:	f8 01       	movw	r30, r16
     49c:	10 82       	st	Z, r1
	}
     49e:	a8 96       	adiw	r28, 0x28	; 40
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	08 95       	ret

000004b8 <ADC_INIT>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS PROTOTYPES ----------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/
ADC_Error_t ADC_INIT(gstrADC_Config_t*CopyPntrStr_ADC_Init_Config)
 { 
     4b8:	fc 01       	movw	r30, r24
      if(NullPointer!=CopyPntrStr_ADC_Init_Config)
     4ba:	89 2b       	or	r24, r25
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <ADC_INIT+0x8>
     4be:	83 c0       	rjmp	.+262    	; 0x5c6 <ADC_INIT+0x10e>
	  {
		    /***Enable ADC unit***/
			ADC_Unit_Enable();
     4c0:	37 98       	cbi	0x06, 7	; 6
     4c2:	37 9a       	sbi	0x06, 7	; 6

			/**** Configure the input channel for ADC****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)<ADC_Channel_0                ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)>ADC_Channel_7         ) ) 
     4c4:	80 81       	ld	r24, Z
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
     4c8:	88 30       	cpi	r24, 0x08	; 8
     4ca:	91 05       	cpc	r25, r1
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <ADC_INIT+0x1e>
			{			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_CHANNEL_CHOOSE ;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <ADC_INIT+0x2e>
			}
			else
			{

				ADC_Channel_Set(CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose);	 
     4d6:	96 b1       	in	r25, 0x06	; 6
     4d8:	80 95       	com	r24
     4da:	89 23       	and	r24, r25
     4dc:	86 b9       	out	0x06, r24	; 6
     4de:	97 b1       	in	r25, 0x07	; 7
     4e0:	80 81       	ld	r24, Z
     4e2:	89 2b       	or	r24, r25
     4e4:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC Refrence voltage****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)<ADC_Voltage_Refrence_AREF) || ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)>ADC_Voltage_Internal ) )
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	81 3c       	cpi	r24, 0xC1	; 193
     4ec:	91 05       	cpc	r25, r1
     4ee:	20 f0       	brcs	.+8      	; 0x4f8 <ADC_INIT+0x40>
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_VOLTAGE_REFRENCE_CHOOSE ;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
     4f6:	08 c0       	rjmp	.+16     	; 0x508 <ADC_INIT+0x50>
			}
			else
			{
				ADC_Voltage_Refrence_Set(CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage); 	 
     4f8:	96 b1       	in	r25, 0x06	; 6
     4fa:	80 95       	com	r24
     4fc:	89 23       	and	r24, r25
     4fe:	86 b9       	out	0x06, r24	; 6
     500:	97 b1       	in	r25, 0x07	; 7
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	89 2b       	or	r24, r25
     506:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC sampling frequency ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)<ADC_Freq_4MHZ                     ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)        >ADC_Freq_125KHZ       ) ) 
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	95 81       	ldd	r25, Z+5	; 0x05
     50c:	07 97       	sbiw	r24, 0x07	; 7
     50e:	20 f0       	brcs	.+8      	; 0x518 <ADC_INIT+0x60>
			{		
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_FREQUENCY_CHOOSE ;
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
     516:	07 c0       	rjmp	.+14     	; 0x526 <ADC_INIT+0x6e>
			}
			else
			{
				ADC_Choose_Frequency(CopyPntrStr_ADC_Init_Config->ADC_Frequency);
     518:	86 b1       	in	r24, 0x06	; 6
     51a:	88 7f       	andi	r24, 0xF8	; 248
     51c:	86 b9       	out	0x06, r24	; 6
     51e:	96 b1       	in	r25, 0x06	; 6
     520:	84 81       	ldd	r24, Z+4	; 0x04
     522:	89 2b       	or	r24, r25
     524:	86 b9       	out	0x06, r24	; 6
			}
			/**** Configure Auto Trigger if it is requested by the user ****/
			if( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Enable ) 
     526:	86 81       	ldd	r24, Z+6	; 0x06
     528:	97 81       	ldd	r25, Z+7	; 0x07
     52a:	85 31       	cpi	r24, 0x15	; 21
     52c:	91 05       	cpc	r25, r1
     52e:	19 f4       	brne	.+6      	; 0x536 <ADC_INIT+0x7e>
			{

				ADC_Auto_Trigger_Set();
     530:	35 98       	cbi	0x06, 5	; 6
     532:	35 9a       	sbi	0x06, 5	; 6
     534:	05 c0       	rjmp	.+10     	; 0x540 <ADC_INIT+0x88>
			}
			else if ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Disable ) 
     536:	46 97       	sbiw	r24, 0x16	; 22
     538:	19 f0       	breq	.+6      	; 0x540 <ADC_INIT+0x88>
			{
				/*Do Nothing*/
			}
			else
			{			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_TRIGGER_ENABLE_NOR_DISABLE;
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
			}
			/**** Configure Source of auto triggering  ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)<ADC_Auto_Trig_Source_Free_Running_mode_Bits      ) ||  (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)>ADC_No_Need_To_Trigger  )
     540:	80 85       	ldd	r24, Z+8	; 0x08
     542:	91 85       	ldd	r25, Z+9	; 0x09
     544:	82 3e       	cpi	r24, 0xE2	; 226
     546:	91 05       	cpc	r25, r1
     548:	20 f0       	brcs	.+8      	; 0x552 <ADC_INIT+0x9a>
			{			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_TRIGGER ;		 
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
     550:	0b c0       	rjmp	.+22     	; 0x568 <ADC_INIT+0xb0>
			} 
			else if((CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)!=ADC_No_Need_To_Trigger  )
     552:	81 3e       	cpi	r24, 0xE1	; 225
     554:	91 05       	cpc	r25, r1
     556:	41 f0       	breq	.+16     	; 0x568 <ADC_INIT+0xb0>
			{
		 	    ADC_Auto_Trigger_Source_Set(CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source);
     558:	90 b7       	in	r25, 0x30	; 48
     55a:	80 95       	com	r24
     55c:	89 23       	and	r24, r25
     55e:	80 bf       	out	0x30, r24	; 48
     560:	90 b7       	in	r25, 0x30	; 48
     562:	80 85       	ldd	r24, Z+8	; 0x08
     564:	89 2b       	or	r24, r25
     566:	80 bf       	out	0x30, r24	; 48
			{
			
				/*Do Nothing*/
			}
			/**** Configure Left or Right Data Register ****/
			if(  (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Left_Adjustment    )  
     568:	82 85       	ldd	r24, Z+10	; 0x0a
     56a:	93 85       	ldd	r25, Z+11	; 0x0b
     56c:	80 32       	cpi	r24, 0x20	; 32
     56e:	91 05       	cpc	r25, r1
     570:	31 f4       	brne	.+12     	; 0x57e <ADC_INIT+0xc6>
			{

				ADC_Data_Left_Adjustment_Set(); 
     572:	3d 98       	cbi	0x07, 5	; 7
     574:	3d 9a       	sbi	0x07, 5	; 7
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Left_Adjustment;
     576:	80 e2       	ldi	r24, 0x20	; 32
     578:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     57c:	09 c0       	rjmp	.+18     	; 0x590 <ADC_INIT+0xd8>
			}
			else if( (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Right_Adjustment )
     57e:	81 97       	sbiw	r24, 0x21	; 33
     580:	21 f4       	brne	.+8      	; 0x58a <ADC_INIT+0xd2>
			{
		 
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Right_Adjustment;
     582:	81 e2       	ldi	r24, 0x21	; 33
     584:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     588:	03 c0       	rjmp	.+6      	; 0x590 <ADC_INIT+0xd8>
			}	
			else
			{
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_LEFT_NOR_RIGHT;			 
     58a:	87 e0       	ldi	r24, 0x07	; 7
     58c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
			}
			
			/**Configure Execution Way**/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)<ADC_Executed_By_Interrupt      ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)>ADC_Executed_By_Event_Driven  ) )
     590:	84 85       	ldd	r24, Z+12	; 0x0c
     592:	95 85       	ldd	r25, Z+13	; 0x0d
     594:	9c 01       	movw	r18, r24
     596:	22 52       	subi	r18, 0x22	; 34
     598:	31 09       	sbc	r19, r1
     59a:	24 30       	cpi	r18, 0x04	; 4
     59c:	31 05       	cpc	r19, r1
     59e:	20 f0       	brcs	.+8      	; 0x5a8 <ADC_INIT+0xf0>
			{			
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_EXECUTION_METHOD ;
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
     5a6:	12 c0       	rjmp	.+36     	; 0x5cc <ADC_INIT+0x114>
			}
			else if(  CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Interrupt || CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Event_Driven)
     5a8:	82 32       	cpi	r24, 0x22	; 34
     5aa:	91 05       	cpc	r25, r1
     5ac:	19 f0       	breq	.+6      	; 0x5b4 <ADC_INIT+0xfc>
     5ae:	85 32       	cpi	r24, 0x25	; 37
     5b0:	91 05       	cpc	r25, r1
     5b2:	31 f4       	brne	.+12     	; 0x5c0 <ADC_INIT+0x108>
			{
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
     5b4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <sgu8_ADC_Execution_Way>
				EnableGeneralInterrupt();
     5b8:	8f b7       	in	r24, 0x3f	; 63
     5ba:	80 68       	ori	r24, 0x80	; 128
     5bc:	8f bf       	out	0x3f, r24	; 63
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <ADC_INIT+0x114>

			}
			else 
			{

				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
     5c0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <sgu8_ADC_Execution_Way>
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <ADC_INIT+0x114>
     		}
	}
	else
	{
		sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_Config_Pointer_Point_To_NULL;
     5c6:	89 e0       	ldi	r24, 0x09	; 9
     5c8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <sgADC_Error_ADC_INIT_API>
	}
		 return  sgADC_Error_ADC_INIT_API;     
 }
     5cc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgADC_Error_ADC_INIT_API>
     5d0:	08 95       	ret

000005d2 <ADC_READ>:
 
ADC_Error_t ADC_READ(uint32_t* Copyu32_ADC_Value,PntrToFunc_t Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR,uint8_t* Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG)
 {
     5d2:	fc 01       	movw	r30, r24
     static uint8_t Event_Driven_1st_time=1;
	 static uint8_t sgu8_ADC_READ_STATE=0;
	 static uint32_t su32_Counter=0;

     /*Check that there is no error occur while initialization*/	 
	 if(sgADC_Error_ADC_INIT_API==ADC_INIT_API_NO_ERROR)
     5d4:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <sgADC_Error_ADC_INIT_API>
     5d8:	91 11       	cpse	r25, r1
     5da:	6b c0       	rjmp	.+214    	; 0x6b2 <ADC_READ+0xe0>
	 { 	
	  	 
         /**Check If the execution way is done by polling **/ 	
		 if(sgu8_ADC_Execution_Way==ADC_Executed_By_Polling)
     5dc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <sgu8_ADC_Execution_Way>
     5e0:	83 32       	cpi	r24, 0x23	; 35
     5e2:	e9 f4       	brne	.+58     	; 0x61e <ADC_READ+0x4c>
		 {

			 ADC_Start_Conversion();
     5e4:	36 9a       	sbi	0x06, 6	; 6
			 while(ADC_Read_Interrupt_Flag_State()==0);
     5e6:	34 9b       	sbis	0x06, 4	; 6
     5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <ADC_READ+0x14>

             /**Check If the data is left adjusted or right**/ 			 
			 if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     5ea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     5ee:	80 32       	cpi	r24, 0x20	; 32
     5f0:	79 f4       	brne	.+30     	; 0x610 <ADC_READ+0x3e>
			 {				
				  *Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     5f2:	85 b1       	in	r24, 0x05	; 5
     5f4:	24 b1       	in	r18, 0x04	; 4
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	22 95       	swap	r18
     602:	26 95       	lsr	r18
     604:	26 95       	lsr	r18
     606:	23 70       	andi	r18, 0x03	; 3
     608:	82 2b       	or	r24, r18
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
     60e:	54 c0       	rjmp	.+168    	; 0x6b8 <ADC_READ+0xe6>
			 }
			 else
			 {
					u32_ADC_LOW_VALUE = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
     610:	84 b1       	in	r24, 0x04	; 4
					u32_ADC_TOTAL = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
     612:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=u32_ADC_TOTAL|u32_ADC_LOW_VALUE ;
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	92 2b       	or	r25, r18
     618:	91 83       	std	Z+1, r25	; 0x01
     61a:	80 83       	st	Z, r24
     61c:	4d c0       	rjmp	.+154    	; 0x6b8 <ADC_READ+0xe6>
		 }
         /**Check If the execution way is done by interrupt or event or time driven **/ 		 
		 else
		 {
			 
			 if(sgu8_ADC_Execution_Way!=ADC_Executed_By_Time_Driven)
     61e:	84 32       	cpi	r24, 0x24	; 36
     620:	71 f1       	breq	.+92     	; 0x67e <ADC_READ+0xac>
			 {

				if(Event_Driven_1st_time==1)
     622:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Event_Driven_1st_time.1633>
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	29 f4       	brne	.+10     	; 0x634 <ADC_READ+0x62>
				{
					ADC_Interrupt_Enable();
     62a:	33 98       	cbi	0x06, 3	; 6
     62c:	33 9a       	sbi	0x06, 3	; 6
					ADC_Start_Conversion();
     62e:	36 9a       	sbi	0x06, 6	; 6
					Event_Driven_1st_time=0;
     630:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Event_Driven_1st_time.1633>
				}
			
			    /*while(ADC_Read_Interrupt_Flag_State()==0);*/
				/**Check If PntrToFunction does'nt point to NullPointer**/
				if(NullPointer!=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR)
     634:	61 15       	cp	r22, r1
     636:	71 05       	cpc	r23, r1
     638:	29 f0       	breq	.+10     	; 0x644 <ADC_READ+0x72>
				{
				 
					sgPntrToFun_ADC_ISR=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR;
     63a:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <sgPntrToFun_ADC_ISR+0x1>
     63e:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <sgPntrToFun_ADC_ISR>
     642:	03 c0       	rjmp	.+6      	; 0x64a <ADC_READ+0x78>
				}
				else
				{
					sgADC_Error_ADC_READ_API=ADC_READ_CALL_BACK_POITNER_IS_NULL;
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sgADC_Error_ADC_READ_API>
				}
				/**Check If the data is left adjusted or right**/
				if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     64a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     64e:	80 32       	cpi	r24, 0x20	; 32
     650:	79 f4       	brne	.+30     	; 0x670 <ADC_READ+0x9e>
				{
						             
					*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     652:	85 b1       	in	r24, 0x05	; 5
     654:	24 b1       	in	r18, 0x04	; 4
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	22 95       	swap	r18
     662:	26 95       	lsr	r18
     664:	26 95       	lsr	r18
     666:	23 70       	andi	r18, 0x03	; 3
     668:	82 2b       	or	r24, r18
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
     66e:	24 c0       	rjmp	.+72     	; 0x6b8 <ADC_READ+0xe6>
				}
				else
				{
					u32_ADC_LOW_VALUE = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
     670:	84 b1       	in	r24, 0x04	; 4
					u32_ADC_TOTAL = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
     672:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=u32_ADC_TOTAL|u32_ADC_LOW_VALUE ;
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	92 2b       	or	r25, r18
     678:	91 83       	std	Z+1, r25	; 0x01
     67a:	80 83       	st	Z, r24
     67c:	1d c0       	rjmp	.+58     	; 0x6b8 <ADC_READ+0xe6>
					{     */     
						
/*  						SET_BIT(ADC_CNTRL_STATUS_REG,ADC_Interrupt_flag_Bit);*/

                      		/**Check If the data is left adjusted or right**/
                      		if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     67e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     682:	80 32       	cpi	r24, 0x20	; 32
     684:	79 f4       	brne	.+30     	; 0x6a4 <ADC_READ+0xd2>
                      		{
	                      		*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     686:	85 b1       	in	r24, 0x05	; 5
     688:	24 b1       	in	r18, 0x04	; 4
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	22 95       	swap	r18
     696:	26 95       	lsr	r18
     698:	26 95       	lsr	r18
     69a:	23 70       	andi	r18, 0x03	; 3
     69c:	82 2b       	or	r24, r18
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <ADC_READ+0xe6>
                      		{
/*
								DIO_Init_Pin(23,1);
								DIO_toggle_Pin(23);
								  */
								u32_ADC_LOW_VALUE = (uint32_t)ADC_DATA_LOW_REG;		        /* Read lower byte*/
     6a4:	84 b1       	in	r24, 0x04	; 4
								u32_ADC_TOTAL     = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/						
     6a6:	25 b1       	in	r18, 0x05	; 5
     6a8:	90 e0       	ldi	r25, 0x00	; 0
	
								u32_ADC_TOTAL=u32_ADC_TOTAL|u32_ADC_LOW_VALUE;						
							    *Copyu32_ADC_Value=u32_ADC_TOTAL;	
     6aa:	92 2b       	or	r25, r18
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <ADC_READ+0xe6>
			 } 
		 }
	 }
	 else
	 {
		 sgADC_Error_ADC_READ_API=ADC_READ_ERROR_Due_To_ADC_INIT_ERROR;
     6b2:	8f e1       	ldi	r24, 0x1F	; 31
     6b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sgADC_Error_ADC_READ_API>
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
     6b8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sgADC_Error_ADC_READ_API>
     6bc:	08 95       	ret

000006be <__vector_16>:
 
ADC_ISR_CODE()
{
     6be:	1f 92       	push	r1
     6c0:	0f 92       	push	r0
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	0f 92       	push	r0
     6c6:	11 24       	eor	r1, r1
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
	if(NullPointer!=sgPntrToFun_ADC_ISR)
     6e0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sgPntrToFun_ADC_ISR>
     6e4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sgPntrToFun_ADC_ISR+0x1>
     6e8:	89 2b       	or	r24, r25
     6ea:	91 f0       	breq	.+36     	; 0x710 <__vector_16+0x52>
	{
			sgPntrToFun_ADC_ISR();
     6ec:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <sgPntrToFun_ADC_ISR>
     6f0:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <sgPntrToFun_ADC_ISR+0x1>
     6f4:	09 95       	icall
			DIO_Init_Pin(26,1);
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	8a e1       	ldi	r24, 0x1A	; 26
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 99 03 	call	0x732	; 0x732 <DIO_Init_Pin>
			DIO_toggle_Pin(26);
     702:	8a e1       	ldi	r24, 0x1A	; 26
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_toggle_Pin>
            SET_BIT(TIMER_EVENT_FLAGS_REG,2);
     70a:	88 b7       	in	r24, 0x38	; 56
     70c:	84 60       	ori	r24, 0x04	; 4
     70e:	88 bf       	out	0x38, r24	; 56
	{
		/*Do Nothing*/
	}

	
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <DIO_Init_Pin>:
		default :
		return DIO_ERROR_NOK;
		break;
		}
return DIO_ERROR_OK;
}
     732:	80 32       	cpi	r24, 0x20	; 32
     734:	08 f0       	brcs	.+2      	; 0x738 <DIO_Init_Pin+0x6>
     736:	8f c0       	rjmp	.+286    	; 0x856 <DIO_Init_Pin+0x124>
     738:	98 2f       	mov	r25, r24
     73a:	97 70       	andi	r25, 0x07	; 7
     73c:	86 95       	lsr	r24
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	8f 5b       	subi	r24, 0xBF	; 191
     744:	82 34       	cpi	r24, 0x42	; 66
     746:	51 f1       	breq	.+84     	; 0x79c <DIO_Init_Pin+0x6a>
     748:	18 f4       	brcc	.+6      	; 0x750 <DIO_Init_Pin+0x1e>
     74a:	81 34       	cpi	r24, 0x41	; 65
     74c:	41 f0       	breq	.+16     	; 0x75e <DIO_Init_Pin+0x2c>
     74e:	85 c0       	rjmp	.+266    	; 0x85a <DIO_Init_Pin+0x128>
     750:	83 34       	cpi	r24, 0x43	; 67
     752:	09 f4       	brne	.+2      	; 0x756 <DIO_Init_Pin+0x24>
     754:	42 c0       	rjmp	.+132    	; 0x7da <DIO_Init_Pin+0xa8>
     756:	84 34       	cpi	r24, 0x44	; 68
     758:	09 f4       	brne	.+2      	; 0x75c <DIO_Init_Pin+0x2a>
     75a:	5e c0       	rjmp	.+188    	; 0x818 <DIO_Init_Pin+0xe6>
     75c:	7e c0       	rjmp	.+252    	; 0x85a <DIO_Init_Pin+0x128>
     75e:	61 11       	cpse	r22, r1
     760:	0f c0       	rjmp	.+30     	; 0x780 <DIO_Init_Pin+0x4e>
     762:	4a b3       	in	r20, 0x1a	; 26
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	b9 01       	movw	r22, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_Init_Pin+0x3e>
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	9a 95       	dec	r25
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_Init_Pin+0x3a>
     774:	cb 01       	movw	r24, r22
     776:	80 95       	com	r24
     778:	84 23       	and	r24, r20
     77a:	8a bb       	out	0x1a, r24	; 26
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret
     780:	4a b3       	in	r20, 0x1a	; 26
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	b9 01       	movw	r22, r18
     788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_Init_Pin+0x5c>
     78a:	66 0f       	add	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	9a 95       	dec	r25
     790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_Init_Pin+0x58>
     792:	cb 01       	movw	r24, r22
     794:	84 2b       	or	r24, r20
     796:	8a bb       	out	0x1a, r24	; 26
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 95       	ret
     79c:	61 11       	cpse	r22, r1
     79e:	0f c0       	rjmp	.+30     	; 0x7be <DIO_Init_Pin+0x8c>
     7a0:	47 b3       	in	r20, 0x17	; 23
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	b9 01       	movw	r22, r18
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_Init_Pin+0x7c>
     7aa:	66 0f       	add	r22, r22
     7ac:	77 1f       	adc	r23, r23
     7ae:	9a 95       	dec	r25
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_Init_Pin+0x78>
     7b2:	cb 01       	movw	r24, r22
     7b4:	80 95       	com	r24
     7b6:	84 23       	and	r24, r20
     7b8:	87 bb       	out	0x17, r24	; 23
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	08 95       	ret
     7be:	47 b3       	in	r20, 0x17	; 23
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	b9 01       	movw	r22, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_Init_Pin+0x9a>
     7c8:	66 0f       	add	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	9a 95       	dec	r25
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_Init_Pin+0x96>
     7d0:	cb 01       	movw	r24, r22
     7d2:	84 2b       	or	r24, r20
     7d4:	87 bb       	out	0x17, r24	; 23
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	08 95       	ret
     7da:	61 11       	cpse	r22, r1
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <DIO_Init_Pin+0xca>
     7de:	44 b3       	in	r20, 0x14	; 20
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	b9 01       	movw	r22, r18
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_Init_Pin+0xba>
     7e8:	66 0f       	add	r22, r22
     7ea:	77 1f       	adc	r23, r23
     7ec:	9a 95       	dec	r25
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_Init_Pin+0xb6>
     7f0:	cb 01       	movw	r24, r22
     7f2:	80 95       	com	r24
     7f4:	84 23       	and	r24, r20
     7f6:	84 bb       	out	0x14, r24	; 20
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 95       	ret
     7fc:	44 b3       	in	r20, 0x14	; 20
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	b9 01       	movw	r22, r18
     804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_Init_Pin+0xd8>
     806:	66 0f       	add	r22, r22
     808:	77 1f       	adc	r23, r23
     80a:	9a 95       	dec	r25
     80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_Init_Pin+0xd4>
     80e:	cb 01       	movw	r24, r22
     810:	84 2b       	or	r24, r20
     812:	84 bb       	out	0x14, r24	; 20
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
     818:	61 11       	cpse	r22, r1
     81a:	0f c0       	rjmp	.+30     	; 0x83a <DIO_Init_Pin+0x108>
     81c:	41 b3       	in	r20, 0x11	; 17
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	b9 01       	movw	r22, r18
     824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_Init_Pin+0xf8>
     826:	66 0f       	add	r22, r22
     828:	77 1f       	adc	r23, r23
     82a:	9a 95       	dec	r25
     82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_Init_Pin+0xf4>
     82e:	cb 01       	movw	r24, r22
     830:	80 95       	com	r24
     832:	84 23       	and	r24, r20
     834:	81 bb       	out	0x11, r24	; 17
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	08 95       	ret
     83a:	41 b3       	in	r20, 0x11	; 17
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	b9 01       	movw	r22, r18
     842:	02 c0       	rjmp	.+4      	; 0x848 <DIO_Init_Pin+0x116>
     844:	66 0f       	add	r22, r22
     846:	77 1f       	adc	r23, r23
     848:	9a 95       	dec	r25
     84a:	e2 f7       	brpl	.-8      	; 0x844 <DIO_Init_Pin+0x112>
     84c:	cb 01       	movw	r24, r22
     84e:	84 2b       	or	r24, r20
     850:	81 bb       	out	0x11, r24	; 17
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	08 95       	ret
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	08 95       	ret

0000085e <DIO_toggle_Pin>:
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     85e:	80 32       	cpi	r24, 0x20	; 32
     860:	08 f0       	brcs	.+2      	; 0x864 <__stack+0x5>
     862:	49 c0       	rjmp	.+146    	; 0x8f6 <__stack+0x97>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
     864:	98 2f       	mov	r25, r24
     866:	97 70       	andi	r25, 0x07	; 7
	}
	
	switch(por)
     868:	86 95       	lsr	r24
     86a:	86 95       	lsr	r24
     86c:	86 95       	lsr	r24
     86e:	8f 5b       	subi	r24, 0xBF	; 191
     870:	82 34       	cpi	r24, 0x42	; 66
     872:	b9 f0       	breq	.+46     	; 0x8a2 <__stack+0x43>
     874:	18 f4       	brcc	.+6      	; 0x87c <__stack+0x1d>
     876:	81 34       	cpi	r24, 0x41	; 65
     878:	31 f0       	breq	.+12     	; 0x886 <__stack+0x27>
     87a:	3f c0       	rjmp	.+126    	; 0x8fa <__stack+0x9b>
     87c:	83 34       	cpi	r24, 0x43	; 67
     87e:	f9 f0       	breq	.+62     	; 0x8be <__stack+0x5f>
     880:	84 34       	cpi	r24, 0x44	; 68
     882:	59 f1       	breq	.+86     	; 0x8da <__stack+0x7b>
     884:	3a c0       	rjmp	.+116    	; 0x8fa <__stack+0x9b>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
     886:	4b b3       	in	r20, 0x1b	; 27
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	b9 01       	movw	r22, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	66 0f       	add	r22, r22
     892:	77 1f       	adc	r23, r23
     894:	9a 95       	dec	r25
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	cb 01       	movw	r24, r22
     89a:	84 27       	eor	r24, r20
     89c:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     89e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
     8a0:	08 95       	ret
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
     8a2:	48 b3       	in	r20, 0x18	; 24
     8a4:	21 e0       	ldi	r18, 0x01	; 1
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	b9 01       	movw	r22, r18
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
     8ac:	66 0f       	add	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	9a 95       	dec	r25
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
     8b4:	cb 01       	movw	r24, r22
     8b6:	84 27       	eor	r24, r20
     8b8:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
     8bc:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
     8be:	45 b3       	in	r20, 0x15	; 21
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	b9 01       	movw	r22, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	66 0f       	add	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	9a 95       	dec	r25
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	cb 01       	movw	r24, r22
     8d2:	84 27       	eor	r24, r20
     8d4:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
     8d8:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
     8da:	42 b3       	in	r20, 0x12	; 18
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b9 01       	movw	r22, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
     8e4:	66 0f       	add	r22, r22
     8e6:	77 1f       	adc	r23, r23
     8e8:	9a 95       	dec	r25
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
     8ec:	cb 01       	movw	r24, r22
     8ee:	84 27       	eor	r24, r20
     8f0:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
     8f4:	08 95       	ret
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	08 95       	ret
			 break;
		case 'G':TOGGLE_BIT(PORTG,pin);
			 break;
#endif
		default :
		return DIO_ERROR_NOK;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	return DIO_ERROR_OK;
}
     8fc:	08 95       	ret

000008fe <Timer_Init>:
		}
		break;
	}
	
	return TIMER_ERROR_OK;
}
     8fe:	fc 01       	movw	r30, r24
     900:	89 2b       	or	r24, r25
     902:	09 f4       	brne	.+2      	; 0x906 <Timer_Init+0x8>
     904:	47 c0       	rjmp	.+142    	; 0x994 <Timer_Init+0x96>
     906:	90 81       	ld	r25, Z
     908:	29 2f       	mov	r18, r25
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	d9 01       	movw	r26, r18
     90e:	a5 56       	subi	r26, 0x65	; 101
     910:	bf 4f       	sbci	r27, 0xFF	; 255
     912:	8c 91       	ld	r24, X
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	09 f4       	brne	.+2      	; 0x91a <Timer_Init+0x1c>
     918:	48 c0       	rjmp	.+144    	; 0x9aa <Timer_Init+0xac>
     91a:	93 30       	cpi	r25, 0x03	; 3
     91c:	e8 f5       	brcc	.+122    	; 0x998 <Timer_Init+0x9a>
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	e0 f5       	brcc	.+120    	; 0x99c <Timer_Init+0x9e>
     924:	43 81       	ldd	r20, Z+3	; 0x03
     926:	42 30       	cpi	r20, 0x02	; 2
     928:	d8 f5       	brcc	.+118    	; 0x9a0 <Timer_Init+0xa2>
     92a:	51 81       	ldd	r21, Z+1	; 0x01
     92c:	58 30       	cpi	r21, 0x08	; 8
     92e:	d0 f5       	brcc	.+116    	; 0x9a4 <Timer_Init+0xa6>
     930:	d9 01       	movw	r26, r18
     932:	a5 56       	subi	r26, 0x65	; 101
     934:	bf 4f       	sbci	r27, 0xFF	; 255
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	6c 93       	st	X, r22
     93a:	d9 01       	movw	r26, r18
     93c:	a2 56       	subi	r26, 0x62	; 98
     93e:	bf 4f       	sbci	r27, 0xFF	; 255
     940:	8c 93       	st	X, r24
     942:	d9 01       	movw	r26, r18
     944:	af 55       	subi	r26, 0x5F	; 95
     946:	bf 4f       	sbci	r27, 0xFF	; 255
     948:	4c 93       	st	X, r20
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	d9 f4       	brne	.+54     	; 0x984 <Timer_Init+0x86>
     94e:	91 30       	cpi	r25, 0x01	; 1
     950:	61 f0       	breq	.+24     	; 0x96a <Timer_Init+0x6c>
     952:	18 f0       	brcs	.+6      	; 0x95a <Timer_Init+0x5c>
     954:	92 30       	cpi	r25, 0x02	; 2
     956:	99 f0       	breq	.+38     	; 0x97e <Timer_Init+0x80>
     958:	08 95       	ret
     95a:	83 b7       	in	r24, 0x33	; 51
     95c:	88 60       	ori	r24, 0x08	; 8
     95e:	83 bf       	out	0x33, r24	; 51
     960:	93 b7       	in	r25, 0x33	; 51
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	89 2b       	or	r24, r25
     966:	83 bf       	out	0x33, r24	; 51
     968:	0d c0       	rjmp	.+26     	; 0x984 <Timer_Init+0x86>
     96a:	8f b5       	in	r24, 0x2f	; 47
     96c:	8f bd       	out	0x2f, r24	; 47
     96e:	8e b5       	in	r24, 0x2e	; 46
     970:	88 60       	ori	r24, 0x08	; 8
     972:	8e bd       	out	0x2e, r24	; 46
     974:	9e b5       	in	r25, 0x2e	; 46
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	89 2b       	or	r24, r25
     97a:	8e bd       	out	0x2e, r24	; 46
     97c:	03 c0       	rjmp	.+6      	; 0x984 <Timer_Init+0x86>
     97e:	85 b5       	in	r24, 0x25	; 37
     980:	58 2b       	or	r21, r24
     982:	55 bd       	out	0x25, r21	; 37
     984:	83 81       	ldd	r24, Z+3	; 0x03
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	79 f4       	brne	.+30     	; 0x9a8 <Timer_Init+0xaa>
     98a:	8f b7       	in	r24, 0x3f	; 63
     98c:	80 68       	ori	r24, 0x80	; 128
     98e:	8f bf       	out	0x3f, r24	; 63
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 95       	ret
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 95       	ret
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	08 95       	ret
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	08 95       	ret
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret

000009ac <Timer_Start>:
     9ac:	88 23       	and	r24, r24
     9ae:	21 f0       	breq	.+8      	; 0x9b8 <Timer_Start+0xc>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <Timer_Start+0xa>
     9b4:	7d c0       	rjmp	.+250    	; 0xab0 <Timer_Start+0x104>
     9b6:	80 c0       	rjmp	.+256    	; 0xab8 <Timer_Start+0x10c>
     9b8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <sgau8_TIMERMode>
     9bc:	91 30       	cpi	r25, 0x01	; 1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <Timer_Start+0x16>
     9c0:	5c c0       	rjmp	.+184    	; 0xa7a <Timer_Start+0xce>
     9c2:	91 11       	cpse	r25, r1
     9c4:	2c c0       	rjmp	.+88     	; 0xa1e <Timer_Start+0x72>
     9c6:	83 b7       	in	r24, 0x33	; 51
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	83 bf       	out	0x33, r24	; 51
     9cc:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <sgau8_Interrupt_Mode>
     9d0:	81 11       	cpse	r24, r1
     9d2:	14 c0       	rjmp	.+40     	; 0x9fc <Timer_Start+0x50>
     9d4:	61 15       	cp	r22, r1
     9d6:	71 05       	cpc	r23, r1
     9d8:	09 f4       	brne	.+2      	; 0x9dc <Timer_Start+0x30>
     9da:	77 c0       	rjmp	.+238    	; 0xaca <Timer_Start+0x11e>
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	98 b7       	in	r25, 0x38	; 56
     9e4:	92 60       	ori	r25, 0x02	; 2
     9e6:	98 bf       	out	0x38, r25	; 56
     9e8:	4c bf       	out	0x3c, r20	; 60
     9ea:	08 b6       	in	r0, 0x38	; 56
     9ec:	01 fe       	sbrs	r0, 1
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <Timer_Start+0x3e>
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	62 17       	cp	r22, r18
     9f6:	73 07       	cpc	r23, r19
     9f8:	a1 f7       	brne	.-24     	; 0x9e2 <Timer_Start+0x36>
     9fa:	08 95       	ret
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <Timer_Start+0x56>
     a00:	5d c0       	rjmp	.+186    	; 0xabc <Timer_Start+0x110>
     a02:	88 b7       	in	r24, 0x38	; 56
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	88 bf       	out	0x38, r24	; 56
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	8c bf       	out	0x3c, r24	; 60
     a0c:	89 b7       	in	r24, 0x39	; 57
     a0e:	82 60       	ori	r24, 0x02	; 2
     a10:	89 bf       	out	0x39, r24	; 57
     a12:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     a16:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <sgpfun_TIMER0_CMP_ISR_Function>
     a1a:	89 2f       	mov	r24, r25
     a1c:	08 95       	ret
     a1e:	92 30       	cpi	r25, 0x02	; 2
     a20:	09 f0       	breq	.+2      	; 0xa24 <Timer_Start+0x78>
     a22:	4e c0       	rjmp	.+156    	; 0xac0 <Timer_Start+0x114>
     a24:	83 b7       	in	r24, 0x33	; 51
     a26:	83 60       	ori	r24, 0x03	; 3
     a28:	83 bf       	out	0x33, r24	; 51
     a2a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <sgau8_Interrupt_Mode>
     a2e:	81 11       	cpse	r24, r1
     a30:	14 c0       	rjmp	.+40     	; 0xa5a <Timer_Start+0xae>
     a32:	61 15       	cp	r22, r1
     a34:	71 05       	cpc	r23, r1
     a36:	09 f4       	brne	.+2      	; 0xa3a <Timer_Start+0x8e>
     a38:	48 c0       	rjmp	.+144    	; 0xaca <Timer_Start+0x11e>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	4d e7       	ldi	r20, 0x7D	; 125
     a40:	98 b7       	in	r25, 0x38	; 56
     a42:	92 60       	ori	r25, 0x02	; 2
     a44:	98 bf       	out	0x38, r25	; 56
     a46:	4c bf       	out	0x3c, r20	; 60
     a48:	08 b6       	in	r0, 0x38	; 56
     a4a:	01 fe       	sbrs	r0, 1
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <Timer_Start+0x9c>
     a4e:	2f 5f       	subi	r18, 0xFF	; 255
     a50:	3f 4f       	sbci	r19, 0xFF	; 255
     a52:	62 17       	cp	r22, r18
     a54:	73 07       	cpc	r23, r19
     a56:	a1 f7       	brne	.-24     	; 0xa40 <Timer_Start+0x94>
     a58:	08 95       	ret
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	99 f5       	brne	.+102    	; 0xac4 <Timer_Start+0x118>
     a5e:	88 b7       	in	r24, 0x38	; 56
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	88 bf       	out	0x38, r24	; 56
     a64:	8d e7       	ldi	r24, 0x7D	; 125
     a66:	8c bf       	out	0x3c, r24	; 60
     a68:	89 b7       	in	r24, 0x39	; 57
     a6a:	82 60       	ori	r24, 0x02	; 2
     a6c:	89 bf       	out	0x39, r24	; 57
     a6e:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     a72:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <sgpfun_TIMER0_CMP_ISR_Function>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	08 95       	ret
     a7a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <sgau8_Interrupt_Mode>
     a7e:	81 11       	cpse	r24, r1
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <Timer_Start+0xe6>
     a82:	98 b7       	in	r25, 0x38	; 56
     a84:	92 60       	ori	r25, 0x02	; 2
     a86:	98 bf       	out	0x38, r25	; 56
     a88:	6c bf       	out	0x3c, r22	; 60
     a8a:	08 b6       	in	r0, 0x38	; 56
     a8c:	01 fe       	sbrs	r0, 1
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <Timer_Start+0xde>
     a90:	08 95       	ret
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	c9 f4       	brne	.+50     	; 0xac8 <Timer_Start+0x11c>
     a96:	88 b7       	in	r24, 0x38	; 56
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	88 bf       	out	0x38, r24	; 56
     a9c:	6c bf       	out	0x3c, r22	; 60
     a9e:	89 b7       	in	r24, 0x39	; 57
     aa0:	82 60       	ori	r24, 0x02	; 2
     aa2:	89 bf       	out	0x39, r24	; 57
     aa4:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     aa8:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <sgpfun_TIMER0_CMP_ISR_Function>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
     ab0:	7b bd       	out	0x2b, r23	; 43
     ab2:	6a bd       	out	0x2a, r22	; 42
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 95       	ret
     abc:	89 2f       	mov	r24, r25
     abe:	08 95       	ret
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 95       	ret
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 95       	ret

00000acc <__vector_10>:

Timer_ISR(TIMER0_COMP_VECTOR)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
     aee:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <sgpfun_TIMER0_CMP_ISR_Function>
     af2:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     af6:	09 95       	icall
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_7>:

Timer_ISR(TIMER1_COMPA_VECTOR)
{
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31

	sgpfun_TIMER1_CMPA_ISR_Function();
     b3c:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <sgpfun_TIMER1_CMPA_ISR_Function>
     b40:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
     b44:	09 95       	icall
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	sgpfun_TIMER1_CMPB_ISR_Function();
     b8a:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <sgpfun_TIMER1_CMPB_ISR_Function>
     b8e:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <sgpfun_TIMER1_CMPB_ISR_Function+0x1>
     b92:	09 95       	icall
}
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_4>:
Timer_ISR(TIMER2_COMP_VECTOR)
{
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
     bd8:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <sgpfun_TIMER2_CMP_ISR_Function>
     bdc:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <sgpfun_TIMER2_CMP_ISR_Function+0x1>
     be0:	09 95       	icall
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <SOS_Function_ISR>:

/***Function that will be passed to Timer ISR from SOS***/

void  SOS_Function_ISR(void)
{
    sgu64_SOS_Timer_ISR_Count++;
     c04:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <sgu64_SOS_Timer_ISR_Count>
     c08:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <sgu64_SOS_Timer_ISR_Count+0x1>
     c0c:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <sgu64_SOS_Timer_ISR_Count+0x2>
     c10:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <sgu64_SOS_Timer_ISR_Count+0x3>
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	a1 1d       	adc	r26, r1
     c18:	b1 1d       	adc	r27, r1
     c1a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <sgu64_SOS_Timer_ISR_Count>
     c1e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <sgu64_SOS_Timer_ISR_Count+0x1>
     c22:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <sgu64_SOS_Timer_ISR_Count+0x2>
     c26:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <sgu64_SOS_Timer_ISR_Count+0x3>
     c2a:	08 95       	ret

00000c2c <SOS_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/
/**SOS initalization happens by this API below**/
/** set configuration of timer OS      **/
SOS_Error_t SOS_Init()
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <SOS_Init+0x6>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <SOS_Init+0x8>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
	StrSOS_Configuration_t strSOS_configuration;
	
	strSOS_configuration.SOS_TIMER_IDS=SOS_TIMER_ID0;
     c38:	19 82       	std	Y+1, r1	; 0x01
	/*******************************************
	 *  Clock prescaler is adjusted internally *
	 *           no need to enter it           *  
	 *******************************************/
	strSOS_configuration.SOS_TIMER_PSC=SOS_NO_NEED_PSC;
     c3a:	1a 82       	std	Y+2, r1	; 0x02
	strSOS_configuration.SOS_TIMER_MODE=SOS_TIMER_MODE_MILIE;
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	8b 83       	std	Y+3, r24	; 0x03
	strSOS_configuration.SOS_TIMER_INT_Mode=SOS_TIMER_INT;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	8c 83       	std	Y+4, r24	; 0x04
	
	Timer_Init(&strSOS_configuration);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Timer_Init>
	
	return SOS_Error_OK;
}
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <SOS_Create>:

/***Creat SOS tasks by By initalize array of task of SOS ****/ 
SOS_Error_t SOS_Create(PntrToFunc_t PntrToFunc_Copy_SOS_Start,uint16_t u16_Copy_Periodicity_MS_SOS_Start,uint16_t u16_Copy_Periodic_or_not_SOS_Start,uint16_t u16_Copy_SOS_TASK_Priority)
{
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	a2 2f       	mov	r26, r18
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
	
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
     c62:	00 91 a8 00 	lds	r16, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
     c66:	10 91 a9 00 	lds	r17, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
     c6a:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
     c6e:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
     c72:	04 30       	cpi	r16, 0x04	; 4
     c74:	11 05       	cpc	r17, r1
     c76:	21 05       	cpc	r18, r1
     c78:	31 05       	cpc	r19, r1
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <SOS_Create+0x22>
     c7c:	4b c0       	rjmp	.+150    	; 0xd14 <SOS_Create+0xb8>
	else
	{  
        /**Check whether function that passed is nullpointer or not**/
		if(NullPointer!=PntrToFunc_Copy_SOS_Start)
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	09 f4       	brne	.+2      	; 0xc84 <SOS_Create+0x28>
     c82:	4a c0       	rjmp	.+148    	; 0xd18 <SOS_Create+0xbc>
		{	
			sga_SOS_Events[sgu16_SOS_index].PntrToFunc=PntrToFunc_Copy_SOS_Start;	
     c84:	f8 01       	movw	r30, r16
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	e0 0f       	add	r30, r16
     c8c:	f1 1f       	adc	r31, r17
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e4 55       	subi	r30, 0x54	; 84
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	93 87       	std	Z+11, r25	; 0x0b
     c9c:	82 87       	std	Z+10, r24	; 0x0a
			/**Check whether the function categorty of function is SOS_Function_ONESHOT or SOS_Function_PERIODIC**/
			if(u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_ONESHOT || u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_PERIODIC)
     c9e:	42 30       	cpi	r20, 0x02	; 2
     ca0:	51 05       	cpc	r21, r1
     ca2:	e0 f5       	brcc	.+120    	; 0xd1c <SOS_Create+0xc0>
			{		
		
				sga_SOS_Events[sgu16_SOS_index].Periodic_or_not=u16_Copy_Periodic_or_not_SOS_Start;
     ca4:	c8 01       	movw	r24, r16
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	fc 01       	movw	r30, r24
     cac:	e0 0f       	add	r30, r16
     cae:	f1 1f       	adc	r31, r17
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	e4 55       	subi	r30, 0x54	; 84
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	40 83       	st	Z, r20
				sga_SOS_Events[sgu16_SOS_index].Priority=u16_Copy_SOS_TASK_Priority;
     cbe:	fc 01       	movw	r30, r24
     cc0:	e0 0f       	add	r30, r16
     cc2:	f1 1f       	adc	r31, r17
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	e4 55       	subi	r30, 0x54	; 84
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	a1 83       	std	Z+1, r26	; 0x01
				/**Check whether the function periodicty more than 0 or not **/
				if(u16_Copy_Periodicity_MS_SOS_Start>0U)
     cd2:	61 15       	cp	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	21 f1       	breq	.+72     	; 0xd20 <SOS_Create+0xc4>
				{
                    
					sga_SOS_Events[sgu16_SOS_index].Periodicity_MS=u16_Copy_Periodicity_MS_SOS_Start;
     cd8:	fc 01       	movw	r30, r24
     cda:	e0 0f       	add	r30, r16
     cdc:	f1 1f       	adc	r31, r17
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	e4 55       	subi	r30, 0x54	; 84
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	cb 01       	movw	r24, r22
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	82 83       	std	Z+2, r24	; 0x02
     cf2:	93 83       	std	Z+3, r25	; 0x03
     cf4:	a4 83       	std	Z+4, r26	; 0x04
     cf6:	b5 83       	std	Z+5, r27	; 0x05
					sgu16_SOS_index++;	
     cf8:	0f 5f       	subi	r16, 0xFF	; 255
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	2f 4f       	sbci	r18, 0xFF	; 255
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	00 93 a8 00 	sts	0x00A8, r16	; 0x8000a8 <sgu16_SOS_index>
     d04:	10 93 a9 00 	sts	0x00A9, r17	; 0x8000a9 <sgu16_SOS_index+0x1>
     d08:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <sgu16_SOS_index+0x2>
     d0c:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <sgu16_SOS_index+0x3>
}

/***Creat SOS tasks by By initalize array of task of SOS ****/ 
SOS_Error_t SOS_Create(PntrToFunc_t PntrToFunc_Copy_SOS_Start,uint16_t u16_Copy_Periodicity_MS_SOS_Start,uint16_t u16_Copy_Periodic_or_not_SOS_Start,uint16_t u16_Copy_SOS_TASK_Priority)
{
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <SOS_Create+0xc6>
	
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <SOS_Create+0xc6>
		
		}
		/**If not adjust error according to criteria **/		
		else
		{
			SOS_Start_Error=SOS_Error_Start_Null_func;
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <SOS_Create+0xc6>
			
			}  
			/**If not adjust error according to criteria **/
			else 
			{			
				SOS_Start_Error=SOS_Error_Function_type_undefined;
     d1c:	84 e0       	ldi	r24, 0x04	; 4
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <SOS_Create+0xc6>
					sgu16_SOS_index++;	
				}
				/**If not adjust error according to criteria **/
				else
				{
					SOS_Start_Error=SOS_Error_Function_Periodicity_Less_Than_OR_EQUAL_zero;
     d20:	86 e0       	ldi	r24, 0x06	; 6
		{
			SOS_Start_Error=SOS_Error_Start_Null_func;
		}
	}
	return SOS_Start_Error;
}
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <SOS_Stop>:
    }
}

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
    /***Check whether is empty or not**/
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
     d3c:	c0 90 a8 00 	lds	r12, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
     d40:	d0 90 a9 00 	lds	r13, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
     d44:	e0 90 aa 00 	lds	r14, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
     d48:	f0 90 ab 00 	lds	r15, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
     d4c:	c1 14       	cp	r12, r1
     d4e:	d1 04       	cpc	r13, r1
     d50:	e1 04       	cpc	r14, r1
     d52:	f1 04       	cpc	r15, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <SOS_Stop+0x30>
     d56:	7b c0       	rjmp	.+246    	; 0xe4e <SOS_Stop+0x126>
     d58:	81 2c       	mov	r8, r1
     d5a:	91 2c       	mov	r9, r1
     d5c:	54 01       	movw	r10, r8
     d5e:	40 e0       	ldi	r20, 0x00	; 0
	{
        /**Loop TO find the function that needed to be stopped**/
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
		{
			/**If we find the function that needed to be removed**/
			if(sga_SOS_Events[u8_SOS_Stop_Index].PntrToFunc==PntrToFunc_Copy_SOS_Start) 
     d60:	24 2f       	mov	r18, r20
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	e4 55       	subi	r30, 0x54	; 84
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	22 85       	ldd	r18, Z+10	; 0x0a
     d7c:	33 85       	ldd	r19, Z+11	; 0x0b
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	09 f0       	breq	.+2      	; 0xd86 <SOS_Stop+0x5e>
     d84:	4f c0       	rjmp	.+158    	; 0xe24 <SOS_Stop+0xfc>
			{
	             /**If the index of function not in the end of array ,
				    we should arrange the array**/
				 if(u8_SOS_Stop_Index != sgu16_SOS_index-1 )
     d86:	97 01       	movw	r18, r14
     d88:	86 01       	movw	r16, r12
     d8a:	01 50       	subi	r16, 0x01	; 1
     d8c:	11 09       	sbc	r17, r1
     d8e:	21 09       	sbc	r18, r1
     d90:	31 09       	sbc	r19, r1
     d92:	08 15       	cp	r16, r8
     d94:	19 05       	cpc	r17, r9
     d96:	2a 05       	cpc	r18, r10
     d98:	3b 05       	cpc	r19, r11
     d9a:	d1 f1       	breq	.+116    	; 0xe10 <SOS_Stop+0xe8>
				 { 
					/*Decrement the sgu16_SOS_index*/
         			sgu16_SOS_index--;
     d9c:	00 93 a8 00 	sts	0x00A8, r16	; 0x8000a8 <sgu16_SOS_index>
     da0:	10 93 a9 00 	sts	0x00A9, r17	; 0x8000a9 <sgu16_SOS_index+0x1>
     da4:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <sgu16_SOS_index+0x2>
     da8:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <sgu16_SOS_index+0x3>
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
     dac:	c4 2e       	mov	r12, r20
     dae:	d1 2c       	mov	r13, r1
     db0:	e1 2c       	mov	r14, r1
     db2:	f1 2c       	mov	r15, r1
     db4:	c0 16       	cp	r12, r16
     db6:	d1 06       	cpc	r13, r17
     db8:	e2 06       	cpc	r14, r18
     dba:	f3 06       	cpc	r15, r19
     dbc:	98 f5       	brcc	.+102    	; 0xe24 <SOS_Stop+0xfc>
 					{
					sga_SOS_Events[u8_SOS_Stop_Index]=sga_SOS_Events[u8_SOS_Stop_Index+1];
     dbe:	e4 2f       	mov	r30, r20
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	df 01       	movw	r26, r30
     dc4:	aa 0f       	add	r26, r26
     dc6:	bb 1f       	adc	r27, r27
     dc8:	ae 0f       	add	r26, r30
     dca:	bf 1f       	adc	r27, r31
     dcc:	aa 0f       	add	r26, r26
     dce:	bb 1f       	adc	r27, r27
     dd0:	aa 0f       	add	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	a4 55       	subi	r26, 0x54	; 84
     dd6:	bf 4f       	sbci	r27, 0xFF	; 255
     dd8:	31 96       	adiw	r30, 0x01	; 1
     dda:	bf 01       	movw	r22, r30
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	e6 0f       	add	r30, r22
     de2:	f7 1f       	adc	r31, r23
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e4 55       	subi	r30, 0x54	; 84
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	5c e0       	ldi	r21, 0x0C	; 12
     df2:	01 90       	ld	r0, Z+
     df4:	0d 92       	st	X+, r0
     df6:	5a 95       	dec	r21
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <SOS_Stop+0xca>
					u8_SOS_Stop_Index++;
     dfa:	4f 5f       	subi	r20, 0xFF	; 255
				    we should arrange the array**/
				 if(u8_SOS_Stop_Index != sgu16_SOS_index-1 )
				 { 
					/*Decrement the sgu16_SOS_index*/
         			sgu16_SOS_index--;
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
     dfc:	c4 2e       	mov	r12, r20
     dfe:	d1 2c       	mov	r13, r1
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
     e04:	c0 16       	cp	r12, r16
     e06:	d1 06       	cpc	r13, r17
     e08:	e2 06       	cpc	r14, r18
     e0a:	f3 06       	cpc	r15, r19
     e0c:	c0 f2       	brcs	.-80     	; 0xdbe <SOS_Stop+0x96>
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <SOS_Stop+0xfc>
				 /**Else we don't need to arrange**/
				 else if(u8_SOS_Stop_Index == sgu16_SOS_index-1)
				 {  

                     /*Decrement the sgu16_SOS_index*/					 
					 sgu16_SOS_index--;
     e10:	80 92 a8 00 	sts	0x00A8, r8	; 0x8000a8 <sgu16_SOS_index>
     e14:	90 92 a9 00 	sts	0x00A9, r9	; 0x8000a9 <sgu16_SOS_index+0x1>
     e18:	a0 92 aa 00 	sts	0x00AA, r10	; 0x8000aa <sgu16_SOS_index+0x2>
     e1c:	b0 92 ab 00 	sts	0x00AB, r11	; 0x8000ab <sgu16_SOS_index+0x3>

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
     e20:	80 e0       	ldi	r24, 0x00	; 0
				 else if(u8_SOS_Stop_Index == sgu16_SOS_index-1)
				 {  

                     /*Decrement the sgu16_SOS_index*/					 
					 sgu16_SOS_index--;
     				 break;
     e22:	16 c0       	rjmp	.+44     	; 0xe50 <SOS_Stop+0x128>
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
	/***Else stop the task from being mangaed by dispatcher by removing it from array */
	else
	{
        /**Loop TO find the function that needed to be stopped**/
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
     e24:	4f 5f       	subi	r20, 0xFF	; 255
     e26:	84 2e       	mov	r8, r20
     e28:	91 2c       	mov	r9, r1
     e2a:	a1 2c       	mov	r10, r1
     e2c:	b1 2c       	mov	r11, r1
     e2e:	c0 90 a8 00 	lds	r12, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
     e32:	d0 90 a9 00 	lds	r13, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
     e36:	e0 90 aa 00 	lds	r14, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
     e3a:	f0 90 ab 00 	lds	r15, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
     e3e:	8c 14       	cp	r8, r12
     e40:	9d 04       	cpc	r9, r13
     e42:	ae 04       	cpc	r10, r14
     e44:	bf 04       	cpc	r11, r15
     e46:	08 f4       	brcc	.+2      	; 0xe4a <SOS_Stop+0x122>
     e48:	8b cf       	rjmp	.-234    	; 0xd60 <SOS_Stop+0x38>

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <SOS_Stop+0x128>
    /***Check whether is empty or not**/
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
     e4e:	83 e0       	ldi	r24, 0x03	; 3
		}
	    
	}

	return SOS_Dispatch_Error;
}
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	08 95       	ret

00000e66 <SOS_Dispatch>:
	}
	return SOS_Start_Error;
}
/***SOS start manage the system for consumers***/
void SOS_Dispatch(void)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	2c 97       	sbiw	r28, 0x0c	; 12
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
    uint8_t u8_1st_Loop_Dispatch_Flag=1;
     e7a:	99 24       	eor	r9, r9
     e7c:	93 94       	inc	r9
	{ 
		/*
		 *  Check if the disptach is the the first loop to 
		 *  it to start if so start the timer
		 */
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	98 12       	cpse	r9, r24
     e82:	85 c0       	rjmp	.+266    	; 0xf8e <SOS_Dispatch+0x128>
     e84:	c0 90 a8 00 	lds	r12, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
     e88:	d0 90 a9 00 	lds	r13, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
     e8c:	e0 90 aa 00 	lds	r14, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
     e90:	f0 90 ab 00 	lds	r15, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
     e94:	c1 14       	cp	r12, r1
     e96:	d1 04       	cpc	r13, r1
     e98:	e1 04       	cpc	r14, r1
     e9a:	f1 04       	cpc	r15, r1
     e9c:	81 f3       	breq	.-32     	; 0xe7e <SOS_Dispatch+0x18>
     e9e:	50 e0       	ldi	r21, 0x00	; 0
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
			{ 
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
     ea0:	4f ef       	ldi	r20, 0xFF	; 255
     ea2:	4c 0d       	add	r20, r12
     ea4:	54 17       	cp	r21, r20
     ea6:	0c f0       	brlt	.+2      	; 0xeaa <SOS_Dispatch+0x44>
     ea8:	5c c0       	rjmp	.+184    	; 0xf62 <SOS_Dispatch+0xfc>
				{
					SOS_Node_t SOS_Node_t_Buffer;
					if(sga_SOS_Events[s8_i].Priority<sga_SOS_Events[s8_i-1].Priority)  
     eaa:	84 2f       	mov	r24, r20
     eac:	04 2e       	mov	r0, r20
     eae:	00 0c       	add	r0, r0
     eb0:	99 0b       	sbc	r25, r25
     eb2:	9c 01       	movw	r18, r24
     eb4:	21 50       	subi	r18, 0x01	; 1
     eb6:	31 09       	sbc	r19, r1
     eb8:	dc 01       	movw	r26, r24
     eba:	aa 0f       	add	r26, r26
     ebc:	bb 1f       	adc	r27, r27
     ebe:	a8 0f       	add	r26, r24
     ec0:	b9 1f       	adc	r27, r25
     ec2:	aa 0f       	add	r26, r26
     ec4:	bb 1f       	adc	r27, r27
     ec6:	aa 0f       	add	r26, r26
     ec8:	bb 1f       	adc	r27, r27
     eca:	a4 55       	subi	r26, 0x54	; 84
     ecc:	bf 4f       	sbci	r27, 0xFF	; 255
     ece:	f9 01       	movw	r30, r18
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	e4 55       	subi	r30, 0x54	; 84
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	7c 91       	ld	r23, X
     ee8:	11 97       	sbiw	r26, 0x01	; 1
     eea:	61 81       	ldd	r22, Z+1	; 0x01
     eec:	76 17       	cp	r23, r22
     eee:	a8 f5       	brcc	.+106    	; 0xf5a <SOS_Dispatch+0xf4>
					{
						SOS_Node_t_Buffer=sga_SOS_Events[s8_i];
     ef0:	bc 01       	movw	r22, r24
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	fd 01       	movw	r30, r26
     ef8:	1c e0       	ldi	r17, 0x0C	; 12
     efa:	de 01       	movw	r26, r28
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	01 90       	ld	r0, Z+
     f00:	0d 92       	st	X+, r0
     f02:	1a 95       	dec	r17
     f04:	e1 f7       	brne	.-8      	; 0xefe <SOS_Dispatch+0x98>
						sga_SOS_Events[s8_i]=sga_SOS_Events[s8_i-1];
     f06:	db 01       	movw	r26, r22
     f08:	a8 0f       	add	r26, r24
     f0a:	b9 1f       	adc	r27, r25
     f0c:	aa 0f       	add	r26, r26
     f0e:	bb 1f       	adc	r27, r27
     f10:	aa 0f       	add	r26, r26
     f12:	bb 1f       	adc	r27, r27
     f14:	a4 55       	subi	r26, 0x54	; 84
     f16:	bf 4f       	sbci	r27, 0xFF	; 255
     f18:	c9 01       	movw	r24, r18
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	fc 01       	movw	r30, r24
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	e4 55       	subi	r30, 0x54	; 84
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	6c e0       	ldi	r22, 0x0C	; 12
     f32:	01 90       	ld	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	6a 95       	dec	r22
     f38:	e1 f7       	brne	.-8      	; 0xf32 <SOS_Dispatch+0xcc>
						sga_SOS_Events[s8_i-1]=SOS_Node_t_Buffer;
     f3a:	dc 01       	movw	r26, r24
     f3c:	a2 0f       	add	r26, r18
     f3e:	b3 1f       	adc	r27, r19
     f40:	aa 0f       	add	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	aa 0f       	add	r26, r26
     f46:	bb 1f       	adc	r27, r27
     f48:	a4 55       	subi	r26, 0x54	; 84
     f4a:	bf 4f       	sbci	r27, 0xFF	; 255
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	fe 01       	movw	r30, r28
     f50:	31 96       	adiw	r30, 0x01	; 1
     f52:	01 90       	ld	r0, Z+
     f54:	0d 92       	st	X+, r0
     f56:	8a 95       	dec	r24
     f58:	e1 f7       	brne	.-8      	; 0xf52 <SOS_Dispatch+0xec>
     f5a:	41 50       	subi	r20, 0x01	; 1
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
			{ 
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
     f5c:	54 17       	cp	r21, r20
     f5e:	0c f4       	brge	.+2      	; 0xf62 <SOS_Dispatch+0xfc>
     f60:	a4 cf       	rjmp	.-184    	; 0xeaa <SOS_Dispatch+0x44>
     f62:	5f 5f       	subi	r21, 0xFF	; 255
		 *  it to start if so start the timer
		 */
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
     f64:	85 2f       	mov	r24, r21
     f66:	05 2e       	mov	r0, r21
     f68:	00 0c       	add	r0, r0
     f6a:	99 0b       	sbc	r25, r25
     f6c:	aa 0b       	sbc	r26, r26
     f6e:	bb 0b       	sbc	r27, r27
     f70:	8c 15       	cp	r24, r12
     f72:	9d 05       	cpc	r25, r13
     f74:	ae 05       	cpc	r26, r14
     f76:	bf 05       	cpc	r27, r15
     f78:	08 f4       	brcc	.+2      	; 0xf7c <SOS_Dispatch+0x116>
     f7a:	92 cf       	rjmp	.-220    	; 0xea0 <SOS_Dispatch+0x3a>
					}
				  
				}
			} 
			/*Timer start working in milies*/
			Timer_Start(TIMER0,0,SOS_Function_ISR);
     f7c:	42 e0       	ldi	r20, 0x02	; 2
     f7e:	56 e0       	ldi	r21, 0x06	; 6
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Timer_Start>
			u8_1st_Loop_Dispatch_Flag=0;
     f8a:	91 2c       	mov	r9, r1
     f8c:	78 cf       	rjmp	.-272    	; 0xe7e <SOS_Dispatch+0x18>
		}
		/**If it is not first loop for dispatcher of SOS**/
		else if((u8_1st_Loop_Dispatch_Flag==0)&&(sgu16_SOS_index!=0))
     f8e:	91 10       	cpse	r9, r1
     f90:	76 cf       	rjmp	.-276    	; 0xe7e <SOS_Dispatch+0x18>
     f92:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
     f96:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
     f9a:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
     f9e:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
     fa2:	89 2b       	or	r24, r25
     fa4:	8a 2b       	or	r24, r26
     fa6:	8b 2b       	or	r24, r27
     fa8:	09 f4       	brne	.+2      	; 0xfac <SOS_Dispatch+0x146>
     faa:	69 cf       	rjmp	.-302    	; 0xe7e <SOS_Dispatch+0x18>
		{
			u64_SOS_COUNT=sgu64_SOS_Timer_ISR_Count;
     fac:	40 90 a4 00 	lds	r4, 0x00A4	; 0x8000a4 <sgu64_SOS_Timer_ISR_Count>
     fb0:	50 90 a5 00 	lds	r5, 0x00A5	; 0x8000a5 <sgu64_SOS_Timer_ISR_Count+0x1>
     fb4:	60 90 a6 00 	lds	r6, 0x00A6	; 0x8000a6 <sgu64_SOS_Timer_ISR_Count+0x2>
     fb8:	70 90 a7 00 	lds	r7, 0x00A7	; 0x8000a7 <sgu64_SOS_Timer_ISR_Count+0x3>
     fbc:	0c ea       	ldi	r16, 0xAC	; 172
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	c1 2c       	mov	r12, r1
     fc2:	d1 2c       	mov	r13, r1
     fc4:	76 01       	movw	r14, r12
			{ 
				u64_Dispatch_Func_Count=((sga_SOS_Events[u64_i].Period_Count)+1)*sga_SOS_Events[u64_i].Periodicity_MS;
				
				/*** I will increment each function count until i reach to it's periodicity,***
    		     *** then i will execute it's routine                                       ***/
				if((u64_Dispatch_Func_Count==u64_SOS_COUNT))
     fc6:	f8 01       	movw	r30, r16
     fc8:	86 81       	ldd	r24, Z+6	; 0x06
     fca:	97 81       	ldd	r25, Z+7	; 0x07
     fcc:	a0 85       	ldd	r26, Z+8	; 0x08
     fce:	b1 85       	ldd	r27, Z+9	; 0x09
     fd0:	9c 01       	movw	r18, r24
     fd2:	ad 01       	movw	r20, r26
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	4f 4f       	sbci	r20, 0xFF	; 255
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	62 81       	ldd	r22, Z+2	; 0x02
     fde:	73 81       	ldd	r23, Z+3	; 0x03
     fe0:	84 81       	ldd	r24, Z+4	; 0x04
     fe2:	95 81       	ldd	r25, Z+5	; 0x05
     fe4:	0e 94 55 09 	call	0x12aa	; 0x12aa <__mulsi3>
     fe8:	46 16       	cp	r4, r22
     fea:	57 06       	cpc	r5, r23
     fec:	68 06       	cpc	r6, r24
     fee:	79 06       	cpc	r7, r25
     ff0:	b9 f4       	brne	.+46     	; 0x1020 <SOS_Dispatch+0x1ba>
				{      
					/**Execute the customer's function**/
					sga_SOS_Events[u64_i].PntrToFunc();/*Executing...................*/
     ff2:	02 84       	ldd	r0, Z+10	; 0x0a
     ff4:	f3 85       	ldd	r31, Z+11	; 0x0b
     ff6:	e0 2d       	mov	r30, r0
     ff8:	09 95       	icall
					/**Increment the number of occurance of customer function**/
					sga_SOS_Events[u64_i].Period_Count=sga_SOS_Events[u64_i].Period_Count+1;
     ffa:	f8 01       	movw	r30, r16
     ffc:	86 81       	ldd	r24, Z+6	; 0x06
     ffe:	97 81       	ldd	r25, Z+7	; 0x07
    1000:	a0 85       	ldd	r26, Z+8	; 0x08
    1002:	b1 85       	ldd	r27, Z+9	; 0x09
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	a1 1d       	adc	r26, r1
    1008:	b1 1d       	adc	r27, r1
    100a:	86 83       	std	Z+6, r24	; 0x06
    100c:	97 83       	std	Z+7, r25	; 0x07
    100e:	a0 87       	std	Z+8, r26	; 0x08
    1010:	b1 87       	std	Z+9, r27	; 0x09
                    /***If the function is one shot,let it work then stop it directly**/
  					if(sga_SOS_Events[u64_i].Periodic_or_not==SOS_Function_ONESHOT)
    1012:	80 81       	ld	r24, Z
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	21 f4       	brne	.+8      	; 0x1020 <SOS_Dispatch+0x1ba>
					{
                        /**Stop function (Remove it from array)**/	
						SOS_Stop(sga_SOS_Events[u64_i].PntrToFunc);
    1018:	82 85       	ldd	r24, Z+10	; 0x0a
    101a:	93 85       	ldd	r25, Z+11	; 0x0b
    101c:	0e 94 94 06 	call	0xd28	; 0xd28 <SOS_Stop>
		/**If it is not first loop for dispatcher of SOS**/
		else if((u8_1st_Loop_Dispatch_Flag==0)&&(sgu16_SOS_index!=0))
		{
			u64_SOS_COUNT=sgu64_SOS_Timer_ISR_Count;
			/*Looping to execute the function which it's time comes(Brain of SOS)*/	
			for(uint64_t u64_i=0;u64_i<sgu16_SOS_index;u64_i++)
    1020:	bf ef       	ldi	r27, 0xFF	; 255
    1022:	cb 1a       	sub	r12, r27
    1024:	db 0a       	sbc	r13, r27
    1026:	eb 0a       	sbc	r14, r27
    1028:	fb 0a       	sbc	r15, r27
    102a:	04 5f       	subi	r16, 0xF4	; 244
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sgu16_SOS_index>
    1032:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <sgu16_SOS_index+0x1>
    1036:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <sgu16_SOS_index+0x2>
    103a:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <sgu16_SOS_index+0x3>
    103e:	c8 16       	cp	r12, r24
    1040:	d9 06       	cpc	r13, r25
    1042:	ea 06       	cpc	r14, r26
    1044:	fb 06       	cpc	r15, r27
    1046:	08 f4       	brcc	.+2      	; 0x104a <SOS_Dispatch+0x1e4>
    1048:	be cf       	rjmp	.-132    	; 0xfc6 <SOS_Dispatch+0x160>
    104a:	19 cf       	rjmp	.-462    	; 0xe7e <SOS_Dispatch+0x18>

0000104c <__divsf3>:
    104c:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divsf3x>
    1050:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_round>
    1054:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_pscB>
    1058:	58 f0       	brcs	.+22     	; 0x1070 <__divsf3+0x24>
    105a:	0e 94 0d 09 	call	0x121a	; 0x121a <__fp_pscA>
    105e:	40 f0       	brcs	.+16     	; 0x1070 <__divsf3+0x24>
    1060:	29 f4       	brne	.+10     	; 0x106c <__divsf3+0x20>
    1062:	5f 3f       	cpi	r21, 0xFF	; 255
    1064:	29 f0       	breq	.+10     	; 0x1070 <__divsf3+0x24>
    1066:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    106a:	51 11       	cpse	r21, r1
    106c:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    1070:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_nan>

00001074 <__divsf3x>:
    1074:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_split3>
    1078:	68 f3       	brcs	.-38     	; 0x1054 <__divsf3+0x8>

0000107a <__divsf3_pse>:
    107a:	99 23       	and	r25, r25
    107c:	b1 f3       	breq	.-20     	; 0x106a <__divsf3+0x1e>
    107e:	55 23       	and	r21, r21
    1080:	91 f3       	breq	.-28     	; 0x1066 <__divsf3+0x1a>
    1082:	95 1b       	sub	r25, r21
    1084:	55 0b       	sbc	r21, r21
    1086:	bb 27       	eor	r27, r27
    1088:	aa 27       	eor	r26, r26
    108a:	62 17       	cp	r22, r18
    108c:	73 07       	cpc	r23, r19
    108e:	84 07       	cpc	r24, r20
    1090:	38 f0       	brcs	.+14     	; 0x10a0 <__divsf3_pse+0x26>
    1092:	9f 5f       	subi	r25, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	44 1f       	adc	r20, r20
    109c:	aa 1f       	adc	r26, r26
    109e:	a9 f3       	breq	.-22     	; 0x108a <__divsf3_pse+0x10>
    10a0:	35 d0       	rcall	.+106    	; 0x110c <__divsf3_pse+0x92>
    10a2:	0e 2e       	mov	r0, r30
    10a4:	3a f0       	brmi	.+14     	; 0x10b4 <__divsf3_pse+0x3a>
    10a6:	e0 e8       	ldi	r30, 0x80	; 128
    10a8:	32 d0       	rcall	.+100    	; 0x110e <__divsf3_pse+0x94>
    10aa:	91 50       	subi	r25, 0x01	; 1
    10ac:	50 40       	sbci	r21, 0x00	; 0
    10ae:	e6 95       	lsr	r30
    10b0:	00 1c       	adc	r0, r0
    10b2:	ca f7       	brpl	.-14     	; 0x10a6 <__divsf3_pse+0x2c>
    10b4:	2b d0       	rcall	.+86     	; 0x110c <__divsf3_pse+0x92>
    10b6:	fe 2f       	mov	r31, r30
    10b8:	29 d0       	rcall	.+82     	; 0x110c <__divsf3_pse+0x92>
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 1f       	adc	r24, r24
    10c0:	bb 1f       	adc	r27, r27
    10c2:	26 17       	cp	r18, r22
    10c4:	37 07       	cpc	r19, r23
    10c6:	48 07       	cpc	r20, r24
    10c8:	ab 07       	cpc	r26, r27
    10ca:	b0 e8       	ldi	r27, 0x80	; 128
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__divsf3_pse+0x56>
    10ce:	bb 0b       	sbc	r27, r27
    10d0:	80 2d       	mov	r24, r0
    10d2:	bf 01       	movw	r22, r30
    10d4:	ff 27       	eor	r31, r31
    10d6:	93 58       	subi	r25, 0x83	; 131
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	3a f0       	brmi	.+14     	; 0x10ea <__divsf3_pse+0x70>
    10dc:	9e 3f       	cpi	r25, 0xFE	; 254
    10de:	51 05       	cpc	r21, r1
    10e0:	78 f0       	brcs	.+30     	; 0x1100 <__divsf3_pse+0x86>
    10e2:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    10e6:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	e4 f3       	brlt	.-8      	; 0x10e6 <__divsf3_pse+0x6c>
    10ee:	98 3e       	cpi	r25, 0xE8	; 232
    10f0:	d4 f3       	brlt	.-12     	; 0x10e6 <__divsf3_pse+0x6c>
    10f2:	86 95       	lsr	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f7 95       	ror	r31
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	c9 f7       	brne	.-14     	; 0x10f2 <__divsf3_pse+0x78>
    1100:	88 0f       	add	r24, r24
    1102:	91 1d       	adc	r25, r1
    1104:	96 95       	lsr	r25
    1106:	87 95       	ror	r24
    1108:	97 f9       	bld	r25, 7
    110a:	08 95       	ret
    110c:	e1 e0       	ldi	r30, 0x01	; 1
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	bb 1f       	adc	r27, r27
    1116:	62 17       	cp	r22, r18
    1118:	73 07       	cpc	r23, r19
    111a:	84 07       	cpc	r24, r20
    111c:	ba 07       	cpc	r27, r26
    111e:	20 f0       	brcs	.+8      	; 0x1128 <__divsf3_pse+0xae>
    1120:	62 1b       	sub	r22, r18
    1122:	73 0b       	sbc	r23, r19
    1124:	84 0b       	sbc	r24, r20
    1126:	ba 0b       	sbc	r27, r26
    1128:	ee 1f       	adc	r30, r30
    112a:	88 f7       	brcc	.-30     	; 0x110e <__divsf3_pse+0x94>
    112c:	e0 95       	com	r30
    112e:	08 95       	ret

00001130 <__fixunssfsi>:
    1130:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_splitA>
    1134:	88 f0       	brcs	.+34     	; 0x1158 <__fixunssfsi+0x28>
    1136:	9f 57       	subi	r25, 0x7F	; 127
    1138:	98 f0       	brcs	.+38     	; 0x1160 <__fixunssfsi+0x30>
    113a:	b9 2f       	mov	r27, r25
    113c:	99 27       	eor	r25, r25
    113e:	b7 51       	subi	r27, 0x17	; 23
    1140:	b0 f0       	brcs	.+44     	; 0x116e <__fixunssfsi+0x3e>
    1142:	e1 f0       	breq	.+56     	; 0x117c <__fixunssfsi+0x4c>
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	1a f0       	brmi	.+6      	; 0x1154 <__fixunssfsi+0x24>
    114e:	ba 95       	dec	r27
    1150:	c9 f7       	brne	.-14     	; 0x1144 <__fixunssfsi+0x14>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <__fixunssfsi+0x4c>
    1154:	b1 30       	cpi	r27, 0x01	; 1
    1156:	91 f0       	breq	.+36     	; 0x117c <__fixunssfsi+0x4c>
    1158:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_zero>
    115c:	b1 e0       	ldi	r27, 0x01	; 1
    115e:	08 95       	ret
    1160:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_zero>
    1164:	67 2f       	mov	r22, r23
    1166:	78 2f       	mov	r23, r24
    1168:	88 27       	eor	r24, r24
    116a:	b8 5f       	subi	r27, 0xF8	; 248
    116c:	39 f0       	breq	.+14     	; 0x117c <__fixunssfsi+0x4c>
    116e:	b9 3f       	cpi	r27, 0xF9	; 249
    1170:	cc f3       	brlt	.-14     	; 0x1164 <__fixunssfsi+0x34>
    1172:	86 95       	lsr	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b3 95       	inc	r27
    117a:	d9 f7       	brne	.-10     	; 0x1172 <__fixunssfsi+0x42>
    117c:	3e f4       	brtc	.+14     	; 0x118c <__fixunssfsi+0x5c>
    117e:	90 95       	com	r25
    1180:	80 95       	com	r24
    1182:	70 95       	com	r23
    1184:	61 95       	neg	r22
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <__floatunsisf>:
    118e:	e8 94       	clt
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <__floatsisf+0x12>

00001192 <__floatsisf>:
    1192:	97 fb       	bst	r25, 7
    1194:	3e f4       	brtc	.+14     	; 0x11a4 <__floatsisf+0x12>
    1196:	90 95       	com	r25
    1198:	80 95       	com	r24
    119a:	70 95       	com	r23
    119c:	61 95       	neg	r22
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	99 23       	and	r25, r25
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <__floatsisf+0x40>
    11a8:	f9 2f       	mov	r31, r25
    11aa:	96 e9       	ldi	r25, 0x96	; 150
    11ac:	bb 27       	eor	r27, r27
    11ae:	93 95       	inc	r25
    11b0:	f6 95       	lsr	r31
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b7 95       	ror	r27
    11ba:	f1 11       	cpse	r31, r1
    11bc:	f8 cf       	rjmp	.-16     	; 0x11ae <__floatsisf+0x1c>
    11be:	fa f4       	brpl	.+62     	; 0x11fe <__floatsisf+0x6c>
    11c0:	bb 0f       	add	r27, r27
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__floatsisf+0x36>
    11c4:	60 ff       	sbrs	r22, 0
    11c6:	1b c0       	rjmp	.+54     	; 0x11fe <__floatsisf+0x6c>
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	8f 4f       	sbci	r24, 0xFF	; 255
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	16 c0       	rjmp	.+44     	; 0x11fe <__floatsisf+0x6c>
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <__floatsisf+0x48>
    11d6:	96 e9       	ldi	r25, 0x96	; 150
    11d8:	11 c0       	rjmp	.+34     	; 0x11fc <__floatsisf+0x6a>
    11da:	77 23       	and	r23, r23
    11dc:	21 f0       	breq	.+8      	; 0x11e6 <__floatsisf+0x54>
    11de:	9e e8       	ldi	r25, 0x8E	; 142
    11e0:	87 2f       	mov	r24, r23
    11e2:	76 2f       	mov	r23, r22
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <__floatsisf+0x5e>
    11e6:	66 23       	and	r22, r22
    11e8:	71 f0       	breq	.+28     	; 0x1206 <__floatsisf+0x74>
    11ea:	96 e8       	ldi	r25, 0x86	; 134
    11ec:	86 2f       	mov	r24, r22
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	2a f0       	brmi	.+10     	; 0x11fe <__floatsisf+0x6c>
    11f4:	9a 95       	dec	r25
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	da f7       	brpl	.-10     	; 0x11f4 <__floatsisf+0x62>
    11fe:	88 0f       	add	r24, r24
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret

00001208 <__fp_inf>:
    1208:	97 f9       	bld	r25, 7
    120a:	9f 67       	ori	r25, 0x7F	; 127
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	08 95       	ret

00001214 <__fp_nan>:
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	80 ec       	ldi	r24, 0xC0	; 192
    1218:	08 95       	ret

0000121a <__fp_pscA>:
    121a:	00 24       	eor	r0, r0
    121c:	0a 94       	dec	r0
    121e:	16 16       	cp	r1, r22
    1220:	17 06       	cpc	r1, r23
    1222:	18 06       	cpc	r1, r24
    1224:	09 06       	cpc	r0, r25
    1226:	08 95       	ret

00001228 <__fp_pscB>:
    1228:	00 24       	eor	r0, r0
    122a:	0a 94       	dec	r0
    122c:	12 16       	cp	r1, r18
    122e:	13 06       	cpc	r1, r19
    1230:	14 06       	cpc	r1, r20
    1232:	05 06       	cpc	r0, r21
    1234:	08 95       	ret

00001236 <__fp_round>:
    1236:	09 2e       	mov	r0, r25
    1238:	03 94       	inc	r0
    123a:	00 0c       	add	r0, r0
    123c:	11 f4       	brne	.+4      	; 0x1242 <__fp_round+0xc>
    123e:	88 23       	and	r24, r24
    1240:	52 f0       	brmi	.+20     	; 0x1256 <__fp_round+0x20>
    1242:	bb 0f       	add	r27, r27
    1244:	40 f4       	brcc	.+16     	; 0x1256 <__fp_round+0x20>
    1246:	bf 2b       	or	r27, r31
    1248:	11 f4       	brne	.+4      	; 0x124e <__fp_round+0x18>
    124a:	60 ff       	sbrs	r22, 0
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <__fp_round+0x20>
    124e:	6f 5f       	subi	r22, 0xFF	; 255
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	08 95       	ret

00001258 <__fp_split3>:
    1258:	57 fd       	sbrc	r21, 7
    125a:	90 58       	subi	r25, 0x80	; 128
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	59 f0       	breq	.+22     	; 0x1278 <__fp_splitA+0x10>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	71 f0       	breq	.+28     	; 0x1282 <__fp_splitA+0x1a>
    1266:	47 95       	ror	r20

00001268 <__fp_splitA>:
    1268:	88 0f       	add	r24, r24
    126a:	97 fb       	bst	r25, 7
    126c:	99 1f       	adc	r25, r25
    126e:	61 f0       	breq	.+24     	; 0x1288 <__fp_splitA+0x20>
    1270:	9f 3f       	cpi	r25, 0xFF	; 255
    1272:	79 f0       	breq	.+30     	; 0x1292 <__fp_splitA+0x2a>
    1274:	87 95       	ror	r24
    1276:	08 95       	ret
    1278:	12 16       	cp	r1, r18
    127a:	13 06       	cpc	r1, r19
    127c:	14 06       	cpc	r1, r20
    127e:	55 1f       	adc	r21, r21
    1280:	f2 cf       	rjmp	.-28     	; 0x1266 <__fp_split3+0xe>
    1282:	46 95       	lsr	r20
    1284:	f1 df       	rcall	.-30     	; 0x1268 <__fp_splitA>
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <__fp_splitA+0x30>
    1288:	16 16       	cp	r1, r22
    128a:	17 06       	cpc	r1, r23
    128c:	18 06       	cpc	r1, r24
    128e:	99 1f       	adc	r25, r25
    1290:	f1 cf       	rjmp	.-30     	; 0x1274 <__fp_splitA+0xc>
    1292:	86 95       	lsr	r24
    1294:	71 05       	cpc	r23, r1
    1296:	61 05       	cpc	r22, r1
    1298:	08 94       	sec
    129a:	08 95       	ret

0000129c <__fp_zero>:
    129c:	e8 94       	clt

0000129e <__fp_szero>:
    129e:	bb 27       	eor	r27, r27
    12a0:	66 27       	eor	r22, r22
    12a2:	77 27       	eor	r23, r23
    12a4:	cb 01       	movw	r24, r22
    12a6:	97 f9       	bld	r25, 7
    12a8:	08 95       	ret

000012aa <__mulsi3>:
    12aa:	db 01       	movw	r26, r22
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	0e 94 65 09 	call	0x12ca	; 0x12ca <__muluhisi3>
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	a2 9f       	mul	r26, r18
    12ba:	80 0d       	add	r24, r0
    12bc:	91 1d       	adc	r25, r1
    12be:	a3 9f       	mul	r26, r19
    12c0:	90 0d       	add	r25, r0
    12c2:	b2 9f       	mul	r27, r18
    12c4:	90 0d       	add	r25, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	08 95       	ret

000012ca <__muluhisi3>:
    12ca:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__umulhisi3>
    12ce:	a5 9f       	mul	r26, r21
    12d0:	90 0d       	add	r25, r0
    12d2:	b4 9f       	mul	r27, r20
    12d4:	90 0d       	add	r25, r0
    12d6:	a4 9f       	mul	r26, r20
    12d8:	80 0d       	add	r24, r0
    12da:	91 1d       	adc	r25, r1
    12dc:	11 24       	eor	r1, r1
    12de:	08 95       	ret

000012e0 <__umulhisi3>:
    12e0:	a2 9f       	mul	r26, r18
    12e2:	b0 01       	movw	r22, r0
    12e4:	b3 9f       	mul	r27, r19
    12e6:	c0 01       	movw	r24, r0
    12e8:	a3 9f       	mul	r26, r19
    12ea:	70 0d       	add	r23, r0
    12ec:	81 1d       	adc	r24, r1
    12ee:	11 24       	eor	r1, r1
    12f0:	91 1d       	adc	r25, r1
    12f2:	b2 9f       	mul	r27, r18
    12f4:	70 0d       	add	r23, r0
    12f6:	81 1d       	adc	r24, r1
    12f8:	11 24       	eor	r1, r1
    12fa:	91 1d       	adc	r25, r1
    12fc:	08 95       	ret

000012fe <itoa>:
    12fe:	45 32       	cpi	r20, 0x25	; 37
    1300:	51 05       	cpc	r21, r1
    1302:	20 f4       	brcc	.+8      	; 0x130c <itoa+0xe>
    1304:	42 30       	cpi	r20, 0x02	; 2
    1306:	10 f0       	brcs	.+4      	; 0x130c <itoa+0xe>
    1308:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__itoa_ncheck>
    130c:	fb 01       	movw	r30, r22
    130e:	10 82       	st	Z, r1
    1310:	cb 01       	movw	r24, r22
    1312:	08 95       	ret

00001314 <__itoa_ncheck>:
    1314:	bb 27       	eor	r27, r27
    1316:	4a 30       	cpi	r20, 0x0A	; 10
    1318:	31 f4       	brne	.+12     	; 0x1326 <__itoa_ncheck+0x12>
    131a:	99 23       	and	r25, r25
    131c:	22 f4       	brpl	.+8      	; 0x1326 <__itoa_ncheck+0x12>
    131e:	bd e2       	ldi	r27, 0x2D	; 45
    1320:	90 95       	com	r25
    1322:	81 95       	neg	r24
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	0c 94 96 09 	jmp	0x132c	; 0x132c <__utoa_common>

0000132a <__utoa_ncheck>:
    132a:	bb 27       	eor	r27, r27

0000132c <__utoa_common>:
    132c:	fb 01       	movw	r30, r22
    132e:	55 27       	eor	r21, r21
    1330:	aa 27       	eor	r26, r26
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	aa 1f       	adc	r26, r26
    1338:	a4 17       	cp	r26, r20
    133a:	10 f0       	brcs	.+4      	; 0x1340 <__utoa_common+0x14>
    133c:	a4 1b       	sub	r26, r20
    133e:	83 95       	inc	r24
    1340:	50 51       	subi	r21, 0x10	; 16
    1342:	b9 f7       	brne	.-18     	; 0x1332 <__utoa_common+0x6>
    1344:	a0 5d       	subi	r26, 0xD0	; 208
    1346:	aa 33       	cpi	r26, 0x3A	; 58
    1348:	08 f0       	brcs	.+2      	; 0x134c <__utoa_common+0x20>
    134a:	a9 5d       	subi	r26, 0xD9	; 217
    134c:	a1 93       	st	Z+, r26
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	79 f7       	brne	.-34     	; 0x1330 <__utoa_common+0x4>
    1352:	b1 11       	cpse	r27, r1
    1354:	b1 93       	st	Z+, r27
    1356:	11 92       	st	Z+, r1
    1358:	cb 01       	movw	r24, r22
    135a:	0c 94 af 09 	jmp	0x135e	; 0x135e <strrev>

0000135e <strrev>:
    135e:	dc 01       	movw	r26, r24
    1360:	fc 01       	movw	r30, r24
    1362:	67 2f       	mov	r22, r23
    1364:	71 91       	ld	r23, Z+
    1366:	77 23       	and	r23, r23
    1368:	e1 f7       	brne	.-8      	; 0x1362 <strrev+0x4>
    136a:	32 97       	sbiw	r30, 0x02	; 2
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <strrev+0x18>
    136e:	7c 91       	ld	r23, X
    1370:	6d 93       	st	X+, r22
    1372:	70 83       	st	Z, r23
    1374:	62 91       	ld	r22, -Z
    1376:	ae 17       	cp	r26, r30
    1378:	bf 07       	cpc	r27, r31
    137a:	c8 f3       	brcs	.-14     	; 0x136e <strrev+0x10>
    137c:	08 95       	ret

0000137e <_exit>:
    137e:	f8 94       	cli

00001380 <__stop_program>:
    1380:	ff cf       	rjmp	.-2      	; 0x1380 <__stop_program>
