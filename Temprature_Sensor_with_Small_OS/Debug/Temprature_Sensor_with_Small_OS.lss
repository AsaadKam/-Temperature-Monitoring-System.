
Temprature_Sensor_with_Small_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001438  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800086  00800086  000014f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218b  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d10  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c0  00000000  00000000  000045f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00005eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f3f  00000000  00000000  000063c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023a3  00000000  00000000  00007303  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000096a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_7>
      20:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
      8a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task_System_Init_3_milisecond>:
{
	static uint8_t su8_LCD_INIT_FLAG=1;
	static uint8_t su8_LCD_SEND_STRING_FLAG=1;
	static uint8_t su8_LCD_INIT_STATE=0;

	if(gu8_Task_Init_Flag==1)
      92:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8_Task_Init_Flag>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	79 f5       	brne	.+94     	; 0xf8 <Task_System_Init_3_milisecond+0x66>
	{

		switch(su8_LCD_INIT_STATE)
      9a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <su8_LCD_INIT_STATE.1720>
      9e:	88 23       	and	r24, r24
      a0:	19 f0       	breq	.+6      	; 0xa8 <Task_System_Init_3_milisecond+0x16>
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	a1 f0       	breq	.+40     	; 0xce <Task_System_Init_3_milisecond+0x3c>
      a6:	08 95       	ret
		{
			case 0:
			{
				ADC_INIT(&gstr_Temp_sensorConfig);
      a8:	8d e6       	ldi	r24, 0x6D	; 109
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ADC_INIT>
				if(su8_LCD_INIT_FLAG==1)
      b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <su8_LCD_INIT_FLAG.1718>
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	29 f4       	brne	.+10     	; 0xc2 <Task_System_Init_3_milisecond+0x30>
				{
					LCD_init(&su8_LCD_INIT_FLAG);
      b8:	83 e6       	ldi	r24, 0x63	; 99
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_init>
      c0:	08 95       	ret

				}
				else
				{
					su8_LCD_INIT_FLAG=0;
      c2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <su8_LCD_INIT_FLAG.1718>
					su8_LCD_INIT_STATE=1;
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <su8_LCD_INIT_STATE.1720>
      cc:	08 95       	ret
			}
			break;
			
			case 1:
			{
				if(su8_LCD_SEND_STRING_FLAG==1) LCD_displayString(" TEMP=",&su8_LCD_SEND_STRING_FLAG);
      ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <su8_LCD_SEND_STRING_FLAG.1719>
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	39 f4       	brne	.+14     	; 0xe4 <Task_System_Init_3_milisecond+0x52>
      d6:	62 e6       	ldi	r22, 0x62	; 98
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	8b e7       	ldi	r24, 0x7B	; 123
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_displayString>
      e2:	08 95       	ret
				else
				{
					su8_LCD_SEND_STRING_FLAG=0;
      e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <su8_LCD_SEND_STRING_FLAG.1719>
					su8_LCD_INIT_STATE=2;
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <su8_LCD_INIT_STATE.1720>
					gu8_Task_Init_Flag=0;
      ee:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <gu8_Task_Init_Flag>
					gu8_Task_ADC_Flag=1;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu8_Task_ADC_Flag>
      f8:	08 95       	ret

000000fa <Task_ADC_1_Second>:

void Task_ADC_1_Second(void )
{
	static uint8_t su8_Task_ADC_1S_Flag=1;

	if(gu8_Task_ADC_Flag==1)
      fa:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gu8_Task_ADC_Flag>
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	e9 f4       	brne	.+58     	; 0x13c <Task_ADC_1_Second+0x42>
	{

		if(su8_Task_ADC_1S_Flag==1)
     102:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <su8_Task_ADC_1S_Flag.1727>
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	49 f4       	brne	.+18     	; 0x11c <Task_ADC_1_Second+0x22>
		{
		
			ADC_READ(&gu32_ADC_DATA,NullPointer,&su8_Task_ADC_1S_Flag);
     10a:	41 e6       	ldi	r20, 0x61	; 97
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	8a e8       	ldi	r24, 0x8A	; 138
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 32 03 	call	0x664	; 0x664 <ADC_READ>
     11a:	08 95       	ret

		}
		else
		{

            DIO_Init_Pin(24,1);
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	88 e1       	ldi	r24, 0x18	; 24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
            DIO_toggle_Pin(24);
     128:	88 e1       	ldi	r24, 0x18	; 24
     12a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
			
			su8_Task_ADC_1S_Flag=1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <su8_Task_ADC_1S_Flag.1727>
			gu8_Task_LCD_Flag=1;
     134:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gu8_Task_LCD_Flag>
			gu8_Task_ADC_Flag=0;
     138:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <gu8_Task_ADC_Flag>
     13c:	08 95       	ret

0000013e <Task_LCD_3_milisecond>:
{
	static uint8_t su8_LCD_WRITE_ADC_FLAG=1;
    static uint8_t su8_LCD_WRITE_ADC_STATE=0;
	static su8_ADC_DATA_BUFFER=0;

	if(gu8_Task_LCD_Flag==1)
     13e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu8_Task_LCD_Flag>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	09 f0       	breq	.+2      	; 0x148 <Task_LCD_3_milisecond+0xa>
     146:	47 c0       	rjmp	.+142    	; 0x1d6 <Task_LCD_3_milisecond+0x98>
	{
		{
			switch(su8_LCD_WRITE_ADC_STATE)
     148:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
     14c:	88 23       	and	r24, r24
     14e:	19 f0       	breq	.+6      	; 0x156 <Task_LCD_3_milisecond+0x18>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	21 f1       	breq	.+72     	; 0x19c <Task_LCD_3_milisecond+0x5e>
     154:	08 95       	ret
			{
				case 0:
			    {

					  if(su8_LCD_WRITE_ADC_FLAG==1)	LCD_integerToString((gu32_ADC_DATA/2.049),1,6,&su8_LCD_WRITE_ADC_FLAG);
     156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	c9 f4       	brne	.+50     	; 0x190 <Task_LCD_3_milisecond+0x52>
     15e:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <gu32_ADC_DATA>
     162:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <gu32_ADC_DATA+0x1>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 22 09 	call	0x1244	; 0x1244 <__floatunsisf>
     16e:	21 ed       	ldi	r18, 0xD1	; 209
     170:	32 e2       	ldi	r19, 0x22	; 34
     172:	43 e0       	ldi	r20, 0x03	; 3
     174:	50 e4       	ldi	r21, 0x40	; 64
     176:	0e 94 81 08 	call	0x1102	; 0x1102 <__divsf3>
     17a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	20 e6       	ldi	r18, 0x60	; 96
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	46 e0       	ldi	r20, 0x06	; 6
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	0e 94 24 02 	call	0x448	; 0x448 <LCD_integerToString>
     18e:	08 95       	ret
					  else
					  {
						  su8_LCD_WRITE_ADC_FLAG=1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
						  su8_LCD_WRITE_ADC_STATE=1;
     196:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
     19a:	08 95       	ret
				break;
				
				case 1:
				{
				
					 if(su8_LCD_WRITE_ADC_FLAG==1)	LCD_displayString("C.",&su8_LCD_WRITE_ADC_FLAG);
     19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	39 f4       	brne	.+14     	; 0x1b2 <Task_LCD_3_milisecond+0x74>
     1a4:	60 e6       	ldi	r22, 0x60	; 96
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	82 e8       	ldi	r24, 0x82	; 130
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_displayString>
     1b0:	08 95       	ret
					 else
					 {
						DIO_Init_Pin(25,1);
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	89 e1       	ldi	r24, 0x19	; 25
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
						DIO_toggle_Pin(25);
     1be:	89 e1       	ldi	r24, 0x19	; 25
     1c0:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
						su8_LCD_WRITE_ADC_FLAG=1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
						gu8_Task_ADC_Flag=1;						
     1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu8_Task_ADC_Flag>
						gu8_Task_LCD_Flag=0;
     1ce:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <gu8_Task_LCD_Flag>
						su8_LCD_WRITE_ADC_STATE=0;
     1d2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
     1d6:	08 95       	ret

000001d8 <main>:
}

 int main()
 {
 	/**Small Os Init**/
  	SOS_Init();
     1d8:	0e 94 71 06 	call	0xce2	; 0xce2 <SOS_Init>
 	/**Create tasks**/

 	SOS_Create(&Task_System_Init_3_milisecond,3U,SOS_Function_PERIODIC,0);
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	63 e0       	ldi	r22, 0x03	; 3
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	89 e4       	ldi	r24, 0x49	; 73
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 89 06 	call	0xd12	; 0xd12 <SOS_Create>
    SOS_Create(&Task_ADC_1_Second,1000U,SOS_Function_PERIODIC,1);
     1f0:	21 e0       	ldi	r18, 0x01	; 1
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e0       	ldi	r20, 0x00	; 0
     1f6:	50 e0       	ldi	r21, 0x00	; 0
     1f8:	68 ee       	ldi	r22, 0xE8	; 232
     1fa:	73 e0       	ldi	r23, 0x03	; 3
     1fc:	8d e7       	ldi	r24, 0x7D	; 125
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 89 06 	call	0xd12	; 0xd12 <SOS_Create>
 	SOS_Create(&Task_LCD_3_milisecond,3U,SOS_Function_PERIODIC,2);
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	63 e0       	ldi	r22, 0x03	; 3
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	8f e9       	ldi	r24, 0x9F	; 159
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 89 06 	call	0xd12	; 0xd12 <SOS_Create>

 	/*Start Small OS dispatching**/
  	SOS_Dispatch();
     218:	0e 94 8e 07 	call	0xf1c	; 0xf1c <SOS_Dispatch>
 }
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	08 95       	ret

00000222 <LCD_sendCommand>:
	static uint8_t u8_LCD_clearScreen_state=1;
	if(u8_LCD_clearScreen_state) LCD_sendCommand(0x01,&u8_LCD_clearScreen_state);
	else
	{
		u8_LCD_clearScreen_state=1;
		*Copy_Pntr_u8_LCD_clearScreen_Flag=0;
     222:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <u8_Command_State.1652>
     226:	91 30       	cpi	r25, 0x01	; 1
     228:	69 f0       	breq	.+26     	; 0x244 <LCD_sendCommand+0x22>
     22a:	28 f0       	brcs	.+10     	; 0x236 <LCD_sendCommand+0x14>
     22c:	92 30       	cpi	r25, 0x02	; 2
     22e:	a1 f0       	breq	.+40     	; 0x258 <LCD_sendCommand+0x36>
     230:	93 30       	cpi	r25, 0x03	; 3
     232:	b9 f0       	breq	.+46     	; 0x262 <LCD_sendCommand+0x40>
     234:	08 95       	ret
     236:	d9 98       	cbi	0x1b, 1	; 27
     238:	da 98       	cbi	0x1b, 2	; 27
     23a:	db 9a       	sbi	0x1b, 3	; 27
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <u8_Command_State.1652>
     242:	08 95       	ret
     244:	9b b3       	in	r25, 0x1b	; 27
     246:	9f 70       	andi	r25, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	89 2b       	or	r24, r25
     24c:	8b bb       	out	0x1b, r24	; 27
     24e:	db 98       	cbi	0x1b, 3	; 27
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <u8_Command_State.1652>
     256:	08 95       	ret
     258:	db 9a       	sbi	0x1b, 3	; 27
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <u8_Command_State.1652>
     260:	08 95       	ret
     262:	2b b3       	in	r18, 0x1b	; 27
     264:	2f 70       	andi	r18, 0x0F	; 15
     266:	30 e1       	ldi	r19, 0x10	; 16
     268:	83 9f       	mul	r24, r19
     26a:	c0 01       	movw	r24, r0
     26c:	11 24       	eor	r1, r1
     26e:	82 2b       	or	r24, r18
     270:	8b bb       	out	0x1b, r24	; 27
     272:	db 98       	cbi	0x1b, 3	; 27
     274:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <u8_Command_State.1652>
     278:	fb 01       	movw	r30, r22
     27a:	10 82       	st	Z, r1
     27c:	08 95       	ret

0000027e <LCD_init>:
     27e:	fc 01       	movw	r30, r24
     280:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <u8_LCD_init_state.1642>
     284:	91 30       	cpi	r25, 0x01	; 1
     286:	e1 f0       	breq	.+56     	; 0x2c0 <LCD_init+0x42>
     288:	28 f0       	brcs	.+10     	; 0x294 <LCD_init+0x16>
     28a:	92 30       	cpi	r25, 0x02	; 2
     28c:	51 f1       	breq	.+84     	; 0x2e2 <LCD_init+0x64>
     28e:	93 30       	cpi	r25, 0x03	; 3
     290:	c9 f1       	breq	.+114    	; 0x304 <LCD_init+0x86>
     292:	08 95       	ret
     294:	8a b3       	in	r24, 0x1a	; 26
     296:	80 6f       	ori	r24, 0xF0	; 240
     298:	8a bb       	out	0x1a, r24	; 26
     29a:	d1 9a       	sbi	0x1a, 1	; 26
     29c:	d2 9a       	sbi	0x1a, 2	; 26
     29e:	d3 9a       	sbi	0x1a, 3	; 26
     2a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_LCD_command_state.1641>
     2a4:	88 23       	and	r24, r24
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <LCD_init+0x36>
     2a8:	6a e6       	ldi	r22, 0x6A	; 106
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 11 01 	call	0x222	; 0x222 <LCD_sendCommand>
     2b2:	08 95       	ret
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u8_LCD_command_state.1641>
     2ba:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <u8_LCD_init_state.1642>
     2be:	08 95       	ret
     2c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_LCD_command_state.1641>
     2c4:	88 23       	and	r24, r24
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <LCD_init+0x56>
     2c8:	6a e6       	ldi	r22, 0x6A	; 106
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	0e 94 11 01 	call	0x222	; 0x222 <LCD_sendCommand>
     2d2:	08 95       	ret
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u8_LCD_command_state.1641>
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <u8_LCD_init_state.1642>
     2e0:	08 95       	ret
     2e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_LCD_command_state.1641>
     2e6:	88 23       	and	r24, r24
     2e8:	31 f0       	breq	.+12     	; 0x2f6 <LCD_init+0x78>
     2ea:	6a e6       	ldi	r22, 0x6A	; 106
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	8c e0       	ldi	r24, 0x0C	; 12
     2f0:	0e 94 11 01 	call	0x222	; 0x222 <LCD_sendCommand>
     2f4:	08 95       	ret
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u8_LCD_command_state.1641>
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <u8_LCD_init_state.1642>
     302:	08 95       	ret
     304:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_LCD_command_state.1641>
     308:	88 23       	and	r24, r24
     30a:	31 f0       	breq	.+12     	; 0x318 <LCD_init+0x9a>
     30c:	6a e6       	ldi	r22, 0x6A	; 106
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 11 01 	call	0x222	; 0x222 <LCD_sendCommand>
     316:	08 95       	ret
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u8_LCD_command_state.1641>
     31e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <u8_LCD_init_state.1642>
     322:	10 82       	st	Z, r1
     324:	08 95       	ret

00000326 <LCD_displayCharacter>:
     326:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <u8_displayCharacter.1662>
     32a:	91 30       	cpi	r25, 0x01	; 1
     32c:	69 f0       	breq	.+26     	; 0x348 <LCD_displayCharacter+0x22>
     32e:	28 f0       	brcs	.+10     	; 0x33a <LCD_displayCharacter+0x14>
     330:	92 30       	cpi	r25, 0x02	; 2
     332:	a1 f0       	breq	.+40     	; 0x35c <LCD_displayCharacter+0x36>
     334:	93 30       	cpi	r25, 0x03	; 3
     336:	b9 f0       	breq	.+46     	; 0x366 <LCD_displayCharacter+0x40>
     338:	08 95       	ret
     33a:	d9 9a       	sbi	0x1b, 1	; 27
     33c:	da 98       	cbi	0x1b, 2	; 27
     33e:	db 9a       	sbi	0x1b, 3	; 27
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <u8_displayCharacter.1662>
     346:	08 95       	ret
     348:	9b b3       	in	r25, 0x1b	; 27
     34a:	9f 70       	andi	r25, 0x0F	; 15
     34c:	80 7f       	andi	r24, 0xF0	; 240
     34e:	89 2b       	or	r24, r25
     350:	8b bb       	out	0x1b, r24	; 27
     352:	db 98       	cbi	0x1b, 3	; 27
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <u8_displayCharacter.1662>
     35a:	08 95       	ret
     35c:	db 9a       	sbi	0x1b, 3	; 27
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <u8_displayCharacter.1662>
     364:	08 95       	ret
     366:	2b b3       	in	r18, 0x1b	; 27
     368:	2f 70       	andi	r18, 0x0F	; 15
     36a:	30 e1       	ldi	r19, 0x10	; 16
     36c:	83 9f       	mul	r24, r19
     36e:	c0 01       	movw	r24, r0
     370:	11 24       	eor	r1, r1
     372:	82 2b       	or	r24, r18
     374:	8b bb       	out	0x1b, r24	; 27
     376:	db 98       	cbi	0x1b, 3	; 27
     378:	fb 01       	movw	r30, r22
     37a:	10 82       	st	Z, r1
     37c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <u8_displayCharacter.1662>
     380:	08 95       	ret

00000382 <LCD_displayString>:
     382:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <u8_index_string.1672>
     386:	82 0f       	add	r24, r18
     388:	91 1d       	adc	r25, r1
     38a:	fc 01       	movw	r30, r24
     38c:	80 81       	ld	r24, Z
     38e:	88 23       	and	r24, r24
     390:	81 f0       	breq	.+32     	; 0x3b2 <LCD_displayString+0x30>
     392:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <u8_LCD_displayString_FLag.1673>
     396:	91 30       	cpi	r25, 0x01	; 1
     398:	29 f4       	brne	.+10     	; 0x3a4 <LCD_displayString+0x22>
     39a:	69 e6       	ldi	r22, 0x69	; 105
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	0e 94 93 01 	call	0x326	; 0x326 <LCD_displayCharacter>
     3a2:	08 95       	ret
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u8_LCD_displayString_FLag.1673>
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <u8_index_string.1672>
     3b0:	08 95       	ret
     3b2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <u8_index_string.1672>
     3b6:	fb 01       	movw	r30, r22
     3b8:	10 82       	st	Z, r1
     3ba:	08 95       	ret

000003bc <LCD_goToRowColumn>:
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	19 f0       	breq	.+6      	; 0x3c6 <LCD_goToRowColumn+0xa>
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	21 f0       	breq	.+8      	; 0x3cc <LCD_goToRowColumn+0x10>
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <LCD_goToRowColumn+0x14>
     3c6:	90 e8       	ldi	r25, 0x80	; 128
     3c8:	96 0f       	add	r25, r22
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <LCD_goToRowColumn+0x14>
     3cc:	90 ec       	ldi	r25, 0xC0	; 192
     3ce:	96 0f       	add	r25, r22
     3d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <u8_LCD_goToRowColumn_Flag.1680>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <LCD_goToRowColumn+0x28>
     3d8:	68 e6       	ldi	r22, 0x68	; 104
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	89 2f       	mov	r24, r25
     3de:	0e 94 11 01 	call	0x222	; 0x222 <LCD_sendCommand>
     3e2:	08 95       	ret
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <u8_LCD_goToRowColumn_Flag.1680>
     3ea:	fa 01       	movw	r30, r20
     3ec:	10 82       	st	Z, r1
     3ee:	08 95       	ret

000003f0 <LCD_stringRowCol>:
     3f0:	fc 01       	movw	r30, r24
     3f2:	76 2f       	mov	r23, r22
     3f4:	64 2f       	mov	r22, r20
     3f6:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <u8_LCD_stringRowCol_State.1693>
     3fa:	99 23       	and	r25, r25
     3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3fe:	91 30       	cpi	r25, 0x01	; 1
     400:	89 f0       	breq	.+34     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     402:	08 95       	ret
     404:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <u8_LCD_goToRowColumn_FLAG.1692>
     408:	88 23       	and	r24, r24
     40a:	31 f0       	breq	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     40c:	47 e6       	ldi	r20, 0x67	; 103
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	87 2f       	mov	r24, r23
     412:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_goToRowColumn>
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <u8_LCD_goToRowColumn_FLAG.1692>
     41e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_LCD_stringRowCol_State.1693>
     422:	08 95       	ret
     424:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <u8_LCD_displayString_FLAG.1691>
     428:	88 23       	and	r24, r24
     42a:	31 f0       	breq	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42c:	66 e6       	ldi	r22, 0x66	; 102
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	cf 01       	movw	r24, r30
     432:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_displayString>
     436:	08 95       	ret
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <u8_LCD_displayString_FLAG.1691>
     43e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <u8_LCD_stringRowCol_State.1693>
     442:	f9 01       	movw	r30, r18
     444:	10 82       	st	Z, r1
     446:	08 95       	ret

00000448 <LCD_integerToString>:
/*
 * integerToString.
 */

void LCD_integerToString(uint32_t value,uint8_t row,uint8_t col,uint8_t* Copy_Pntr_u8_LCD_integerToString_Flag)
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	a8 97       	sbiw	r28, 0x28	; 40
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	f6 2e       	mov	r15, r22
     466:	e4 2e       	mov	r14, r20
     468:	89 01       	movw	r16, r18
	static uint8_t u8_LCD_integerToString_FLAG=1;
	uint32_t buffer[20];
	itoa(value, buffer , 10);
     46a:	4a e0       	ldi	r20, 0x0A	; 10
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	be 01       	movw	r22, r28
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	0e 94 da 09 	call	0x13b4	; 0x13b4 <itoa>
	if(u8_LCD_integerToString_FLAG==1) LCD_stringRowCol(buffer,row,col,&u8_LCD_integerToString_FLAG);
     478:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <u8_LCD_integerToString_FLAG.1708>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	49 f4       	brne	.+18     	; 0x492 <LCD_integerToString+0x4a>
     480:	25 e6       	ldi	r18, 0x65	; 101
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	4e 2d       	mov	r20, r14
     486:	6f 2d       	mov	r22, r15
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_stringRowCol>
     490:	05 c0       	rjmp	.+10     	; 0x49c <LCD_integerToString+0x54>
	else
	{
		u8_LCD_integerToString_FLAG=1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <u8_LCD_integerToString_FLAG.1708>
		*Copy_Pntr_u8_LCD_integerToString_Flag=0;
     498:	f8 01       	movw	r30, r16
     49a:	10 82       	st	Z, r1
	}
     49c:	a8 96       	adiw	r28, 0x28	; 40
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <ADC_INIT>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS PROTOTYPES ----------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/
ADC_Error_t ADC_INIT(gstrADC_Config_t*CopyPntrStr_ADC_Init_Config)
 { 
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
      if(NullPointer!=CopyPntrStr_ADC_Init_Config)
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <ADC_INIT+0xa>
     4be:	ca c0       	rjmp	.+404    	; 0x654 <ADC_INIT+0x19e>
     4c0:	ec 01       	movw	r28, r24
	  {
		    /***Enable ADC unit***/
			ADC_Unit_Enable();
     4c2:	37 98       	cbi	0x06, 7	; 6
     4c4:	37 9a       	sbi	0x06, 7	; 6

			/**** Configure the input channel for ADC****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)<ADC_Channel_0                ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose)>ADC_Channel_7         ) ) 
     4c6:	88 81       	ld	r24, Y
     4c8:	99 81       	ldd	r25, Y+1	; 0x01
     4ca:	88 30       	cpi	r24, 0x08	; 8
     4cc:	91 05       	cpc	r25, r1
     4ce:	70 f0       	brcs	.+28     	; 0x4ec <ADC_INIT+0x36>
			{
				DIO_Init_Pin(12,1);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(12);			
     4dc:	8c e0       	ldi	r24, 0x0C	; 12
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_CHANNEL_CHOOSE ;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <ADC_INIT+0x46>
			}
			else
			{

				ADC_Channel_Set(CopyPntrStr_ADC_Init_Config->ADC_Channel_Choose);	 
     4ec:	96 b1       	in	r25, 0x06	; 6
     4ee:	80 95       	com	r24
     4f0:	89 23       	and	r24, r25
     4f2:	86 b9       	out	0x06, r24	; 6
     4f4:	97 b1       	in	r25, 0x07	; 7
     4f6:	88 81       	ld	r24, Y
     4f8:	89 2b       	or	r24, r25
     4fa:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC Refrence voltage****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)<ADC_Voltage_Refrence_AREF) || ( (CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage)>ADC_Voltage_Internal ) )
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	9b 81       	ldd	r25, Y+3	; 0x03
     500:	81 3c       	cpi	r24, 0xC1	; 193
     502:	91 05       	cpc	r25, r1
     504:	70 f0       	brcs	.+28     	; 0x522 <ADC_INIT+0x6c>
			{
				DIO_Init_Pin(13,1);
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	8d e0       	ldi	r24, 0x0D	; 13
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(13);
     512:	8d e0       	ldi	r24, 0x0D	; 13
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_VOLTAGE_REFRENCE_CHOOSE ;
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
     520:	08 c0       	rjmp	.+16     	; 0x532 <ADC_INIT+0x7c>
			}
			else
			{
				ADC_Voltage_Refrence_Set(CopyPntrStr_ADC_Init_Config->ADC_Reference_Voltage); 	 
     522:	96 b1       	in	r25, 0x06	; 6
     524:	80 95       	com	r24
     526:	89 23       	and	r24, r25
     528:	86 b9       	out	0x06, r24	; 6
     52a:	97 b1       	in	r25, 0x07	; 7
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	89 2b       	or	r24, r25
     530:	87 b9       	out	0x07, r24	; 7
			}
			/**** Configure ADC sampling frequency ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)<ADC_Freq_4MHZ                     ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Frequency)        >ADC_Freq_125KHZ       ) ) 
     532:	8c 81       	ldd	r24, Y+4	; 0x04
     534:	9d 81       	ldd	r25, Y+5	; 0x05
     536:	07 97       	sbiw	r24, 0x07	; 7
     538:	70 f0       	brcs	.+28     	; 0x556 <ADC_INIT+0xa0>
			{
				DIO_Init_Pin(14,1);
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	8e e0       	ldi	r24, 0x0E	; 14
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(14);			
     546:	8e e0       	ldi	r24, 0x0E	; 14
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_FREQUENCY_CHOOSE ;
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
     554:	07 c0       	rjmp	.+14     	; 0x564 <ADC_INIT+0xae>
			}
			else
			{
				ADC_Choose_Frequency(CopyPntrStr_ADC_Init_Config->ADC_Frequency);
     556:	86 b1       	in	r24, 0x06	; 6
     558:	88 7f       	andi	r24, 0xF8	; 248
     55a:	86 b9       	out	0x06, r24	; 6
     55c:	96 b1       	in	r25, 0x06	; 6
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	89 2b       	or	r24, r25
     562:	86 b9       	out	0x06, r24	; 6
			}
			/**** Configure Auto Trigger if it is requested by the user ****/
			if( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Enable ) 
     564:	8e 81       	ldd	r24, Y+6	; 0x06
     566:	9f 81       	ldd	r25, Y+7	; 0x07
     568:	85 31       	cpi	r24, 0x15	; 21
     56a:	91 05       	cpc	r25, r1
     56c:	19 f4       	brne	.+6      	; 0x574 <ADC_INIT+0xbe>
			{

				ADC_Auto_Trigger_Set();
     56e:	35 98       	cbi	0x06, 5	; 6
     570:	35 9a       	sbi	0x06, 5	; 6
     572:	0f c0       	rjmp	.+30     	; 0x592 <ADC_INIT+0xdc>
			}
			else if ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Enable)==ADC_Auto_Trigger_Disable ) 
     574:	46 97       	sbiw	r24, 0x16	; 22
     576:	69 f0       	breq	.+26     	; 0x592 <ADC_INIT+0xdc>
			{
				/*Do Nothing*/
			}
			else
			{
				DIO_Init_Pin(15,1);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	8f e0       	ldi	r24, 0x0F	; 15
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(15);				
     584:	8f e0       	ldi	r24, 0x0F	; 15
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_TRIGGER_ENABLE_NOR_DISABLE;
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
		 
			}
			/**** Configure Source of auto triggering  ****/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)<ADC_Auto_Trig_Source_Free_Running_mode_Bits      ) ||  (CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)>ADC_No_Need_To_Trigger  )
     592:	88 85       	ldd	r24, Y+8	; 0x08
     594:	99 85       	ldd	r25, Y+9	; 0x09
     596:	82 3e       	cpi	r24, 0xE2	; 226
     598:	91 05       	cpc	r25, r1
     59a:	70 f0       	brcs	.+28     	; 0x5b8 <ADC_INIT+0x102>
			{
				DIO_Init_Pin(16,1);
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	80 e1       	ldi	r24, 0x10	; 16
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(16);				
     5a8:	80 e1       	ldi	r24, 0x10	; 16
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_TRIGGER ;		 
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
     5b6:	0b c0       	rjmp	.+22     	; 0x5ce <ADC_INIT+0x118>
			} 
			else if((CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source)!=ADC_No_Need_To_Trigger  )
     5b8:	81 3e       	cpi	r24, 0xE1	; 225
     5ba:	91 05       	cpc	r25, r1
     5bc:	41 f0       	breq	.+16     	; 0x5ce <ADC_INIT+0x118>
			{
		 	    ADC_Auto_Trigger_Source_Set(CopyPntrStr_ADC_Init_Config->ADC_Auto_Trig_Source);
     5be:	90 b7       	in	r25, 0x30	; 48
     5c0:	80 95       	com	r24
     5c2:	89 23       	and	r24, r25
     5c4:	80 bf       	out	0x30, r24	; 48
     5c6:	90 b7       	in	r25, 0x30	; 48
     5c8:	88 85       	ldd	r24, Y+8	; 0x08
     5ca:	89 2b       	or	r24, r25
     5cc:	80 bf       	out	0x30, r24	; 48
			{
			
				/*Do Nothing*/
			}
			/**** Configure Left or Right Data Register ****/
			if(  (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Left_Adjustment    )  
     5ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     5d2:	80 32       	cpi	r24, 0x20	; 32
     5d4:	91 05       	cpc	r25, r1
     5d6:	31 f4       	brne	.+12     	; 0x5e4 <ADC_INIT+0x12e>
			{

				ADC_Data_Left_Adjustment_Set(); 
     5d8:	3d 98       	cbi	0x07, 5	; 7
     5da:	3d 9a       	sbi	0x07, 5	; 7
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Left_Adjustment;
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     5e2:	13 c0       	rjmp	.+38     	; 0x60a <ADC_INIT+0x154>
			}
			else if( (CopyPntrStr_ADC_Init_Config->ADC_Left_Right_Adjustment)==ADC_Right_Adjustment )
     5e4:	81 97       	sbiw	r24, 0x21	; 33
     5e6:	21 f4       	brne	.+8      	; 0x5f0 <ADC_INIT+0x13a>
			{
		 
				sgu8_ADC_Left_Adjust_Enabled_Flag=ADC_Right_Adjustment;
     5e8:	81 e2       	ldi	r24, 0x21	; 33
     5ea:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     5ee:	0d c0       	rjmp	.+26     	; 0x60a <ADC_INIT+0x154>
			}	
			else
			{
				DIO_Init_Pin(17,1);
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	81 e1       	ldi	r24, 0x11	; 17
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(17);				
     5fc:	81 e1       	ldi	r24, 0x11	; 17
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NEITHER_LEFT_NOR_RIGHT;			 
     604:	87 e0       	ldi	r24, 0x07	; 7
     606:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
		
			}
			
			/**Configure Execution Way**/
			if( ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)<ADC_Executed_By_Interrupt      ) || ( (CopyPntrStr_ADC_Init_Config->ADC_Execution_Method)>ADC_Executed_By_Event_Driven  ) )
     60a:	8c 85       	ldd	r24, Y+12	; 0x0c
     60c:	9d 85       	ldd	r25, Y+13	; 0x0d
     60e:	9c 01       	movw	r18, r24
     610:	22 52       	subi	r18, 0x22	; 34
     612:	31 09       	sbc	r19, r1
     614:	24 30       	cpi	r18, 0x04	; 4
     616:	31 05       	cpc	r19, r1
     618:	70 f0       	brcs	.+28     	; 0x636 <ADC_INIT+0x180>
			{
				DIO_Init_Pin(18,1);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	82 e1       	ldi	r24, 0x12	; 18
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
				DIO_toggle_Pin(18);			
     626:	82 e1       	ldi	r24, 0x12	; 18
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
				sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_NO_DEFINED_EXECUTION_METHOD ;
     62e:	8a e0       	ldi	r24, 0x0A	; 10
     630:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
     634:	12 c0       	rjmp	.+36     	; 0x65a <ADC_INIT+0x1a4>
			}
			else if(  CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Interrupt || CopyPntrStr_ADC_Init_Config->ADC_Execution_Method ==ADC_Executed_By_Event_Driven)
     636:	82 32       	cpi	r24, 0x22	; 34
     638:	91 05       	cpc	r25, r1
     63a:	19 f0       	breq	.+6      	; 0x642 <ADC_INIT+0x18c>
     63c:	85 32       	cpi	r24, 0x25	; 37
     63e:	91 05       	cpc	r25, r1
     640:	31 f4       	brne	.+12     	; 0x64e <ADC_INIT+0x198>
			{
				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
     642:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <sgu8_ADC_Execution_Way>
				EnableGeneralInterrupt();
     646:	8f b7       	in	r24, 0x3f	; 63
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	8f bf       	out	0x3f, r24	; 63
     64c:	06 c0       	rjmp	.+12     	; 0x65a <ADC_INIT+0x1a4>

			}
			else 
			{

				sgu8_ADC_Execution_Way=CopyPntrStr_ADC_Init_Config->ADC_Execution_Method;
     64e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <sgu8_ADC_Execution_Way>
     652:	03 c0       	rjmp	.+6      	; 0x65a <ADC_INIT+0x1a4>
     		}
	}
	else
	{
		sgADC_Error_ADC_INIT_API=ADC_INIT_ERROR_Config_Pointer_Point_To_NULL;
     654:	89 e0       	ldi	r24, 0x09	; 9
     656:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sgADC_Error_ADC_INIT_API>
	}
		 return  sgADC_Error_ADC_INIT_API;     
 }
     65a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <sgADC_Error_ADC_INIT_API>
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <ADC_READ>:
 
ADC_Error_t ADC_READ(uint32_t* Copyu32_ADC_Value,PntrToFunc_t Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR,uint8_t* Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG)
 {
     664:	fc 01       	movw	r30, r24
     int Ain,AinLow;
     static uint8_t Event_Driven_1st_time=1;
	 static uint8_t sgu8_ADC_READ_STATE=0;

     /*Check that there is no error occur while initialization*/	 
	 if(sgADC_Error_ADC_INIT_API==ADC_INIT_API_NO_ERROR)
     666:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <sgADC_Error_ADC_INIT_API>
     66a:	91 11       	cpse	r25, r1
     66c:	7d c0       	rjmp	.+250    	; 0x768 <ADC_READ+0x104>
	 { 	
	  	 
         /**Check If the execution way is done by polling **/ 	
		 if(sgu8_ADC_Execution_Way==ADC_Executed_By_Polling)
     66e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <sgu8_ADC_Execution_Way>
     672:	83 32       	cpi	r24, 0x23	; 35
     674:	e9 f4       	brne	.+58     	; 0x6b0 <ADC_READ+0x4c>
		 {

			 ADC_Start_Conversion();
     676:	36 9a       	sbi	0x06, 6	; 6

			 while(ADC_Read_Interrupt_Flag_State()==0);
     678:	34 9b       	sbis	0x06, 4	; 6
     67a:	fe cf       	rjmp	.-4      	; 0x678 <ADC_READ+0x14>

             /**Check If the data is left adjusted or right**/ 			 
			 if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     67c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     680:	80 32       	cpi	r24, 0x20	; 32
     682:	79 f4       	brne	.+30     	; 0x6a2 <ADC_READ+0x3e>
			 {				
				  *Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     684:	85 b1       	in	r24, 0x05	; 5
     686:	24 b1       	in	r18, 0x04	; 4
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	22 95       	swap	r18
     694:	26 95       	lsr	r18
     696:	26 95       	lsr	r18
     698:	23 70       	andi	r18, 0x03	; 3
     69a:	82 2b       	or	r24, r18
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	80 83       	st	Z, r24
     6a0:	66 c0       	rjmp	.+204    	; 0x76e <ADC_READ+0x10a>
			 }
			 else
			 {
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
     6a2:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
     6a4:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	92 2b       	or	r25, r18
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	5f c0       	rjmp	.+190    	; 0x76e <ADC_READ+0x10a>
		 }
         /**Check If the execution way is done by interrupt or event or time driven **/ 		 
		 else
		 {
			 
			 if(sgu8_ADC_Execution_Way!=ADC_Executed_By_Time_Driven)
     6b0:	84 32       	cpi	r24, 0x24	; 36
     6b2:	71 f1       	breq	.+92     	; 0x710 <ADC_READ+0xac>
			 {

				if(Event_Driven_1st_time==1)
     6b4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Event_Driven_1st_time.1649>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	29 f4       	brne	.+10     	; 0x6c6 <ADC_READ+0x62>
				{
					ADC_Interrupt_Enable();
     6bc:	33 98       	cbi	0x06, 3	; 6
     6be:	33 9a       	sbi	0x06, 3	; 6
					ADC_Start_Conversion();
     6c0:	36 9a       	sbi	0x06, 6	; 6
					Event_Driven_1st_time=0;
     6c2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Event_Driven_1st_time.1649>
				}
			
			    /*while(ADC_Read_Interrupt_Flag_State()==0);*/
				/**Check If PntrToFunction does'nt point to NullPointer**/
				if(NullPointer!=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR)
     6c6:	61 15       	cp	r22, r1
     6c8:	71 05       	cpc	r23, r1
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <ADC_READ+0x72>
				{
				 
					sgPntrToFun_ADC_ISR=Copy_PntrToFunc_Requsted_From_User_Called_In_ADC_ISR;
     6cc:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <sgPntrToFun_ADC_ISR+0x1>
     6d0:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <sgPntrToFun_ADC_ISR>
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <ADC_READ+0x78>
				}
				else
				{
					sgADC_Error_ADC_READ_API=ADC_READ_CALL_BACK_POITNER_IS_NULL;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sgADC_Error_ADC_READ_API>
				}
				/**Check If the data is left adjusted or right**/
				if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     6dc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     6e0:	80 32       	cpi	r24, 0x20	; 32
     6e2:	79 f4       	brne	.+30     	; 0x702 <ADC_READ+0x9e>
				{
						             
					*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     6e4:	85 b1       	in	r24, 0x05	; 5
     6e6:	24 b1       	in	r18, 0x04	; 4
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	22 95       	swap	r18
     6f4:	26 95       	lsr	r18
     6f6:	26 95       	lsr	r18
     6f8:	23 70       	andi	r18, 0x03	; 3
     6fa:	82 2b       	or	r24, r18
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
     700:	36 c0       	rjmp	.+108    	; 0x76e <ADC_READ+0x10a>
				}
				else
				{
					AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
     702:	84 b1       	in	r24, 0x04	; 4
					Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
     704:	25 b1       	in	r18, 0x05	; 5
					*Copyu32_ADC_Value=Ain|AinLow ;
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	92 2b       	or	r25, r18
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
     70e:	2f c0       	rjmp	.+94     	; 0x76e <ADC_READ+0x10a>
				}
			 }
			 else
			 {
				switch(sgu8_ADC_READ_STATE)
     710:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <sgu8_ADC_READ_STATE.1650>
     714:	88 23       	and	r24, r24
     716:	19 f0       	breq	.+6      	; 0x71e <ADC_READ+0xba>
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	31 f0       	breq	.+12     	; 0x728 <ADC_READ+0xc4>
     71c:	28 c0       	rjmp	.+80     	; 0x76e <ADC_READ+0x10a>
				{
					case 0:
					{

				        ADC_Start_Conversion();
     71e:	36 9a       	sbi	0x06, 6	; 6
						sgu8_ADC_READ_STATE=1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <sgu8_ADC_READ_STATE.1650>
						

					}

					break;
     726:	23 c0       	rjmp	.+70     	; 0x76e <ADC_READ+0x10a>
					case 1:
					{

/*							SET_BIT(ADC_CNTRL_STATUS_REG,ADC_Interrupt_flag_Bit);*/
                      		/**Check If the data is left adjusted or right**/
                      		if(sgu8_ADC_Left_Adjust_Enabled_Flag==ADC_Left_Adjustment)
     728:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <sgu8_ADC_Left_Adjust_Enabled_Flag>
     72c:	80 32       	cpi	r24, 0x20	; 32
     72e:	79 f4       	brne	.+30     	; 0x74e <ADC_READ+0xea>
                      		{
	                      					
	                      		*Copyu32_ADC_Value=((uint32_t)(ADC_DATA_HIGH_REG<<2))|(uint8_t)(ADC_DATA_LOW_REG>>6);
     730:	85 b1       	in	r24, 0x05	; 5
     732:	24 b1       	in	r18, 0x04	; 4
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	22 95       	swap	r18
     740:	26 95       	lsr	r18
     742:	26 95       	lsr	r18
     744:	23 70       	andi	r18, 0x03	; 3
     746:	82 2b       	or	r24, r18
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	80 83       	st	Z, r24
     74c:	06 c0       	rjmp	.+12     	; 0x75a <ADC_READ+0xf6>
                      		}
                      		else
                      		{
								AinLow = (uint32_t)ADC_DATA_LOW_REG;		/* Read lower byte*/
     74e:	84 b1       	in	r24, 0x04	; 4
								Ain = (uint32_t)(ADC_DATA_HIGH_REG<<8);		/* Read higher 2 bits and*/
     750:	25 b1       	in	r18, 0x05	; 5
							   *Copyu32_ADC_Value=Ain|AinLow ;	
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	92 2b       	or	r25, r18
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	80 83       	st	Z, r24
                      		}	
							ADC_Start_Conversion();  		
     75a:	36 9a       	sbi	0x06, 6	; 6
							sgu8_ADC_READ_STATE=1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <sgu8_ADC_READ_STATE.1650>
							*Copy_Pntr_u8_ADC_READ_TIME_EVENT_FLAG=0;
     762:	fa 01       	movw	r30, r20
     764:	10 82       	st	Z, r1
						
						}									

					break;
     766:	03 c0       	rjmp	.+6      	; 0x76e <ADC_READ+0x10a>
	 		 
		 }
	 }
	 else
	 {
		 sgADC_Error_ADC_READ_API=ADC_READ_ERROR_Due_To_ADC_INIT_ERROR;
     768:	8f e1       	ldi	r24, 0x1F	; 31
     76a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sgADC_Error_ADC_READ_API>
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
     76e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <sgADC_Error_ADC_READ_API>
     772:	08 95       	ret

00000774 <__vector_16>:
 
ADC_ISR_CODE()
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	if(NullPointer!=sgPntrToFun_ADC_ISR)
     796:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <sgPntrToFun_ADC_ISR>
     79a:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sgPntrToFun_ADC_ISR+0x1>
     79e:	89 2b       	or	r24, r25
     7a0:	91 f0       	breq	.+36     	; 0x7c6 <__vector_16+0x52>
	{
			sgPntrToFun_ADC_ISR();
     7a2:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <sgPntrToFun_ADC_ISR>
     7a6:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <sgPntrToFun_ADC_ISR+0x1>
     7aa:	09 95       	icall
			DIO_Init_Pin(26,1);
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	8a e1       	ldi	r24, 0x1A	; 26
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_Init_Pin>
			DIO_toggle_Pin(26);
     7b8:	8a e1       	ldi	r24, 0x1A	; 26
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_toggle_Pin>
            SET_BIT(TIMER_EVENT_FLAGS_REG,2);
     7c0:	88 b7       	in	r24, 0x38	; 56
     7c2:	84 60       	ori	r24, 0x04	; 4
     7c4:	88 bf       	out	0x38, r24	; 56
	{
		/*Do Nothing*/
	}

	
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <DIO_Init_Pin>:
		default :
		return DIO_ERROR_NOK;
		break;
		}
return DIO_ERROR_OK;
}
     7e8:	80 32       	cpi	r24, 0x20	; 32
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <DIO_Init_Pin+0x6>
     7ec:	8f c0       	rjmp	.+286    	; 0x90c <__stack+0xad>
     7ee:	98 2f       	mov	r25, r24
     7f0:	97 70       	andi	r25, 0x07	; 7
     7f2:	86 95       	lsr	r24
     7f4:	86 95       	lsr	r24
     7f6:	86 95       	lsr	r24
     7f8:	8f 5b       	subi	r24, 0xBF	; 191
     7fa:	82 34       	cpi	r24, 0x42	; 66
     7fc:	51 f1       	breq	.+84     	; 0x852 <DIO_Init_Pin+0x6a>
     7fe:	18 f4       	brcc	.+6      	; 0x806 <DIO_Init_Pin+0x1e>
     800:	81 34       	cpi	r24, 0x41	; 65
     802:	41 f0       	breq	.+16     	; 0x814 <DIO_Init_Pin+0x2c>
     804:	85 c0       	rjmp	.+266    	; 0x910 <__stack+0xb1>
     806:	83 34       	cpi	r24, 0x43	; 67
     808:	09 f4       	brne	.+2      	; 0x80c <DIO_Init_Pin+0x24>
     80a:	42 c0       	rjmp	.+132    	; 0x890 <__stack+0x31>
     80c:	84 34       	cpi	r24, 0x44	; 68
     80e:	09 f4       	brne	.+2      	; 0x812 <DIO_Init_Pin+0x2a>
     810:	5e c0       	rjmp	.+188    	; 0x8ce <__stack+0x6f>
     812:	7e c0       	rjmp	.+252    	; 0x910 <__stack+0xb1>
     814:	61 11       	cpse	r22, r1
     816:	0f c0       	rjmp	.+30     	; 0x836 <DIO_Init_Pin+0x4e>
     818:	4a b3       	in	r20, 0x1a	; 26
     81a:	21 e0       	ldi	r18, 0x01	; 1
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	b9 01       	movw	r22, r18
     820:	02 c0       	rjmp	.+4      	; 0x826 <DIO_Init_Pin+0x3e>
     822:	66 0f       	add	r22, r22
     824:	77 1f       	adc	r23, r23
     826:	9a 95       	dec	r25
     828:	e2 f7       	brpl	.-8      	; 0x822 <DIO_Init_Pin+0x3a>
     82a:	cb 01       	movw	r24, r22
     82c:	80 95       	com	r24
     82e:	84 23       	and	r24, r20
     830:	8a bb       	out	0x1a, r24	; 26
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
     836:	4a b3       	in	r20, 0x1a	; 26
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	b9 01       	movw	r22, r18
     83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_Init_Pin+0x5c>
     840:	66 0f       	add	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	9a 95       	dec	r25
     846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_Init_Pin+0x58>
     848:	cb 01       	movw	r24, r22
     84a:	84 2b       	or	r24, r20
     84c:	8a bb       	out	0x1a, r24	; 26
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	08 95       	ret
     852:	61 11       	cpse	r22, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <__stack+0x15>
     856:	47 b3       	in	r20, 0x17	; 23
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	b9 01       	movw	r22, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
     860:	66 0f       	add	r22, r22
     862:	77 1f       	adc	r23, r23
     864:	9a 95       	dec	r25
     866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
     868:	cb 01       	movw	r24, r22
     86a:	80 95       	com	r24
     86c:	84 23       	and	r24, r20
     86e:	87 bb       	out	0x17, r24	; 23
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 95       	ret
     874:	47 b3       	in	r20, 0x17	; 23
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	b9 01       	movw	r22, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	9a 95       	dec	r25
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	cb 01       	movw	r24, r22
     888:	84 2b       	or	r24, r20
     88a:	87 bb       	out	0x17, r24	; 23
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
     890:	61 11       	cpse	r22, r1
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <__stack+0x53>
     894:	44 b3       	in	r20, 0x14	; 20
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	b9 01       	movw	r22, r18
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	66 0f       	add	r22, r22
     8a0:	77 1f       	adc	r23, r23
     8a2:	9a 95       	dec	r25
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	cb 01       	movw	r24, r22
     8a8:	80 95       	com	r24
     8aa:	84 23       	and	r24, r20
     8ac:	84 bb       	out	0x14, r24	; 20
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	08 95       	ret
     8b2:	44 b3       	in	r20, 0x14	; 20
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	b9 01       	movw	r22, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	66 0f       	add	r22, r22
     8be:	77 1f       	adc	r23, r23
     8c0:	9a 95       	dec	r25
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	cb 01       	movw	r24, r22
     8c6:	84 2b       	or	r24, r20
     8c8:	84 bb       	out	0x14, r24	; 20
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	08 95       	ret
     8ce:	61 11       	cpse	r22, r1
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <__stack+0x91>
     8d2:	41 b3       	in	r20, 0x11	; 17
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	b9 01       	movw	r22, r18
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	66 0f       	add	r22, r22
     8de:	77 1f       	adc	r23, r23
     8e0:	9a 95       	dec	r25
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	cb 01       	movw	r24, r22
     8e6:	80 95       	com	r24
     8e8:	84 23       	and	r24, r20
     8ea:	81 bb       	out	0x11, r24	; 17
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	08 95       	ret
     8f0:	41 b3       	in	r20, 0x11	; 17
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	b9 01       	movw	r22, r18
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
     8fa:	66 0f       	add	r22, r22
     8fc:	77 1f       	adc	r23, r23
     8fe:	9a 95       	dec	r25
     900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
     902:	cb 01       	movw	r24, r22
     904:	84 2b       	or	r24, r20
     906:	81 bb       	out	0x11, r24	; 17
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	08 95       	ret
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	08 95       	ret

00000914 <DIO_toggle_Pin>:
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     914:	80 32       	cpi	r24, 0x20	; 32
     916:	08 f0       	brcs	.+2      	; 0x91a <DIO_toggle_Pin+0x6>
     918:	49 c0       	rjmp	.+146    	; 0x9ac <DIO_toggle_Pin+0x98>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
     91a:	98 2f       	mov	r25, r24
     91c:	97 70       	andi	r25, 0x07	; 7
	}
	
	switch(por)
     91e:	86 95       	lsr	r24
     920:	86 95       	lsr	r24
     922:	86 95       	lsr	r24
     924:	8f 5b       	subi	r24, 0xBF	; 191
     926:	82 34       	cpi	r24, 0x42	; 66
     928:	b9 f0       	breq	.+46     	; 0x958 <DIO_toggle_Pin+0x44>
     92a:	18 f4       	brcc	.+6      	; 0x932 <DIO_toggle_Pin+0x1e>
     92c:	81 34       	cpi	r24, 0x41	; 65
     92e:	31 f0       	breq	.+12     	; 0x93c <DIO_toggle_Pin+0x28>
     930:	3f c0       	rjmp	.+126    	; 0x9b0 <DIO_toggle_Pin+0x9c>
     932:	83 34       	cpi	r24, 0x43	; 67
     934:	f9 f0       	breq	.+62     	; 0x974 <DIO_toggle_Pin+0x60>
     936:	84 34       	cpi	r24, 0x44	; 68
     938:	59 f1       	breq	.+86     	; 0x990 <DIO_toggle_Pin+0x7c>
     93a:	3a c0       	rjmp	.+116    	; 0x9b0 <DIO_toggle_Pin+0x9c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
     93c:	4b b3       	in	r20, 0x1b	; 27
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	b9 01       	movw	r22, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_toggle_Pin+0x36>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	9a 95       	dec	r25
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_toggle_Pin+0x32>
     94e:	cb 01       	movw	r24, r22
     950:	84 27       	eor	r24, r20
     952:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     954:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
     956:	08 95       	ret
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
     958:	48 b3       	in	r20, 0x18	; 24
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	b9 01       	movw	r22, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_toggle_Pin+0x52>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	9a 95       	dec	r25
     968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_toggle_Pin+0x4e>
     96a:	cb 01       	movw	r24, r22
     96c:	84 27       	eor	r24, r20
     96e:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     970:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
     972:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
     974:	45 b3       	in	r20, 0x15	; 21
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	b9 01       	movw	r22, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_toggle_Pin+0x6e>
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	9a 95       	dec	r25
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_toggle_Pin+0x6a>
     986:	cb 01       	movw	r24, r22
     988:	84 27       	eor	r24, r20
     98a:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     98c:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
     98e:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
     990:	42 b3       	in	r20, 0x12	; 18
     992:	21 e0       	ldi	r18, 0x01	; 1
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	b9 01       	movw	r22, r18
     998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_toggle_Pin+0x8a>
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	9a 95       	dec	r25
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_toggle_Pin+0x86>
     9a2:	cb 01       	movw	r24, r22
     9a4:	84 27       	eor	r24, r20
     9a6:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
     9aa:	08 95       	ret
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 95       	ret
			 break;
		case 'G':TOGGLE_BIT(PORTG,pin);
			 break;
#endif
		default :
		return DIO_ERROR_NOK;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	return DIO_ERROR_OK;
}
     9b2:	08 95       	ret

000009b4 <Timer_Init>:
		}
		break;
	}
	
	return TIMER_ERROR_OK;
}
     9b4:	fc 01       	movw	r30, r24
     9b6:	89 2b       	or	r24, r25
     9b8:	09 f4       	brne	.+2      	; 0x9bc <Timer_Init+0x8>
     9ba:	47 c0       	rjmp	.+142    	; 0xa4a <Timer_Init+0x96>
     9bc:	90 81       	ld	r25, Z
     9be:	29 2f       	mov	r18, r25
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	d9 01       	movw	r26, r18
     9c4:	a1 56       	subi	r26, 0x61	; 97
     9c6:	bf 4f       	sbci	r27, 0xFF	; 255
     9c8:	8c 91       	ld	r24, X
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <Timer_Init+0x1c>
     9ce:	48 c0       	rjmp	.+144    	; 0xa60 <Timer_Init+0xac>
     9d0:	93 30       	cpi	r25, 0x03	; 3
     9d2:	e8 f5       	brcc	.+122    	; 0xa4e <Timer_Init+0x9a>
     9d4:	82 81       	ldd	r24, Z+2	; 0x02
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	e0 f5       	brcc	.+120    	; 0xa52 <Timer_Init+0x9e>
     9da:	43 81       	ldd	r20, Z+3	; 0x03
     9dc:	42 30       	cpi	r20, 0x02	; 2
     9de:	d8 f5       	brcc	.+118    	; 0xa56 <Timer_Init+0xa2>
     9e0:	51 81       	ldd	r21, Z+1	; 0x01
     9e2:	58 30       	cpi	r21, 0x08	; 8
     9e4:	d0 f5       	brcc	.+116    	; 0xa5a <Timer_Init+0xa6>
     9e6:	d9 01       	movw	r26, r18
     9e8:	a1 56       	subi	r26, 0x61	; 97
     9ea:	bf 4f       	sbci	r27, 0xFF	; 255
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	6c 93       	st	X, r22
     9f0:	d9 01       	movw	r26, r18
     9f2:	ae 55       	subi	r26, 0x5E	; 94
     9f4:	bf 4f       	sbci	r27, 0xFF	; 255
     9f6:	8c 93       	st	X, r24
     9f8:	d9 01       	movw	r26, r18
     9fa:	ab 55       	subi	r26, 0x5B	; 91
     9fc:	bf 4f       	sbci	r27, 0xFF	; 255
     9fe:	4c 93       	st	X, r20
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	d9 f4       	brne	.+54     	; 0xa3a <Timer_Init+0x86>
     a04:	91 30       	cpi	r25, 0x01	; 1
     a06:	61 f0       	breq	.+24     	; 0xa20 <Timer_Init+0x6c>
     a08:	18 f0       	brcs	.+6      	; 0xa10 <Timer_Init+0x5c>
     a0a:	92 30       	cpi	r25, 0x02	; 2
     a0c:	99 f0       	breq	.+38     	; 0xa34 <Timer_Init+0x80>
     a0e:	08 95       	ret
     a10:	83 b7       	in	r24, 0x33	; 51
     a12:	88 60       	ori	r24, 0x08	; 8
     a14:	83 bf       	out	0x33, r24	; 51
     a16:	93 b7       	in	r25, 0x33	; 51
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	89 2b       	or	r24, r25
     a1c:	83 bf       	out	0x33, r24	; 51
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <Timer_Init+0x86>
     a20:	8f b5       	in	r24, 0x2f	; 47
     a22:	8f bd       	out	0x2f, r24	; 47
     a24:	8e b5       	in	r24, 0x2e	; 46
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	8e bd       	out	0x2e, r24	; 46
     a2a:	9e b5       	in	r25, 0x2e	; 46
     a2c:	81 81       	ldd	r24, Z+1	; 0x01
     a2e:	89 2b       	or	r24, r25
     a30:	8e bd       	out	0x2e, r24	; 46
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <Timer_Init+0x86>
     a34:	85 b5       	in	r24, 0x25	; 37
     a36:	58 2b       	or	r21, r24
     a38:	55 bd       	out	0x25, r21	; 37
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	79 f4       	brne	.+30     	; 0xa5e <Timer_Init+0xaa>
     a40:	8f b7       	in	r24, 0x3f	; 63
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	8f bf       	out	0x3f, r24	; 63
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	08 95       	ret
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	08 95       	ret
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	08 95       	ret
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret

00000a62 <Timer_Start>:
     a62:	88 23       	and	r24, r24
     a64:	21 f0       	breq	.+8      	; 0xa6e <Timer_Start+0xc>
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	09 f4       	brne	.+2      	; 0xa6c <Timer_Start+0xa>
     a6a:	7d c0       	rjmp	.+250    	; 0xb66 <Timer_Start+0x104>
     a6c:	80 c0       	rjmp	.+256    	; 0xb6e <Timer_Start+0x10c>
     a6e:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <sgau8_TIMERMode>
     a72:	91 30       	cpi	r25, 0x01	; 1
     a74:	09 f4       	brne	.+2      	; 0xa78 <Timer_Start+0x16>
     a76:	5c c0       	rjmp	.+184    	; 0xb30 <Timer_Start+0xce>
     a78:	91 11       	cpse	r25, r1
     a7a:	2c c0       	rjmp	.+88     	; 0xad4 <Timer_Start+0x72>
     a7c:	83 b7       	in	r24, 0x33	; 51
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	83 bf       	out	0x33, r24	; 51
     a82:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sgau8_Interrupt_Mode>
     a86:	81 11       	cpse	r24, r1
     a88:	14 c0       	rjmp	.+40     	; 0xab2 <Timer_Start+0x50>
     a8a:	61 15       	cp	r22, r1
     a8c:	71 05       	cpc	r23, r1
     a8e:	09 f4       	brne	.+2      	; 0xa92 <Timer_Start+0x30>
     a90:	77 c0       	rjmp	.+238    	; 0xb80 <Timer_Start+0x11e>
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	98 b7       	in	r25, 0x38	; 56
     a9a:	92 60       	ori	r25, 0x02	; 2
     a9c:	98 bf       	out	0x38, r25	; 56
     a9e:	4c bf       	out	0x3c, r20	; 60
     aa0:	08 b6       	in	r0, 0x38	; 56
     aa2:	01 fe       	sbrs	r0, 1
     aa4:	fd cf       	rjmp	.-6      	; 0xaa0 <Timer_Start+0x3e>
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	62 17       	cp	r22, r18
     aac:	73 07       	cpc	r23, r19
     aae:	a1 f7       	brne	.-24     	; 0xa98 <Timer_Start+0x36>
     ab0:	08 95       	ret
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	09 f0       	breq	.+2      	; 0xab8 <Timer_Start+0x56>
     ab6:	5d c0       	rjmp	.+186    	; 0xb72 <Timer_Start+0x110>
     ab8:	88 b7       	in	r24, 0x38	; 56
     aba:	82 60       	ori	r24, 0x02	; 2
     abc:	88 bf       	out	0x38, r24	; 56
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	8c bf       	out	0x3c, r24	; 60
     ac2:	89 b7       	in	r24, 0x39	; 57
     ac4:	82 60       	ori	r24, 0x02	; 2
     ac6:	89 bf       	out	0x39, r24	; 57
     ac8:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     acc:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <sgpfun_TIMER0_CMP_ISR_Function>
     ad0:	89 2f       	mov	r24, r25
     ad2:	08 95       	ret
     ad4:	92 30       	cpi	r25, 0x02	; 2
     ad6:	09 f0       	breq	.+2      	; 0xada <Timer_Start+0x78>
     ad8:	4e c0       	rjmp	.+156    	; 0xb76 <Timer_Start+0x114>
     ada:	83 b7       	in	r24, 0x33	; 51
     adc:	83 60       	ori	r24, 0x03	; 3
     ade:	83 bf       	out	0x33, r24	; 51
     ae0:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sgau8_Interrupt_Mode>
     ae4:	81 11       	cpse	r24, r1
     ae6:	14 c0       	rjmp	.+40     	; 0xb10 <Timer_Start+0xae>
     ae8:	61 15       	cp	r22, r1
     aea:	71 05       	cpc	r23, r1
     aec:	09 f4       	brne	.+2      	; 0xaf0 <Timer_Start+0x8e>
     aee:	48 c0       	rjmp	.+144    	; 0xb80 <Timer_Start+0x11e>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4d e7       	ldi	r20, 0x7D	; 125
     af6:	98 b7       	in	r25, 0x38	; 56
     af8:	92 60       	ori	r25, 0x02	; 2
     afa:	98 bf       	out	0x38, r25	; 56
     afc:	4c bf       	out	0x3c, r20	; 60
     afe:	08 b6       	in	r0, 0x38	; 56
     b00:	01 fe       	sbrs	r0, 1
     b02:	fd cf       	rjmp	.-6      	; 0xafe <Timer_Start+0x9c>
     b04:	2f 5f       	subi	r18, 0xFF	; 255
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	62 17       	cp	r22, r18
     b0a:	73 07       	cpc	r23, r19
     b0c:	a1 f7       	brne	.-24     	; 0xaf6 <Timer_Start+0x94>
     b0e:	08 95       	ret
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	99 f5       	brne	.+102    	; 0xb7a <Timer_Start+0x118>
     b14:	88 b7       	in	r24, 0x38	; 56
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	88 bf       	out	0x38, r24	; 56
     b1a:	8d e7       	ldi	r24, 0x7D	; 125
     b1c:	8c bf       	out	0x3c, r24	; 60
     b1e:	89 b7       	in	r24, 0x39	; 57
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	89 bf       	out	0x39, r24	; 57
     b24:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     b28:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <sgpfun_TIMER0_CMP_ISR_Function>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret
     b30:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sgau8_Interrupt_Mode>
     b34:	81 11       	cpse	r24, r1
     b36:	08 c0       	rjmp	.+16     	; 0xb48 <Timer_Start+0xe6>
     b38:	98 b7       	in	r25, 0x38	; 56
     b3a:	92 60       	ori	r25, 0x02	; 2
     b3c:	98 bf       	out	0x38, r25	; 56
     b3e:	6c bf       	out	0x3c, r22	; 60
     b40:	08 b6       	in	r0, 0x38	; 56
     b42:	01 fe       	sbrs	r0, 1
     b44:	fd cf       	rjmp	.-6      	; 0xb40 <Timer_Start+0xde>
     b46:	08 95       	ret
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	c9 f4       	brne	.+50     	; 0xb7e <Timer_Start+0x11c>
     b4c:	88 b7       	in	r24, 0x38	; 56
     b4e:	82 60       	ori	r24, 0x02	; 2
     b50:	88 bf       	out	0x38, r24	; 56
     b52:	6c bf       	out	0x3c, r22	; 60
     b54:	89 b7       	in	r24, 0x39	; 57
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	89 bf       	out	0x39, r24	; 57
     b5a:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     b5e:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <sgpfun_TIMER0_CMP_ISR_Function>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret
     b66:	7b bd       	out	0x2b, r23	; 43
     b68:	6a bd       	out	0x2a, r22	; 42
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	08 95       	ret
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	08 95       	ret
     b72:	89 2f       	mov	r24, r25
     b74:	08 95       	ret
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	08 95       	ret
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	08 95       	ret
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	08 95       	ret

00000b82 <__vector_10>:

Timer_ISR(TIMER0_COMP_VECTOR)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
     ba4:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <sgpfun_TIMER0_CMP_ISR_Function>
     ba8:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     bac:	09 95       	icall
}
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_7>:

Timer_ISR(TIMER1_COMPA_VECTOR)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31

	sgpfun_TIMER1_CMPA_ISR_Function();
     bf2:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <sgpfun_TIMER1_CMPA_ISR_Function>
     bf6:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
     bfa:	09 95       	icall
}
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	sgpfun_TIMER1_CMPB_ISR_Function();
     c40:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <sgpfun_TIMER1_CMPB_ISR_Function>
     c44:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <sgpfun_TIMER1_CMPB_ISR_Function+0x1>
     c48:	09 95       	icall
}
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_4>:
Timer_ISR(TIMER2_COMP_VECTOR)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
     c8e:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <sgpfun_TIMER2_CMP_ISR_Function>
     c92:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <sgpfun_TIMER2_CMP_ISR_Function+0x1>
     c96:	09 95       	icall
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	bf 91       	pop	r27
     c9e:	af 91       	pop	r26
     ca0:	9f 91       	pop	r25
     ca2:	8f 91       	pop	r24
     ca4:	7f 91       	pop	r23
     ca6:	6f 91       	pop	r22
     ca8:	5f 91       	pop	r21
     caa:	4f 91       	pop	r20
     cac:	3f 91       	pop	r19
     cae:	2f 91       	pop	r18
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <SOS_Function_ISR>:

/***Function that will be passed to Timer ISR from SOS***/

void  SOS_Function_ISR(void)
{
    sgu64_SOS_Timer_ISR_Count++;
     cba:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sgu64_SOS_Timer_ISR_Count>
     cbe:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <sgu64_SOS_Timer_ISR_Count+0x1>
     cc2:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <sgu64_SOS_Timer_ISR_Count+0x2>
     cc6:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <sgu64_SOS_Timer_ISR_Count+0x3>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <sgu64_SOS_Timer_ISR_Count>
     cd4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <sgu64_SOS_Timer_ISR_Count+0x1>
     cd8:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <sgu64_SOS_Timer_ISR_Count+0x2>
     cdc:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <sgu64_SOS_Timer_ISR_Count+0x3>
     ce0:	08 95       	ret

00000ce2 <SOS_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/
/**SOS initalization happens by this API below**/
/** set configuration of timer OS      **/
SOS_Error_t SOS_Init()
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <SOS_Init+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <SOS_Init+0x8>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	StrSOS_Configuration_t strSOS_configuration;
	
	strSOS_configuration.SOS_TIMER_IDS=SOS_TIMER_ID0;
     cee:	19 82       	std	Y+1, r1	; 0x01
	/*******************************************
	 *  Clock prescaler is adjusted internally *
	 *           no need to enter it           *  
	 *******************************************/
	strSOS_configuration.SOS_TIMER_PSC=SOS_NO_NEED_PSC;
     cf0:	1a 82       	std	Y+2, r1	; 0x02
	strSOS_configuration.SOS_TIMER_MODE=SOS_TIMER_MODE_MILIE;
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	8b 83       	std	Y+3, r24	; 0x03
	strSOS_configuration.SOS_TIMER_INT_Mode=SOS_TIMER_INT;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	8c 83       	std	Y+4, r24	; 0x04
	
	Timer_Init(&strSOS_configuration);
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Timer_Init>
	
	return SOS_Error_OK;
}
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <SOS_Create>:

/***Creat SOS tasks by By initalize array of task of SOS ****/ 
SOS_Error_t SOS_Create(PntrToFunc_t PntrToFunc_Copy_SOS_Start,uint16_t u16_Copy_Periodicity_MS_SOS_Start,uint16_t u16_Copy_Periodic_or_not_SOS_Start,uint16_t u16_Copy_SOS_TASK_Priority)
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	a2 2f       	mov	r26, r18
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
	
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
     d18:	00 91 ac 00 	lds	r16, 0x00AC	; 0x8000ac <sgu16_SOS_index>
     d1c:	10 91 ad 00 	lds	r17, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
     d20:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
     d24:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
     d28:	04 30       	cpi	r16, 0x04	; 4
     d2a:	11 05       	cpc	r17, r1
     d2c:	21 05       	cpc	r18, r1
     d2e:	31 05       	cpc	r19, r1
     d30:	08 f0       	brcs	.+2      	; 0xd34 <SOS_Create+0x22>
     d32:	4b c0       	rjmp	.+150    	; 0xdca <SOS_Create+0xb8>
	else
	{  
        /**Check whether function that passed is nullpointer or not**/
		if(NullPointer!=PntrToFunc_Copy_SOS_Start)
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	09 f4       	brne	.+2      	; 0xd3a <SOS_Create+0x28>
     d38:	4a c0       	rjmp	.+148    	; 0xdce <SOS_Create+0xbc>
		{	
			sga_SOS_Events[sgu16_SOS_index].PntrToFunc=PntrToFunc_Copy_SOS_Start;	
     d3a:	f8 01       	movw	r30, r16
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	e0 0f       	add	r30, r16
     d42:	f1 1f       	adc	r31, r17
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	e0 55       	subi	r30, 0x50	; 80
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	93 87       	std	Z+11, r25	; 0x0b
     d52:	82 87       	std	Z+10, r24	; 0x0a
			/**Check whether the function categorty of function is SOS_Function_ONESHOT or SOS_Function_PERIODIC**/
			if(u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_ONESHOT || u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_PERIODIC)
     d54:	42 30       	cpi	r20, 0x02	; 2
     d56:	51 05       	cpc	r21, r1
     d58:	e0 f5       	brcc	.+120    	; 0xdd2 <SOS_Create+0xc0>
			{		
		
				sga_SOS_Events[sgu16_SOS_index].Periodic_or_not=u16_Copy_Periodic_or_not_SOS_Start;
     d5a:	c8 01       	movw	r24, r16
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	fc 01       	movw	r30, r24
     d62:	e0 0f       	add	r30, r16
     d64:	f1 1f       	adc	r31, r17
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e0 55       	subi	r30, 0x50	; 80
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	40 83       	st	Z, r20
				sga_SOS_Events[sgu16_SOS_index].Priority=u16_Copy_SOS_TASK_Priority;
     d74:	fc 01       	movw	r30, r24
     d76:	e0 0f       	add	r30, r16
     d78:	f1 1f       	adc	r31, r17
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e0 55       	subi	r30, 0x50	; 80
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	a1 83       	std	Z+1, r26	; 0x01
				/**Check whether the function periodicty more than 0 or not **/
				if(u16_Copy_Periodicity_MS_SOS_Start>0U)
     d88:	61 15       	cp	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	21 f1       	breq	.+72     	; 0xdd6 <SOS_Create+0xc4>
				{
                    
					sga_SOS_Events[sgu16_SOS_index].Periodicity_MS=u16_Copy_Periodicity_MS_SOS_Start;
     d8e:	fc 01       	movw	r30, r24
     d90:	e0 0f       	add	r30, r16
     d92:	f1 1f       	adc	r31, r17
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	e0 55       	subi	r30, 0x50	; 80
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	cb 01       	movw	r24, r22
     da2:	a0 e0       	ldi	r26, 0x00	; 0
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	82 83       	std	Z+2, r24	; 0x02
     da8:	93 83       	std	Z+3, r25	; 0x03
     daa:	a4 83       	std	Z+4, r26	; 0x04
     dac:	b5 83       	std	Z+5, r27	; 0x05
					sgu16_SOS_index++;	
     dae:	0f 5f       	subi	r16, 0xFF	; 255
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	2f 4f       	sbci	r18, 0xFF	; 255
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	00 93 ac 00 	sts	0x00AC, r16	; 0x8000ac <sgu16_SOS_index>
     dba:	10 93 ad 00 	sts	0x00AD, r17	; 0x8000ad <sgu16_SOS_index+0x1>
     dbe:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <sgu16_SOS_index+0x2>
     dc2:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <sgu16_SOS_index+0x3>
}

/***Creat SOS tasks by By initalize array of task of SOS ****/ 
SOS_Error_t SOS_Create(PntrToFunc_t PntrToFunc_Copy_SOS_Start,uint16_t u16_Copy_Periodicity_MS_SOS_Start,uint16_t u16_Copy_Periodic_or_not_SOS_Start,uint16_t u16_Copy_SOS_TASK_Priority)
{
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <SOS_Create+0xc6>
	
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <SOS_Create+0xc6>
		
		}
		/**If not adjust error according to criteria **/		
		else
		{
			SOS_Start_Error=SOS_Error_Start_Null_func;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <SOS_Create+0xc6>
			
			}  
			/**If not adjust error according to criteria **/
			else 
			{			
				SOS_Start_Error=SOS_Error_Function_type_undefined;
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <SOS_Create+0xc6>
					sgu16_SOS_index++;	
				}
				/**If not adjust error according to criteria **/
				else
				{
					SOS_Start_Error=SOS_Error_Function_Periodicity_Less_Than_OR_EQUAL_zero;
     dd6:	86 e0       	ldi	r24, 0x06	; 6
		{
			SOS_Start_Error=SOS_Error_Start_Null_func;
		}
	}
	return SOS_Start_Error;
}
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <SOS_Stop>:
    }
}

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{
     dde:	8f 92       	push	r8
     de0:	9f 92       	push	r9
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
    /***Check whether is empty or not**/
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
     df2:	c0 90 ac 00 	lds	r12, 0x00AC	; 0x8000ac <sgu16_SOS_index>
     df6:	d0 90 ad 00 	lds	r13, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
     dfa:	e0 90 ae 00 	lds	r14, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
     dfe:	f0 90 af 00 	lds	r15, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
     e02:	c1 14       	cp	r12, r1
     e04:	d1 04       	cpc	r13, r1
     e06:	e1 04       	cpc	r14, r1
     e08:	f1 04       	cpc	r15, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <SOS_Stop+0x30>
     e0c:	7b c0       	rjmp	.+246    	; 0xf04 <SOS_Stop+0x126>
     e0e:	81 2c       	mov	r8, r1
     e10:	91 2c       	mov	r9, r1
     e12:	54 01       	movw	r10, r8
     e14:	40 e0       	ldi	r20, 0x00	; 0
	{
        /**Loop TO find the function that needed to be stopped**/
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
		{
			/**If we find the function that needed to be removed**/
			if(sga_SOS_Events[u8_SOS_Stop_Index].PntrToFunc==PntrToFunc_Copy_SOS_Start) 
     e16:	24 2f       	mov	r18, r20
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	f9 01       	movw	r30, r18
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e0 55       	subi	r30, 0x50	; 80
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	22 85       	ldd	r18, Z+10	; 0x0a
     e32:	33 85       	ldd	r19, Z+11	; 0x0b
     e34:	28 17       	cp	r18, r24
     e36:	39 07       	cpc	r19, r25
     e38:	09 f0       	breq	.+2      	; 0xe3c <SOS_Stop+0x5e>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <SOS_Stop+0xfc>
			{
	             /**If the index of function not in the end of array ,
				    we should arrange the array**/
				 if(u8_SOS_Stop_Index != sgu16_SOS_index-1 )
     e3c:	97 01       	movw	r18, r14
     e3e:	86 01       	movw	r16, r12
     e40:	01 50       	subi	r16, 0x01	; 1
     e42:	11 09       	sbc	r17, r1
     e44:	21 09       	sbc	r18, r1
     e46:	31 09       	sbc	r19, r1
     e48:	08 15       	cp	r16, r8
     e4a:	19 05       	cpc	r17, r9
     e4c:	2a 05       	cpc	r18, r10
     e4e:	3b 05       	cpc	r19, r11
     e50:	d1 f1       	breq	.+116    	; 0xec6 <SOS_Stop+0xe8>
				 { 
					/*Decrement the sgu16_SOS_index*/
         			sgu16_SOS_index--;
     e52:	00 93 ac 00 	sts	0x00AC, r16	; 0x8000ac <sgu16_SOS_index>
     e56:	10 93 ad 00 	sts	0x00AD, r17	; 0x8000ad <sgu16_SOS_index+0x1>
     e5a:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <sgu16_SOS_index+0x2>
     e5e:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <sgu16_SOS_index+0x3>
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
     e62:	c4 2e       	mov	r12, r20
     e64:	d1 2c       	mov	r13, r1
     e66:	e1 2c       	mov	r14, r1
     e68:	f1 2c       	mov	r15, r1
     e6a:	c0 16       	cp	r12, r16
     e6c:	d1 06       	cpc	r13, r17
     e6e:	e2 06       	cpc	r14, r18
     e70:	f3 06       	cpc	r15, r19
     e72:	98 f5       	brcc	.+102    	; 0xeda <SOS_Stop+0xfc>
 					{
					sga_SOS_Events[u8_SOS_Stop_Index]=sga_SOS_Events[u8_SOS_Stop_Index+1];
     e74:	e4 2f       	mov	r30, r20
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	df 01       	movw	r26, r30
     e7a:	aa 0f       	add	r26, r26
     e7c:	bb 1f       	adc	r27, r27
     e7e:	ae 0f       	add	r26, r30
     e80:	bf 1f       	adc	r27, r31
     e82:	aa 0f       	add	r26, r26
     e84:	bb 1f       	adc	r27, r27
     e86:	aa 0f       	add	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	a0 55       	subi	r26, 0x50	; 80
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	31 96       	adiw	r30, 0x01	; 1
     e90:	bf 01       	movw	r22, r30
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	e6 0f       	add	r30, r22
     e98:	f7 1f       	adc	r31, r23
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	e0 55       	subi	r30, 0x50	; 80
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	5c e0       	ldi	r21, 0x0C	; 12
     ea8:	01 90       	ld	r0, Z+
     eaa:	0d 92       	st	X+, r0
     eac:	5a 95       	dec	r21
     eae:	e1 f7       	brne	.-8      	; 0xea8 <SOS_Stop+0xca>
					u8_SOS_Stop_Index++;
     eb0:	4f 5f       	subi	r20, 0xFF	; 255
				    we should arrange the array**/
				 if(u8_SOS_Stop_Index != sgu16_SOS_index-1 )
				 { 
					/*Decrement the sgu16_SOS_index*/
         			sgu16_SOS_index--;
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
     eb2:	c4 2e       	mov	r12, r20
     eb4:	d1 2c       	mov	r13, r1
     eb6:	e1 2c       	mov	r14, r1
     eb8:	f1 2c       	mov	r15, r1
     eba:	c0 16       	cp	r12, r16
     ebc:	d1 06       	cpc	r13, r17
     ebe:	e2 06       	cpc	r14, r18
     ec0:	f3 06       	cpc	r15, r19
     ec2:	c0 f2       	brcs	.-80     	; 0xe74 <SOS_Stop+0x96>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <SOS_Stop+0xfc>
				 /**Else we don't need to arrange**/
				 else if(u8_SOS_Stop_Index == sgu16_SOS_index-1)
				 {  

                     /*Decrement the sgu16_SOS_index*/					 
					 sgu16_SOS_index--;
     ec6:	80 92 ac 00 	sts	0x00AC, r8	; 0x8000ac <sgu16_SOS_index>
     eca:	90 92 ad 00 	sts	0x00AD, r9	; 0x8000ad <sgu16_SOS_index+0x1>
     ece:	a0 92 ae 00 	sts	0x00AE, r10	; 0x8000ae <sgu16_SOS_index+0x2>
     ed2:	b0 92 af 00 	sts	0x00AF, r11	; 0x8000af <sgu16_SOS_index+0x3>

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
				 else if(u8_SOS_Stop_Index == sgu16_SOS_index-1)
				 {  

                     /*Decrement the sgu16_SOS_index*/					 
					 sgu16_SOS_index--;
     				 break;
     ed8:	16 c0       	rjmp	.+44     	; 0xf06 <SOS_Stop+0x128>
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
	/***Else stop the task from being mangaed by dispatcher by removing it from array */
	else
	{
        /**Loop TO find the function that needed to be stopped**/
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
     eda:	4f 5f       	subi	r20, 0xFF	; 255
     edc:	84 2e       	mov	r8, r20
     ede:	91 2c       	mov	r9, r1
     ee0:	a1 2c       	mov	r10, r1
     ee2:	b1 2c       	mov	r11, r1
     ee4:	c0 90 ac 00 	lds	r12, 0x00AC	; 0x8000ac <sgu16_SOS_index>
     ee8:	d0 90 ad 00 	lds	r13, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
     eec:	e0 90 ae 00 	lds	r14, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
     ef0:	f0 90 af 00 	lds	r15, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
     ef4:	8c 14       	cp	r8, r12
     ef6:	9d 04       	cpc	r9, r13
     ef8:	ae 04       	cpc	r10, r14
     efa:	bf 04       	cpc	r11, r15
     efc:	08 f4       	brcc	.+2      	; 0xf00 <SOS_Stop+0x122>
     efe:	8b cf       	rjmp	.-234    	; 0xe16 <SOS_Stop+0x38>

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <SOS_Stop+0x128>
    /***Check whether is empty or not**/
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
     f04:	83 e0       	ldi	r24, 0x03	; 3
		}
	    
	}

	return SOS_Dispatch_Error;
}
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	08 95       	ret

00000f1c <SOS_Dispatch>:
	}
	return SOS_Start_Error;
}
/***SOS start manage the system for consumers***/
void SOS_Dispatch(void)
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2c 97       	sbiw	r28, 0x0c	; 12
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
    uint8_t u8_1st_Loop_Dispatch_Flag=1;
     f30:	99 24       	eor	r9, r9
     f32:	93 94       	inc	r9
	{ 
		/*
		 *  Check if the disptach is the the first loop to 
		 *  it to start if so start the timer
		 */
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	98 12       	cpse	r9, r24
     f38:	85 c0       	rjmp	.+266    	; 0x1044 <SOS_Dispatch+0x128>
     f3a:	c0 90 ac 00 	lds	r12, 0x00AC	; 0x8000ac <sgu16_SOS_index>
     f3e:	d0 90 ad 00 	lds	r13, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
     f42:	e0 90 ae 00 	lds	r14, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
     f46:	f0 90 af 00 	lds	r15, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
     f4a:	c1 14       	cp	r12, r1
     f4c:	d1 04       	cpc	r13, r1
     f4e:	e1 04       	cpc	r14, r1
     f50:	f1 04       	cpc	r15, r1
     f52:	81 f3       	breq	.-32     	; 0xf34 <SOS_Dispatch+0x18>
     f54:	50 e0       	ldi	r21, 0x00	; 0
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
			{ 
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
     f56:	4f ef       	ldi	r20, 0xFF	; 255
     f58:	4c 0d       	add	r20, r12
     f5a:	54 17       	cp	r21, r20
     f5c:	0c f0       	brlt	.+2      	; 0xf60 <SOS_Dispatch+0x44>
     f5e:	5c c0       	rjmp	.+184    	; 0x1018 <SOS_Dispatch+0xfc>
				{
					SOS_Node_t SOS_Node_t_Buffer;
					if(sga_SOS_Events[s8_i].Priority<sga_SOS_Events[s8_i-1].Priority)  
     f60:	84 2f       	mov	r24, r20
     f62:	04 2e       	mov	r0, r20
     f64:	00 0c       	add	r0, r0
     f66:	99 0b       	sbc	r25, r25
     f68:	9c 01       	movw	r18, r24
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	31 09       	sbc	r19, r1
     f6e:	dc 01       	movw	r26, r24
     f70:	aa 0f       	add	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	a8 0f       	add	r26, r24
     f76:	b9 1f       	adc	r27, r25
     f78:	aa 0f       	add	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	aa 0f       	add	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	a0 55       	subi	r26, 0x50	; 80
     f82:	bf 4f       	sbci	r27, 0xFF	; 255
     f84:	f9 01       	movw	r30, r18
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	e0 55       	subi	r30, 0x50	; 80
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	7c 91       	ld	r23, X
     f9e:	11 97       	sbiw	r26, 0x01	; 1
     fa0:	61 81       	ldd	r22, Z+1	; 0x01
     fa2:	76 17       	cp	r23, r22
     fa4:	a8 f5       	brcc	.+106    	; 0x1010 <SOS_Dispatch+0xf4>
					{
						SOS_Node_t_Buffer=sga_SOS_Events[s8_i];
     fa6:	bc 01       	movw	r22, r24
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	fd 01       	movw	r30, r26
     fae:	1c e0       	ldi	r17, 0x0C	; 12
     fb0:	de 01       	movw	r26, r28
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	01 90       	ld	r0, Z+
     fb6:	0d 92       	st	X+, r0
     fb8:	1a 95       	dec	r17
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <SOS_Dispatch+0x98>
						sga_SOS_Events[s8_i]=sga_SOS_Events[s8_i-1];
     fbc:	db 01       	movw	r26, r22
     fbe:	a8 0f       	add	r26, r24
     fc0:	b9 1f       	adc	r27, r25
     fc2:	aa 0f       	add	r26, r26
     fc4:	bb 1f       	adc	r27, r27
     fc6:	aa 0f       	add	r26, r26
     fc8:	bb 1f       	adc	r27, r27
     fca:	a0 55       	subi	r26, 0x50	; 80
     fcc:	bf 4f       	sbci	r27, 0xFF	; 255
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e0 55       	subi	r30, 0x50	; 80
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	6c e0       	ldi	r22, 0x0C	; 12
     fe8:	01 90       	ld	r0, Z+
     fea:	0d 92       	st	X+, r0
     fec:	6a 95       	dec	r22
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <SOS_Dispatch+0xcc>
						sga_SOS_Events[s8_i-1]=SOS_Node_t_Buffer;
     ff0:	dc 01       	movw	r26, r24
     ff2:	a2 0f       	add	r26, r18
     ff4:	b3 1f       	adc	r27, r19
     ff6:	aa 0f       	add	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	aa 0f       	add	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	a0 55       	subi	r26, 0x50	; 80
    1000:	bf 4f       	sbci	r27, 0xFF	; 255
    1002:	8c e0       	ldi	r24, 0x0C	; 12
    1004:	fe 01       	movw	r30, r28
    1006:	31 96       	adiw	r30, 0x01	; 1
    1008:	01 90       	ld	r0, Z+
    100a:	0d 92       	st	X+, r0
    100c:	8a 95       	dec	r24
    100e:	e1 f7       	brne	.-8      	; 0x1008 <SOS_Dispatch+0xec>
    1010:	41 50       	subi	r20, 0x01	; 1
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
			{ 
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
    1012:	54 17       	cp	r21, r20
    1014:	0c f4       	brge	.+2      	; 0x1018 <SOS_Dispatch+0xfc>
    1016:	a4 cf       	rjmp	.-184    	; 0xf60 <SOS_Dispatch+0x44>
    1018:	5f 5f       	subi	r21, 0xFF	; 255
		 *  it to start if so start the timer
		 */
		if((u8_1st_Loop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
		{
			/**Use bubble sorting for arrangeing prioirty of dispatcher**/
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
    101a:	85 2f       	mov	r24, r21
    101c:	05 2e       	mov	r0, r21
    101e:	00 0c       	add	r0, r0
    1020:	99 0b       	sbc	r25, r25
    1022:	aa 0b       	sbc	r26, r26
    1024:	bb 0b       	sbc	r27, r27
    1026:	8c 15       	cp	r24, r12
    1028:	9d 05       	cpc	r25, r13
    102a:	ae 05       	cpc	r26, r14
    102c:	bf 05       	cpc	r27, r15
    102e:	08 f4       	brcc	.+2      	; 0x1032 <SOS_Dispatch+0x116>
    1030:	92 cf       	rjmp	.-220    	; 0xf56 <SOS_Dispatch+0x3a>
					}
				  
				}
			} 
			/*Timer start working in milies*/
			Timer_Start(TIMER0,0,SOS_Function_ISR);
    1032:	4d e5       	ldi	r20, 0x5D	; 93
    1034:	56 e0       	ldi	r21, 0x06	; 6
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 31 05 	call	0xa62	; 0xa62 <Timer_Start>
			u8_1st_Loop_Dispatch_Flag=0;
    1040:	91 2c       	mov	r9, r1
    1042:	78 cf       	rjmp	.-272    	; 0xf34 <SOS_Dispatch+0x18>
		}
		/**If it is not first loop for dispatcher of SOS**/
		else if((u8_1st_Loop_Dispatch_Flag==0)&&(sgu16_SOS_index!=0))
    1044:	91 10       	cpse	r9, r1
    1046:	76 cf       	rjmp	.-276    	; 0xf34 <SOS_Dispatch+0x18>
    1048:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <sgu16_SOS_index>
    104c:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
    1050:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
    1054:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
    1058:	89 2b       	or	r24, r25
    105a:	8a 2b       	or	r24, r26
    105c:	8b 2b       	or	r24, r27
    105e:	09 f4       	brne	.+2      	; 0x1062 <SOS_Dispatch+0x146>
    1060:	69 cf       	rjmp	.-302    	; 0xf34 <SOS_Dispatch+0x18>
		{
			u64_SOS_COUNT=sgu64_SOS_Timer_ISR_Count;
    1062:	40 90 a8 00 	lds	r4, 0x00A8	; 0x8000a8 <sgu64_SOS_Timer_ISR_Count>
    1066:	50 90 a9 00 	lds	r5, 0x00A9	; 0x8000a9 <sgu64_SOS_Timer_ISR_Count+0x1>
    106a:	60 90 aa 00 	lds	r6, 0x00AA	; 0x8000aa <sgu64_SOS_Timer_ISR_Count+0x2>
    106e:	70 90 ab 00 	lds	r7, 0x00AB	; 0x8000ab <sgu64_SOS_Timer_ISR_Count+0x3>
    1072:	00 eb       	ldi	r16, 0xB0	; 176
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	c1 2c       	mov	r12, r1
    1078:	d1 2c       	mov	r13, r1
    107a:	76 01       	movw	r14, r12
			{ 
				u64_Dispatch_Func_Count=((sga_SOS_Events[u64_i].Period_Count)+1)*sga_SOS_Events[u64_i].Periodicity_MS;
				
				/*** I will increment each function count until i reach to it's periodicity,***
    		     *** then i will execute it's routine                                       ***/
				if((u64_Dispatch_Func_Count==u64_SOS_COUNT))
    107c:	f8 01       	movw	r30, r16
    107e:	86 81       	ldd	r24, Z+6	; 0x06
    1080:	97 81       	ldd	r25, Z+7	; 0x07
    1082:	a0 85       	ldd	r26, Z+8	; 0x08
    1084:	b1 85       	ldd	r27, Z+9	; 0x09
    1086:	9c 01       	movw	r18, r24
    1088:	ad 01       	movw	r20, r26
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	4f 4f       	sbci	r20, 0xFF	; 255
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	62 81       	ldd	r22, Z+2	; 0x02
    1094:	73 81       	ldd	r23, Z+3	; 0x03
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	95 81       	ldd	r25, Z+5	; 0x05
    109a:	0e 94 b0 09 	call	0x1360	; 0x1360 <__mulsi3>
    109e:	46 16       	cp	r4, r22
    10a0:	57 06       	cpc	r5, r23
    10a2:	68 06       	cpc	r6, r24
    10a4:	79 06       	cpc	r7, r25
    10a6:	b9 f4       	brne	.+46     	; 0x10d6 <SOS_Dispatch+0x1ba>
				{      
					/**Execute the customer's function**/
					sga_SOS_Events[u64_i].PntrToFunc();/*Executing...................*/
    10a8:	02 84       	ldd	r0, Z+10	; 0x0a
    10aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    10ac:	e0 2d       	mov	r30, r0
    10ae:	09 95       	icall
					/**Increment the number of occurance of customer function**/
					sga_SOS_Events[u64_i].Period_Count=sga_SOS_Events[u64_i].Period_Count+1;
    10b0:	f8 01       	movw	r30, r16
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	a0 85       	ldd	r26, Z+8	; 0x08
    10b8:	b1 85       	ldd	r27, Z+9	; 0x09
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	a1 1d       	adc	r26, r1
    10be:	b1 1d       	adc	r27, r1
    10c0:	86 83       	std	Z+6, r24	; 0x06
    10c2:	97 83       	std	Z+7, r25	; 0x07
    10c4:	a0 87       	std	Z+8, r26	; 0x08
    10c6:	b1 87       	std	Z+9, r27	; 0x09
                    /***If the function is one shot,let it work then stop it directly**/
  					if(sga_SOS_Events[u64_i].Periodic_or_not==SOS_Function_ONESHOT)
    10c8:	80 81       	ld	r24, Z
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <SOS_Dispatch+0x1ba>
					{
                        /**Stop function (Remove it from array)**/	
						SOS_Stop(sga_SOS_Events[u64_i].PntrToFunc);
    10ce:	82 85       	ldd	r24, Z+10	; 0x0a
    10d0:	93 85       	ldd	r25, Z+11	; 0x0b
    10d2:	0e 94 ef 06 	call	0xdde	; 0xdde <SOS_Stop>
		/**If it is not first loop for dispatcher of SOS**/
		else if((u8_1st_Loop_Dispatch_Flag==0)&&(sgu16_SOS_index!=0))
		{
			u64_SOS_COUNT=sgu64_SOS_Timer_ISR_Count;
			/*Looping to execute the function which it's time comes(Brain of SOS)*/	
			for(uint64_t u64_i=0;u64_i<sgu16_SOS_index;u64_i++)
    10d6:	bf ef       	ldi	r27, 0xFF	; 255
    10d8:	cb 1a       	sub	r12, r27
    10da:	db 0a       	sbc	r13, r27
    10dc:	eb 0a       	sbc	r14, r27
    10de:	fb 0a       	sbc	r15, r27
    10e0:	04 5f       	subi	r16, 0xF4	; 244
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <sgu16_SOS_index>
    10e8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <sgu16_SOS_index+0x1>
    10ec:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <sgu16_SOS_index+0x2>
    10f0:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <sgu16_SOS_index+0x3>
    10f4:	c8 16       	cp	r12, r24
    10f6:	d9 06       	cpc	r13, r25
    10f8:	ea 06       	cpc	r14, r26
    10fa:	fb 06       	cpc	r15, r27
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <SOS_Dispatch+0x1e4>
    10fe:	be cf       	rjmp	.-132    	; 0x107c <SOS_Dispatch+0x160>
    1100:	19 cf       	rjmp	.-462    	; 0xf34 <SOS_Dispatch+0x18>

00001102 <__divsf3>:
    1102:	0e 94 95 08 	call	0x112a	; 0x112a <__divsf3x>
    1106:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_round>
    110a:	0e 94 6f 09 	call	0x12de	; 0x12de <__fp_pscB>
    110e:	58 f0       	brcs	.+22     	; 0x1126 <__divsf3+0x24>
    1110:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_pscA>
    1114:	40 f0       	brcs	.+16     	; 0x1126 <__divsf3+0x24>
    1116:	29 f4       	brne	.+10     	; 0x1122 <__divsf3+0x20>
    1118:	5f 3f       	cpi	r21, 0xFF	; 255
    111a:	29 f0       	breq	.+10     	; 0x1126 <__divsf3+0x24>
    111c:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__fp_inf>
    1120:	51 11       	cpse	r21, r1
    1122:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_szero>
    1126:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_nan>

0000112a <__divsf3x>:
    112a:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_split3>
    112e:	68 f3       	brcs	.-38     	; 0x110a <__divsf3+0x8>

00001130 <__divsf3_pse>:
    1130:	99 23       	and	r25, r25
    1132:	b1 f3       	breq	.-20     	; 0x1120 <__divsf3+0x1e>
    1134:	55 23       	and	r21, r21
    1136:	91 f3       	breq	.-28     	; 0x111c <__divsf3+0x1a>
    1138:	95 1b       	sub	r25, r21
    113a:	55 0b       	sbc	r21, r21
    113c:	bb 27       	eor	r27, r27
    113e:	aa 27       	eor	r26, r26
    1140:	62 17       	cp	r22, r18
    1142:	73 07       	cpc	r23, r19
    1144:	84 07       	cpc	r24, r20
    1146:	38 f0       	brcs	.+14     	; 0x1156 <__divsf3_pse+0x26>
    1148:	9f 5f       	subi	r25, 0xFF	; 255
    114a:	5f 4f       	sbci	r21, 0xFF	; 255
    114c:	22 0f       	add	r18, r18
    114e:	33 1f       	adc	r19, r19
    1150:	44 1f       	adc	r20, r20
    1152:	aa 1f       	adc	r26, r26
    1154:	a9 f3       	breq	.-22     	; 0x1140 <__divsf3_pse+0x10>
    1156:	35 d0       	rcall	.+106    	; 0x11c2 <__divsf3_pse+0x92>
    1158:	0e 2e       	mov	r0, r30
    115a:	3a f0       	brmi	.+14     	; 0x116a <__divsf3_pse+0x3a>
    115c:	e0 e8       	ldi	r30, 0x80	; 128
    115e:	32 d0       	rcall	.+100    	; 0x11c4 <__divsf3_pse+0x94>
    1160:	91 50       	subi	r25, 0x01	; 1
    1162:	50 40       	sbci	r21, 0x00	; 0
    1164:	e6 95       	lsr	r30
    1166:	00 1c       	adc	r0, r0
    1168:	ca f7       	brpl	.-14     	; 0x115c <__divsf3_pse+0x2c>
    116a:	2b d0       	rcall	.+86     	; 0x11c2 <__divsf3_pse+0x92>
    116c:	fe 2f       	mov	r31, r30
    116e:	29 d0       	rcall	.+82     	; 0x11c2 <__divsf3_pse+0x92>
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	bb 1f       	adc	r27, r27
    1178:	26 17       	cp	r18, r22
    117a:	37 07       	cpc	r19, r23
    117c:	48 07       	cpc	r20, r24
    117e:	ab 07       	cpc	r26, r27
    1180:	b0 e8       	ldi	r27, 0x80	; 128
    1182:	09 f0       	breq	.+2      	; 0x1186 <__divsf3_pse+0x56>
    1184:	bb 0b       	sbc	r27, r27
    1186:	80 2d       	mov	r24, r0
    1188:	bf 01       	movw	r22, r30
    118a:	ff 27       	eor	r31, r31
    118c:	93 58       	subi	r25, 0x83	; 131
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	3a f0       	brmi	.+14     	; 0x11a0 <__divsf3_pse+0x70>
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	51 05       	cpc	r21, r1
    1196:	78 f0       	brcs	.+30     	; 0x11b6 <__divsf3_pse+0x86>
    1198:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__fp_inf>
    119c:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	e4 f3       	brlt	.-8      	; 0x119c <__divsf3_pse+0x6c>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	d4 f3       	brlt	.-12     	; 0x119c <__divsf3_pse+0x6c>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	9f 5f       	subi	r25, 0xFF	; 255
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__divsf3_pse+0x78>
    11b6:	88 0f       	add	r24, r24
    11b8:	91 1d       	adc	r25, r1
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24
    11be:	97 f9       	bld	r25, 7
    11c0:	08 95       	ret
    11c2:	e1 e0       	ldi	r30, 0x01	; 1
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	bb 1f       	adc	r27, r27
    11cc:	62 17       	cp	r22, r18
    11ce:	73 07       	cpc	r23, r19
    11d0:	84 07       	cpc	r24, r20
    11d2:	ba 07       	cpc	r27, r26
    11d4:	20 f0       	brcs	.+8      	; 0x11de <__divsf3_pse+0xae>
    11d6:	62 1b       	sub	r22, r18
    11d8:	73 0b       	sbc	r23, r19
    11da:	84 0b       	sbc	r24, r20
    11dc:	ba 0b       	sbc	r27, r26
    11de:	ee 1f       	adc	r30, r30
    11e0:	88 f7       	brcc	.-30     	; 0x11c4 <__divsf3_pse+0x94>
    11e2:	e0 95       	com	r30
    11e4:	08 95       	ret

000011e6 <__fixunssfsi>:
    11e6:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_splitA>
    11ea:	88 f0       	brcs	.+34     	; 0x120e <__fixunssfsi+0x28>
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	98 f0       	brcs	.+38     	; 0x1216 <__fixunssfsi+0x30>
    11f0:	b9 2f       	mov	r27, r25
    11f2:	99 27       	eor	r25, r25
    11f4:	b7 51       	subi	r27, 0x17	; 23
    11f6:	b0 f0       	brcs	.+44     	; 0x1224 <__fixunssfsi+0x3e>
    11f8:	e1 f0       	breq	.+56     	; 0x1232 <__fixunssfsi+0x4c>
    11fa:	66 0f       	add	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	1a f0       	brmi	.+6      	; 0x120a <__fixunssfsi+0x24>
    1204:	ba 95       	dec	r27
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__fixunssfsi+0x14>
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <__fixunssfsi+0x4c>
    120a:	b1 30       	cpi	r27, 0x01	; 1
    120c:	91 f0       	breq	.+36     	; 0x1232 <__fixunssfsi+0x4c>
    120e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__fp_zero>
    1212:	b1 e0       	ldi	r27, 0x01	; 1
    1214:	08 95       	ret
    1216:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_zero>
    121a:	67 2f       	mov	r22, r23
    121c:	78 2f       	mov	r23, r24
    121e:	88 27       	eor	r24, r24
    1220:	b8 5f       	subi	r27, 0xF8	; 248
    1222:	39 f0       	breq	.+14     	; 0x1232 <__fixunssfsi+0x4c>
    1224:	b9 3f       	cpi	r27, 0xF9	; 249
    1226:	cc f3       	brlt	.-14     	; 0x121a <__fixunssfsi+0x34>
    1228:	86 95       	lsr	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b3 95       	inc	r27
    1230:	d9 f7       	brne	.-10     	; 0x1228 <__fixunssfsi+0x42>
    1232:	3e f4       	brtc	.+14     	; 0x1242 <__fixunssfsi+0x5c>
    1234:	90 95       	com	r25
    1236:	80 95       	com	r24
    1238:	70 95       	com	r23
    123a:	61 95       	neg	r22
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__floatunsisf>:
    1244:	e8 94       	clt
    1246:	09 c0       	rjmp	.+18     	; 0x125a <__floatsisf+0x12>

00001248 <__floatsisf>:
    1248:	97 fb       	bst	r25, 7
    124a:	3e f4       	brtc	.+14     	; 0x125a <__floatsisf+0x12>
    124c:	90 95       	com	r25
    124e:	80 95       	com	r24
    1250:	70 95       	com	r23
    1252:	61 95       	neg	r22
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 4f       	sbci	r24, 0xFF	; 255
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	99 23       	and	r25, r25
    125c:	a9 f0       	breq	.+42     	; 0x1288 <__floatsisf+0x40>
    125e:	f9 2f       	mov	r31, r25
    1260:	96 e9       	ldi	r25, 0x96	; 150
    1262:	bb 27       	eor	r27, r27
    1264:	93 95       	inc	r25
    1266:	f6 95       	lsr	r31
    1268:	87 95       	ror	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	b7 95       	ror	r27
    1270:	f1 11       	cpse	r31, r1
    1272:	f8 cf       	rjmp	.-16     	; 0x1264 <__floatsisf+0x1c>
    1274:	fa f4       	brpl	.+62     	; 0x12b4 <__floatsisf+0x6c>
    1276:	bb 0f       	add	r27, r27
    1278:	11 f4       	brne	.+4      	; 0x127e <__floatsisf+0x36>
    127a:	60 ff       	sbrs	r22, 0
    127c:	1b c0       	rjmp	.+54     	; 0x12b4 <__floatsisf+0x6c>
    127e:	6f 5f       	subi	r22, 0xFF	; 255
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	16 c0       	rjmp	.+44     	; 0x12b4 <__floatsisf+0x6c>
    1288:	88 23       	and	r24, r24
    128a:	11 f0       	breq	.+4      	; 0x1290 <__floatsisf+0x48>
    128c:	96 e9       	ldi	r25, 0x96	; 150
    128e:	11 c0       	rjmp	.+34     	; 0x12b2 <__floatsisf+0x6a>
    1290:	77 23       	and	r23, r23
    1292:	21 f0       	breq	.+8      	; 0x129c <__floatsisf+0x54>
    1294:	9e e8       	ldi	r25, 0x8E	; 142
    1296:	87 2f       	mov	r24, r23
    1298:	76 2f       	mov	r23, r22
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <__floatsisf+0x5e>
    129c:	66 23       	and	r22, r22
    129e:	71 f0       	breq	.+28     	; 0x12bc <__floatsisf+0x74>
    12a0:	96 e8       	ldi	r25, 0x86	; 134
    12a2:	86 2f       	mov	r24, r22
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	2a f0       	brmi	.+10     	; 0x12b4 <__floatsisf+0x6c>
    12aa:	9a 95       	dec	r25
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	da f7       	brpl	.-10     	; 0x12aa <__floatsisf+0x62>
    12b4:	88 0f       	add	r24, r24
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret

000012be <__fp_inf>:
    12be:	97 f9       	bld	r25, 7
    12c0:	9f 67       	ori	r25, 0x7F	; 127
    12c2:	80 e8       	ldi	r24, 0x80	; 128
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	08 95       	ret

000012ca <__fp_nan>:
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	80 ec       	ldi	r24, 0xC0	; 192
    12ce:	08 95       	ret

000012d0 <__fp_pscA>:
    12d0:	00 24       	eor	r0, r0
    12d2:	0a 94       	dec	r0
    12d4:	16 16       	cp	r1, r22
    12d6:	17 06       	cpc	r1, r23
    12d8:	18 06       	cpc	r1, r24
    12da:	09 06       	cpc	r0, r25
    12dc:	08 95       	ret

000012de <__fp_pscB>:
    12de:	00 24       	eor	r0, r0
    12e0:	0a 94       	dec	r0
    12e2:	12 16       	cp	r1, r18
    12e4:	13 06       	cpc	r1, r19
    12e6:	14 06       	cpc	r1, r20
    12e8:	05 06       	cpc	r0, r21
    12ea:	08 95       	ret

000012ec <__fp_round>:
    12ec:	09 2e       	mov	r0, r25
    12ee:	03 94       	inc	r0
    12f0:	00 0c       	add	r0, r0
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__fp_round+0xc>
    12f4:	88 23       	and	r24, r24
    12f6:	52 f0       	brmi	.+20     	; 0x130c <__fp_round+0x20>
    12f8:	bb 0f       	add	r27, r27
    12fa:	40 f4       	brcc	.+16     	; 0x130c <__fp_round+0x20>
    12fc:	bf 2b       	or	r27, r31
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__fp_round+0x18>
    1300:	60 ff       	sbrs	r22, 0
    1302:	04 c0       	rjmp	.+8      	; 0x130c <__fp_round+0x20>
    1304:	6f 5f       	subi	r22, 0xFF	; 255
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__fp_split3>:
    130e:	57 fd       	sbrc	r21, 7
    1310:	90 58       	subi	r25, 0x80	; 128
    1312:	44 0f       	add	r20, r20
    1314:	55 1f       	adc	r21, r21
    1316:	59 f0       	breq	.+22     	; 0x132e <__fp_splitA+0x10>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	71 f0       	breq	.+28     	; 0x1338 <__fp_splitA+0x1a>
    131c:	47 95       	ror	r20

0000131e <__fp_splitA>:
    131e:	88 0f       	add	r24, r24
    1320:	97 fb       	bst	r25, 7
    1322:	99 1f       	adc	r25, r25
    1324:	61 f0       	breq	.+24     	; 0x133e <__fp_splitA+0x20>
    1326:	9f 3f       	cpi	r25, 0xFF	; 255
    1328:	79 f0       	breq	.+30     	; 0x1348 <__fp_splitA+0x2a>
    132a:	87 95       	ror	r24
    132c:	08 95       	ret
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	14 06       	cpc	r1, r20
    1334:	55 1f       	adc	r21, r21
    1336:	f2 cf       	rjmp	.-28     	; 0x131c <__fp_split3+0xe>
    1338:	46 95       	lsr	r20
    133a:	f1 df       	rcall	.-30     	; 0x131e <__fp_splitA>
    133c:	08 c0       	rjmp	.+16     	; 0x134e <__fp_splitA+0x30>
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	18 06       	cpc	r1, r24
    1344:	99 1f       	adc	r25, r25
    1346:	f1 cf       	rjmp	.-30     	; 0x132a <__fp_splitA+0xc>
    1348:	86 95       	lsr	r24
    134a:	71 05       	cpc	r23, r1
    134c:	61 05       	cpc	r22, r1
    134e:	08 94       	sec
    1350:	08 95       	ret

00001352 <__fp_zero>:
    1352:	e8 94       	clt

00001354 <__fp_szero>:
    1354:	bb 27       	eor	r27, r27
    1356:	66 27       	eor	r22, r22
    1358:	77 27       	eor	r23, r23
    135a:	cb 01       	movw	r24, r22
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret

00001360 <__mulsi3>:
    1360:	db 01       	movw	r26, r22
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	0e 94 c0 09 	call	0x1380	; 0x1380 <__muluhisi3>
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	a2 9f       	mul	r26, r18
    1370:	80 0d       	add	r24, r0
    1372:	91 1d       	adc	r25, r1
    1374:	a3 9f       	mul	r26, r19
    1376:	90 0d       	add	r25, r0
    1378:	b2 9f       	mul	r27, r18
    137a:	90 0d       	add	r25, r0
    137c:	11 24       	eor	r1, r1
    137e:	08 95       	ret

00001380 <__muluhisi3>:
    1380:	0e 94 cb 09 	call	0x1396	; 0x1396 <__umulhisi3>
    1384:	a5 9f       	mul	r26, r21
    1386:	90 0d       	add	r25, r0
    1388:	b4 9f       	mul	r27, r20
    138a:	90 0d       	add	r25, r0
    138c:	a4 9f       	mul	r26, r20
    138e:	80 0d       	add	r24, r0
    1390:	91 1d       	adc	r25, r1
    1392:	11 24       	eor	r1, r1
    1394:	08 95       	ret

00001396 <__umulhisi3>:
    1396:	a2 9f       	mul	r26, r18
    1398:	b0 01       	movw	r22, r0
    139a:	b3 9f       	mul	r27, r19
    139c:	c0 01       	movw	r24, r0
    139e:	a3 9f       	mul	r26, r19
    13a0:	70 0d       	add	r23, r0
    13a2:	81 1d       	adc	r24, r1
    13a4:	11 24       	eor	r1, r1
    13a6:	91 1d       	adc	r25, r1
    13a8:	b2 9f       	mul	r27, r18
    13aa:	70 0d       	add	r23, r0
    13ac:	81 1d       	adc	r24, r1
    13ae:	11 24       	eor	r1, r1
    13b0:	91 1d       	adc	r25, r1
    13b2:	08 95       	ret

000013b4 <itoa>:
    13b4:	45 32       	cpi	r20, 0x25	; 37
    13b6:	51 05       	cpc	r21, r1
    13b8:	20 f4       	brcc	.+8      	; 0x13c2 <itoa+0xe>
    13ba:	42 30       	cpi	r20, 0x02	; 2
    13bc:	10 f0       	brcs	.+4      	; 0x13c2 <itoa+0xe>
    13be:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__itoa_ncheck>
    13c2:	fb 01       	movw	r30, r22
    13c4:	10 82       	st	Z, r1
    13c6:	cb 01       	movw	r24, r22
    13c8:	08 95       	ret

000013ca <__itoa_ncheck>:
    13ca:	bb 27       	eor	r27, r27
    13cc:	4a 30       	cpi	r20, 0x0A	; 10
    13ce:	31 f4       	brne	.+12     	; 0x13dc <__itoa_ncheck+0x12>
    13d0:	99 23       	and	r25, r25
    13d2:	22 f4       	brpl	.+8      	; 0x13dc <__itoa_ncheck+0x12>
    13d4:	bd e2       	ldi	r27, 0x2D	; 45
    13d6:	90 95       	com	r25
    13d8:	81 95       	neg	r24
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__utoa_common>

000013e0 <__utoa_ncheck>:
    13e0:	bb 27       	eor	r27, r27

000013e2 <__utoa_common>:
    13e2:	fb 01       	movw	r30, r22
    13e4:	55 27       	eor	r21, r21
    13e6:	aa 27       	eor	r26, r26
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	aa 1f       	adc	r26, r26
    13ee:	a4 17       	cp	r26, r20
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <__utoa_common+0x14>
    13f2:	a4 1b       	sub	r26, r20
    13f4:	83 95       	inc	r24
    13f6:	50 51       	subi	r21, 0x10	; 16
    13f8:	b9 f7       	brne	.-18     	; 0x13e8 <__utoa_common+0x6>
    13fa:	a0 5d       	subi	r26, 0xD0	; 208
    13fc:	aa 33       	cpi	r26, 0x3A	; 58
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <__utoa_common+0x20>
    1400:	a9 5d       	subi	r26, 0xD9	; 217
    1402:	a1 93       	st	Z+, r26
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	79 f7       	brne	.-34     	; 0x13e6 <__utoa_common+0x4>
    1408:	b1 11       	cpse	r27, r1
    140a:	b1 93       	st	Z+, r27
    140c:	11 92       	st	Z+, r1
    140e:	cb 01       	movw	r24, r22
    1410:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <strrev>

00001414 <strrev>:
    1414:	dc 01       	movw	r26, r24
    1416:	fc 01       	movw	r30, r24
    1418:	67 2f       	mov	r22, r23
    141a:	71 91       	ld	r23, Z+
    141c:	77 23       	and	r23, r23
    141e:	e1 f7       	brne	.-8      	; 0x1418 <strrev+0x4>
    1420:	32 97       	sbiw	r30, 0x02	; 2
    1422:	04 c0       	rjmp	.+8      	; 0x142c <strrev+0x18>
    1424:	7c 91       	ld	r23, X
    1426:	6d 93       	st	X+, r22
    1428:	70 83       	st	Z, r23
    142a:	62 91       	ld	r22, -Z
    142c:	ae 17       	cp	r26, r30
    142e:	bf 07       	cpc	r27, r31
    1430:	c8 f3       	brcs	.-14     	; 0x1424 <strrev+0x10>
    1432:	08 95       	ret

00001434 <_exit>:
    1434:	f8 94       	cli

00001436 <__stop_program>:
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <__stop_program>
